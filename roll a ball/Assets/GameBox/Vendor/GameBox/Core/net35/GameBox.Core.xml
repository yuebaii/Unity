<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GameBox.Core</name>
    </assembly>
    <members>
        <member name="T:GameBox.DebugLevels">
            <summary>
            调试等级
            </summary>
        </member>
        <member name="F:GameBox.DebugLevels.Production">
            <summary>
            生产环境
            </summary>
        </member>
        <member name="F:GameBox.DebugLevels.Staging">
            <summary>
            仿真环境
            </summary>
        </member>
        <member name="F:GameBox.DebugLevels.Development">
            <summary>
            开发者模式
            </summary>
        </member>
        <member name="T:GameBox.CatLibDispatcherExtend">
            <summary>
            事件调度器扩展方法
            </summary>
        </member>
        <member name="M:GameBox.CatLibDispatcherExtend.On(GameBox.IDispatcher,System.String,System.Object,System.String)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="dispatcher">事件调度器</param>
            <param name="eventName">事件名称</param>
            <param name="target">事件调用目标</param>
            <param name="method">事件处理方法</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.CatLibDispatcherExtend.On(GameBox.IDispatcher,System.String,System.Object,System.Reflection.MethodInfo,System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="dispatcher">事件调度器</param>
            <param name="eventName">事件名称</param>
            <param name="target">事件调度目标</param>
            <param name="methodInfo">事件调度方法</param>
            <param name="group">事件分组</param>
            <returns></returns>
        </member>
        <member name="M:GameBox.CatLibDispatcherExtend.On(GameBox.IDispatcher,System.String,System.Action,System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="dispatcher">事件调度器</param>
            <param name="eventName">事件名称</param>
            <param name="method">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.CatLibDispatcherExtend.On``1(GameBox.IDispatcher,System.String,System.Action{``0},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="dispatcher">事件调度器</param>
            <param name="eventName">事件名称</param>
            <param name="method">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.CatLibDispatcherExtend.On``2(GameBox.IDispatcher,System.String,System.Action{``0,``1},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="dispatcher">事件调度器</param>
            <param name="eventName">事件名称</param>
            <param name="method">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.CatLibDispatcherExtend.On``3(GameBox.IDispatcher,System.String,System.Action{``0,``1,``2},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="dispatcher">事件调度器</param>
            <param name="eventName">事件名称</param>
            <param name="method">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.CatLibDispatcherExtend.On``4(GameBox.IDispatcher,System.String,System.Action{``0,``1,``2,``3},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="dispatcher">事件调度器</param>
            <param name="eventName">事件名称</param>
            <param name="method">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.CatLibDispatcherExtend.Listen``1(GameBox.IDispatcher,System.String,System.Func{``0},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="dispatcher">事件调度器</param>
            <param name="eventName">事件名称</param>
            <param name="method">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.CatLibDispatcherExtend.Listen``2(GameBox.IDispatcher,System.String,System.Func{``0,``1},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="dispatcher">事件调度器</param>
            <param name="eventName">事件名称</param>
            <param name="method">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.CatLibDispatcherExtend.Listen``3(GameBox.IDispatcher,System.String,System.Func{``0,``1,``2},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="dispatcher">事件调度器</param>
            <param name="eventName">事件名称</param>
            <param name="method">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.CatLibDispatcherExtend.Listen``4(GameBox.IDispatcher,System.String,System.Func{``0,``1,``2,``3},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="dispatcher">事件调度器</param>
            <param name="eventName">事件名称</param>
            <param name="method">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.CatLibDispatcherExtend.Listen``5(GameBox.IDispatcher,System.String,System.Func{``0,``1,``2,``3,``4},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="dispatcher">事件调度器</param>
            <param name="eventName">事件名称</param>
            <param name="method">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.CatLibDispatcherExtend.ToGlobalDispatcher(GameBox.IDispatcher)">
            <summary>
            将调度器转为全局调度器
            </summary>
            <param name="dispatcher"></param>
            <returns></returns>
        </member>
        <member name="T:GameBox.GlobalDispatcher">
            <summary>
            全局事件系统
            </summary>
        </member>
        <member name="F:GameBox.GlobalDispatcher.dependResolved">
            <summary>
            依赖解决器
            </summary>
        </member>
        <member name="M:GameBox.GlobalDispatcher.#ctor(System.Func{System.Reflection.ParameterInfo[],System.Object[],System.Object[]})">
            <summary>
            构建一个新的全局事件系统实例
            </summary>
            <param name="dependResolved">依赖解决器</param>
        </member>
        <member name="M:GameBox.GlobalDispatcher.On(System.String,System.Action,System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="action">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.GlobalDispatcher.On``1(System.String,System.Action{``0},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="action">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.GlobalDispatcher.On``2(System.String,System.Action{``0,``1},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="action">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.GlobalDispatcher.On``3(System.String,System.Action{``0,``1,``2},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="action">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.GlobalDispatcher.On``4(System.String,System.Action{``0,``1,``2,``3},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="action">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.GlobalDispatcher.Listen``1(System.String,System.Func{``0},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="func">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.GlobalDispatcher.Listen``2(System.String,System.Func{``0,``1},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="func">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.GlobalDispatcher.Listen``3(System.String,System.Func{``0,``1,``2},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="func">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.GlobalDispatcher.Listen``4(System.String,System.Func{``0,``1,``2,``3},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="func">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.GlobalDispatcher.Listen``5(System.String,System.Func{``0,``1,``2,``3,``4},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="func">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="T:GameBox.IGlobalDispatcher">
            <summary>
            全局事件系统
            </summary>
        </member>
        <member name="M:GameBox.IGlobalDispatcher.On(System.String,System.Action,System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="action">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.IGlobalDispatcher.On``1(System.String,System.Action{``0},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="action">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.IGlobalDispatcher.On``2(System.String,System.Action{``0,``1},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="action">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.IGlobalDispatcher.On``3(System.String,System.Action{``0,``1,``2},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="action">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.IGlobalDispatcher.On``4(System.String,System.Action{``0,``1,``2,``3},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="action">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.IGlobalDispatcher.Listen``1(System.String,System.Func{``0},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="func">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.IGlobalDispatcher.Listen``2(System.String,System.Func{``0,``1},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="func">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.IGlobalDispatcher.Listen``3(System.String,System.Func{``0,``1,``2},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="func">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.IGlobalDispatcher.Listen``4(System.String,System.Func{``0,``1,``2,``3},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="func">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.IGlobalDispatcher.Listen``5(System.String,System.Func{``0,``1,``2,``3,``4},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="func">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="T:GameBox.IOriginalDispatcher">
            <summary>
            原始调度器
            </summary>
        </member>
        <member name="P:GameBox.IOriginalDispatcher.Dispatcher">
            <summary>
            原始调度器
            </summary>
        </member>
        <member name="T:GameBox.TypeExtend">
            <summary>
            Type类型扩展函数
            </summary>
        </member>
        <member name="M:GameBox.TypeExtend.ToService(System.Type)">
            <summary>
            将类型转为服务名
            </summary>
            <param name="type">类型</param>
            <returns>服务名</returns>
        </member>
        <member name="T:GameBox.Facade`1">
            <summary>
            门面
            </summary>
        </member>
        <member name="F:GameBox.Facade`1.instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="F:GameBox.Facade`1.binder">
            <summary>
            绑定数据
            </summary>
        </member>
        <member name="F:GameBox.Facade`1.inited">
            <summary>
            是否已经被初始化
            </summary>
        </member>
        <member name="F:GameBox.Facade`1.service">
            <summary>
            服务名
            </summary>
        </member>
        <member name="F:GameBox.Facade`1.released">
            <summary>
            是否被释放
            </summary>
        </member>
        <member name="M:GameBox.Facade`1.#cctor">
            <summary>
            门面静态构造
            </summary>
        </member>
        <member name="P:GameBox.Facade`1.Instance">
            <summary>
            门面实例
            </summary>
        </member>
        <member name="P:GameBox.Facade`1.HasInstance">
            <summary>
            是否拥有门面实例
            <para>如果为非静态绑定那么永远返回<code>false</code></para>
            <para>门面实例判断不能代替:<code>Container.HasInstance</code></para>
            </summary>
        </member>
        <member name="M:GameBox.Facade`1.Make(System.Object[])">
            <summary>
            构建一个服务实例
            </summary>
            <param name="userParams">用户参数</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GameBox.Facade`1.Resolve(System.Object[])">
            <summary>
            构建一个服务
            </summary>
        </member>
        <member name="M:GameBox.Facade`1.OnRelease(GameBox.IBindData,System.Object)">
            <summary>
            当服务被释放时
            </summary>
            <param name="oldBinder">旧的绑定器</param>
            <param name="_">忽略的参数</param>
        </member>
        <member name="M:GameBox.Facade`1.ServiceRebound(`0)">
            <summary>
            当服务被重绑定时
            </summary>
            <param name="newService">新的服务实例</param>
        </member>
        <member name="M:GameBox.Facade`1.Rebind(GameBox.IBindData)">
            <summary>
            重新绑定
            </summary>
            <param name="newBinder">新的Binder</param>
        </member>
        <member name="M:GameBox.Facade`1.Build(System.Object[])">
            <summary>
            生成服务
            </summary>
            <param name="userParams">服务名</param>
            <returns>服务实例</returns>
        </member>
        <member name="T:GameBox.Facades.Template.Managed`2">
            <summary>
            管理器模版
            </summary>
            <typeparam name="TInterface">主服务接口</typeparam>
            <typeparam name="TExtend">扩展类型接口</typeparam>
        </member>
        <member name="E:GameBox.Facades.Template.Managed`2.OnResolving">
            <summary>
            当扩展被构建时
            </summary>
        </member>
        <member name="E:GameBox.Facades.Template.Managed`2.OnAfterResolving">
            <summary>
            当扩展被构建时之后
            </summary>
        </member>
        <member name="M:GameBox.Facades.Template.Managed`2.Extend(System.Func{`1},System.String)">
            <summary>
            自定义一个扩展构建器
            </summary>
            <param name="builder">扩展构建器</param>
            <param name="name">扩展名</param>
        </member>
        <member name="M:GameBox.Facades.Template.Managed`2.RemoveExtend(System.String)">
            <summary>
            释放指定扩展的构建器
            </summary>
            <param name="name">扩展名</param>
        </member>
        <member name="M:GameBox.Facades.Template.Managed`2.ContainsExtend(System.String)">
            <summary>
            是否包含指定扩展构建器
            </summary>
            <param name="name">扩展名</param>
        </member>
        <member name="T:GameBox.Facades.Template.Manager`2">
            <summary>
            管理器模版
            </summary>
            <typeparam name="TInterface">主服务接口</typeparam>
            <typeparam name="TExtend">扩展类型接口</typeparam>
        </member>
        <member name="M:GameBox.Facades.Template.Manager`2.Get(System.String)">
            <summary>
            获取扩展实现
            </summary>
            <param name="name">扩展名</param>
            <returns>扩展实现</returns>
        </member>
        <member name="T:GameBox.Facades.Template.SingleManaged`2">
            <summary>
            管理器模版
            </summary>
            <typeparam name="TInterface">主服务接口</typeparam>
            <typeparam name="TExtend">扩展类型接口</typeparam>
        </member>
        <member name="E:GameBox.Facades.Template.SingleManaged`2.OnRelease">
            <summary>
            当释放时
            </summary>
        </member>
        <member name="M:GameBox.Facades.Template.SingleManaged`2.Release(System.String)">
            <summary>
            释放指定的扩展实现
            </summary>
            <param name="name">扩展名</param>
        </member>
        <member name="M:GameBox.Facades.Template.SingleManaged`2.Contains(System.String)">
            <summary>
            是否包含指定的扩展实现
            </summary>
            <param name="name">扩展名</param>
            <returns>是否包含扩展实现</returns>
        </member>
        <member name="T:GameBox.Facades.Template.SingleManager`2">
            <summary>
            管理器模版
            </summary>
            <typeparam name="TInterface">主服务接口</typeparam>
            <typeparam name="TExtend">扩展类型接口</typeparam>
        </member>
        <member name="M:GameBox.Facades.Template.SingleManager`2.Get(System.String)">
            <summary>
            获取扩展实现
            </summary>
            <param name="name">扩展名</param>
            <returns>扩展实现</returns>
        </member>
        <member name="P:GameBox.Facades.Template.SingleManager`2.Default">
            <summary>
            默认的扩展实现
            </summary>
        </member>
        <member name="T:GameBox.GBox">
            <summary>
            GameBox Framework
            </summary>
        </member>
        <member name="E:GameBox.GBox.onNewApplication">
            <summary>
            当新建Application时
            </summary>
        </member>
        <member name="E:GameBox.GBox.OnNewApplication">
            <summary>
            当新建Application时
            </summary>
        </member>
        <member name="F:GameBox.GBox.instance">
            <summary>
            GBox实例
            </summary>
        </member>
        <member name="P:GameBox.GBox.Handler">
            <summary>
            GBox实例
            </summary>
        </member>
        <member name="P:GameBox.GBox.HasHandler">
            <summary>
            是否拥有全局GBox实例
            </summary>
        </member>
        <member name="M:GameBox.GBox.Terminate">
            <summary>
            终止GBox框架
            </summary>
        </member>
        <member name="M:GameBox.GBox.Register(GameBox.IServiceProvider)">
            <summary>
            注册服务提供者
            </summary>
            <param name="provider">服务提供者</param>
        </member>
        <member name="M:GameBox.GBox.IsRegisted(GameBox.IServiceProvider)">
            <summary>
            服务提供者是否已经注册过
            </summary>
            <param name="provider">服务提供者</param>
            <returns>服务提供者是否已经注册过</returns>
        </member>
        <member name="M:GameBox.GBox.GetRuntimeId">
            <summary>
            获取运行时唯一Id
            </summary>
            <returns>运行时的唯一Id</returns>
        </member>
        <member name="P:GameBox.GBox.IsMainThread">
            <summary>
            是否是主线程
            </summary>
        </member>
        <member name="P:GameBox.GBox.Version">
            <summary>
            GameBox版本(遵循semver)
            </summary>
        </member>
        <member name="M:GameBox.GBox.Compare(System.Int32,System.Int32,System.Int32)">
            <summary>
            比较GameBox版本(遵循semver)
            <para>输入版本大于当前版本则返回<code>-1</code></para>
            <para>输入版本等于当前版本则返回<code>0</code></para>
            <para>输入版本小于当前版本则返回<code>1</code></para>
            </summary>
            <param name="major">主版本号</param>
            <param name="minor">次版本号</param>
            <param name="revised">修订版本号</param>
            <returns>比较结果</returns>
        </member>
        <member name="M:GameBox.GBox.Compare(System.String)">
            <summary>
            比较GameBox版本(遵循semver)
            <para>输入版本大于当前版本则返回<code>-1</code></para>
            <para>输入版本等于当前版本则返回<code>0</code></para>
            <para>输入版本小于当前版本则返回<code>1</code></para>
            </summary>
            <param name="version">版本号</param>
            <returns>比较结果</returns>
        </member>
        <member name="M:GameBox.GBox.GetPriority(System.Type,System.String)">
            <summary>
            获取优先级，如果存在方法优先级定义那么优先返回方法的优先级
            如果不存在优先级定义那么返回<c>int.MaxValue</c>
            </summary>
            <param name="type">获取优先级的类型</param>
            <param name="method">获取优先级的调用方法</param>
            <returns>优先级</returns>
        </member>
        <member name="P:GameBox.GBox.DebugLevel">
            <summary>
            调试等级
            </summary>
        </member>
        <member name="M:GameBox.GBox.HasListeners(System.String,System.Boolean)">
            <summary>
            判断给定事件是否存在事件监听器
            </summary>
            <param name="eventName">事件名</param>
            <param name="strict">
            严格模式
            <para>启用严格模式则不使用正则来进行匹配事件监听器</para>
            </param>
            <returns>是否存在事件监听器</returns>
        </member>
        <member name="M:GameBox.GBox.Trigger(System.String,System.Object[])">
            <summary>
            触发一个事件,并获取事件的返回结果
            </summary>
            <param name="eventName">事件名称</param>
            <param name="payloads">载荷</param>
            <returns>事件结果</returns>
        </member>
        <member name="M:GameBox.GBox.TriggerHalt(System.String,System.Object[])">
            <summary>
            触发一个事件,遇到第一个事件存在处理结果后终止,并获取事件的返回结果
            </summary>
            <param name="eventName">事件名</param>
            <param name="payloads">载荷</param>
            <returns>事件结果</returns>
        </member>
        <member name="M:GameBox.GBox.On(System.String,System.Object,System.String)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="target">事件调用目标</param>
            <param name="method">事件处理方法</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.GBox.On(System.String,System.Action,System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="method">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.GBox.On``1(System.String,System.Action{``0},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="method">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.GBox.On``2(System.String,System.Action{``0,``1},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="method">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.GBox.On``3(System.String,System.Action{``0,``1,``2},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="method">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.GBox.On``4(System.String,System.Action{``0,``1,``2,``3},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="method">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.GBox.Listen(System.String,System.Func{System.String,System.Object[],System.Object},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="execution">事件调用方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.GBox.Listen``1(System.String,System.Func{``0},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="method">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.GBox.Listen``2(System.String,System.Func{``0,``1},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="method">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.GBox.Listen``3(System.String,System.Func{``0,``1,``2},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="method">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.GBox.Listen``4(System.String,System.Func{``0,``1,``2,``3},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="method">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.GBox.Listen``5(System.String,System.Func{``0,``1,``2,``3,``4},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="method">事件处理方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.GBox.Off(System.Object)">
            <summary>
            解除注册的事件监听器
            </summary>
            <param name="target">
            事件解除目标
            <para>如果传入的是字符串(<code>string</code>)将会解除对应事件名的所有事件</para>
            <para>如果传入的是事件对象(<code>IEvent</code>)那么解除对应事件</para>
            <para>如果传入的是其他实例(<code>object</code>)会解除该实例下的所有事件</para>
            </param>
        </member>
        <member name="M:GameBox.GBox.GetBind(System.String)">
            <summary>
            获取服务的绑定数据,如果绑定不存在则返回null
            </summary>
            <param name="service">服务名或者别名</param>
            <returns>服务绑定数据或者null</returns>
        </member>
        <member name="M:GameBox.GBox.HasBind(System.String)">
            <summary>
            是否已经绑定了服务
            </summary>
            <param name="service">服务名或者别名</param>
            <returns>返回一个bool值代表服务是否被绑定</returns>
        </member>
        <member name="M:GameBox.GBox.HasInstance(System.String)">
            <summary>
            是否已经实例静态化
            </summary>
            <param name="service">服务名或别名</param>
            <returns>是否已经静态化</returns>
        </member>
        <member name="M:GameBox.GBox.IsResolved(System.String)">
            <summary>
            服务是否已经被解决过
            </summary>
            <param name="service">服务名</param>
            <returns>是否已经被解决过</returns>
        </member>
        <member name="M:GameBox.GBox.CanMake(System.String)">
            <summary>
            是否可以生成服务
            </summary>
            <param name="service">服务名或者别名</param>
            <returns>是否可以生成服务</returns>
        </member>
        <member name="M:GameBox.GBox.IsStatic(System.String)">
            <summary>
            服务是否是静态化的,如果服务不存在也将返回false
            </summary>
            <param name="service">服务名或者别名</param>
            <returns>是否是静态化的</returns>
        </member>
        <member name="M:GameBox.GBox.IsAlias(System.String)">
            <summary>
            是否是别名
            </summary>
            <param name="name">名字</param>
            <returns>是否是别名</returns>
        </member>
        <member name="M:GameBox.GBox.Bind(System.String,System.Type,System.Boolean)">
            <summary>
            绑定一个服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否静态化</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.GBox.Bind(System.String,System.Func{GameBox.IContainer,System.Object[],System.Object},System.Boolean)">
            <summary>
            绑定一个服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实体</param>
            <param name="isStatic">服务是否静态化</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.GBox.BindIf(System.String,System.Func{GameBox.IContainer,System.Object[],System.Object},System.Boolean,GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否是静态的</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.GBox.BindIf(System.String,System.Type,System.Boolean,GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否是静态的</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.GBox.BindMethod(System.String,System.Object,System.Reflection.MethodInfo)">
            <summary>
            绑定一个方法到容器
            </summary>
            <param name="method">方法名</param>
            <param name="target">调用目标</param>
            <param name="call">调用方法</param>
            <returns>方法绑定数据</returns>
        </member>
        <member name="M:GameBox.GBox.UnbindMethod(System.Object)">
            <summary>
            解除绑定的方法
            </summary>
            <param name="target">
            解除目标
            <para>如果为字符串则作为调用方法名</para>
            <para>如果为<code>IMethodBind</code>则作为指定方法</para>
            <para>如果为其他对象则作为调用目标做全体解除</para>
            </param>
        </member>
        <member name="M:GameBox.GBox.Unbind(System.String)">
            <summary>
            解除绑定服务
            </summary>
            <param name="service">服务名或者别名</param>
        </member>
        <member name="M:GameBox.GBox.Tag(System.String,System.String[])">
            <summary>
            为一个及以上的服务定义一个标记
            </summary>
            <param name="tag">标记名</param>
            <param name="service">服务名</param>
        </member>
        <member name="M:GameBox.GBox.Tagged(System.String)">
            <summary>
            根据标记名生成标记所对应的所有服务实例
            </summary>
            <param name="tag">标记名</param>
            <returns>将会返回标记所对应的所有服务实例</returns>
        </member>
        <member name="M:GameBox.GBox.Instance(System.String,System.Object)">
            <summary>
            静态化一个服务
            </summary>
            <param name="service">服务名或者别名</param>
            <param name="instance">服务实例</param>
        </member>
        <member name="M:GameBox.GBox.Release(System.String)">
            <summary>
            释放某个静态化实例
            </summary>
            <param name="service">服务名或别名</param>
        </member>
        <member name="M:GameBox.GBox.Invoke(System.String,System.Object[])">
            <summary>
            调用一个已经被绑定的方法
            </summary>
            <param name="method">方法名</param>
            <param name="userParams">用户提供的参数</param>
            <returns>调用结果</returns>
        </member>
        <member name="M:GameBox.GBox.Call(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            以依赖注入形式调用一个方法
            </summary>
            <param name="instance">方法对象</param>
            <param name="methodInfo">方法信息</param>
            <param name="userParams">用户传入的参数</param>
            <returns>方法返回值</returns>
        </member>
        <member name="M:GameBox.GBox.Make(System.String,System.Object[])">
            <summary>
            构造服务
            </summary>
            <param name="service">服务名或别名</param>
            <param name="userParams">用户传入的参数</param>
            <returns>服务实例，如果构造失败那么返回null</returns>
        </member>
        <member name="M:GameBox.GBox.Factory(System.String,System.Object[])">
            <summary>
            获取一个回调，当执行回调可以生成指定的服务
            </summary>
            <param name="service">服务名或别名</param>
            <param name="userParams">用户提供的参数</param>
            <returns>回调方案</returns>
        </member>
        <member name="M:GameBox.GBox.Alias(System.String,System.String)">
            <summary>
            为服务设定一个别名
            </summary>
            <param name="alias">别名</param>
            <param name="service">映射到的服务名</param>
            <returns>当前容器对象</returns>
        </member>
        <member name="M:GameBox.GBox.Extend(System.String,System.Func{System.Object,GameBox.IContainer,System.Object})">
            <summary>
            扩展容器中的服务
            <para>允许在服务构建的过程中配置或者替换服务</para>
            <para>如果服务已经被构建，拓展会立即生效。</para>
            </summary>
            <param name="service">服务名</param>
            <param name="closure">闭包</param>
        </member>
        <member name="M:GameBox.GBox.OnResolving(System.Action{GameBox.IBindData,System.Object})">
            <summary>
            当服务被解决时触发的事件
            </summary>
            <param name="closure">闭包函数</param>
            <returns>当前容器实例</returns>
        </member>
        <member name="M:GameBox.GBox.OnRelease(System.Action{GameBox.IBindData,System.Object})">
            <summary>
            当静态服务被释放时
            </summary>
            <param name="action">处理释放时的回调</param>
        </member>
        <member name="M:GameBox.GBox.OnFindType(System.Func{System.String,System.Type},System.Int32)">
            <summary>
            当查找类型无法找到时会尝试去调用开发者提供的查找类型函数
            </summary>
            <param name="func">查找类型的回调</param>
            <param name="priority">查询优先级(值越小越优先)</param>
            <returns>当前容器实例</returns>
        </member>
        <member name="M:GameBox.GBox.OnRebound(System.String,System.Action{System.Object})">
            <summary>
            当一个已经被解决的服务，发生重定义时触发
            </summary>
            <param name="service">服务名</param>
            <param name="callback">回调</param>
            <returns>服务容器</returns>
        </member>
        <member name="M:GameBox.GBox.Flash(System.Action,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            在回调区间内暂时性的静态化服务实例
            </summary>
            <param name="callback">回调区间</param>
            <param name="services">服务映射</param>
        </member>
        <member name="M:GameBox.GBox.Type2Service(System.Type)">
            <summary>
            类型转为服务名
            </summary>
            <param name="type">类型</param>
            <returns>转换后的服务名</returns>
        </member>
        <member name="M:GameBox.GBox.GetBind``1">
            <summary>
            获取服务的绑定数据,如果绑定不存在则返回null
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <returns>服务绑定数据或者null</returns>
        </member>
        <member name="M:GameBox.GBox.HasInstance``1">
            <summary>
            是否已经实例静态化
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <returns>是否已经静态化</returns>
        </member>
        <member name="M:GameBox.GBox.IsResolved``1">
            <summary>
            服务是否已经被解决过
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <returns>是否已经被解决过</returns>
        </member>
        <member name="M:GameBox.GBox.HasBind``1">
            <summary>
            是否已经绑定了服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <returns>代表服务是否被绑定</returns>
        </member>
        <member name="M:GameBox.GBox.CanMake``1">
            <summary>
            是否可以生成服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <returns>服务是否可以被构建</returns>
        </member>
        <member name="M:GameBox.GBox.IsStatic``1">
            <summary>
            服务是否是静态化的,如果服务不存在也将返回false
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <returns>服务是否是静态化的</returns>
        </member>
        <member name="M:GameBox.GBox.IsAlias``1">
            <summary>
            是否是别名
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <returns>是否是别名</returns>
        </member>
        <member name="M:GameBox.GBox.Alias``2">
            <summary>
            为服务设定一个别名
            </summary>
            <typeparam name="TAlias">别名</typeparam>
            <typeparam name="TService">服务名</typeparam>
        </member>
        <member name="M:GameBox.GBox.Extend(System.String,System.Func{System.Object,System.Object})">
            <summary>
            扩展容器中的服务
            <para>允许在服务构建的过程中配置或者替换服务</para>
            <para>如果服务已经被构建，拓展会立即生效。</para>
            </summary>
            <param name="service">服务名</param>
            <param name="closure">闭包</param>
        </member>
        <member name="M:GameBox.GBox.Extend``2(System.Func{``1,System.Object})">
            <summary>
            扩展容器中的服务
            <para>允许在服务构建的过程中配置或者替换服务</para>
            <para>如果服务已经被构建，拓展会立即生效。</para>
            </summary>
            <param name="closure">闭包</param>
        </member>
        <member name="M:GameBox.GBox.Extend``2(System.Func{``1,GameBox.IContainer,System.Object})">
            <summary>
            扩展容器中的服务
            <para>允许在服务构建的过程中配置或者替换服务</para>
            <para>如果服务已经被构建，拓展会立即生效。</para>
            </summary>
            <param name="closure">闭包</param>
        </member>
        <member name="M:GameBox.GBox.Extend``1(System.Func{``0,GameBox.IContainer,System.Object})">
            <summary>
            扩展容器中的全部服务
            <para>如果构建的实例符合指定的类型或者接口，那么触发扩展闭包</para>
            </summary>
            <typeparam name="TConcrete">实现的类型或接口</typeparam>
            <param name="closure">闭包</param>
        </member>
        <member name="M:GameBox.GBox.Extend``1(System.Func{``0,System.Object})">
            <summary>
            扩展容器中的全部服务
            <para>如果构建的实例符合指定的类型或者接口，那么触发扩展闭包</para>
            </summary>
            <typeparam name="TConcrete">实现的类型或接口</typeparam>
            <param name="closure">闭包</param>
        </member>
        <member name="M:GameBox.GBox.Bind``1">
            <summary>
            常规绑定一个服务
            </summary>
            <typeparam name="TService">服务名，同时也是服务实现</typeparam>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.GBox.Bind``2">
            <summary>
            常规绑定一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <typeparam name="TConcrete">服务实现</typeparam>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.GBox.Bind``1(System.Func{GameBox.IContainer,System.Object[],System.Object})">
            <summary>
            常规绑定一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="concrete">服务实现</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.GBox.Bind``1(System.Func{System.Object[],System.Object})">
            <summary>
            常规绑定一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="concrete">服务实现</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.GBox.Bind``1(System.Func{System.Object})">
            <summary>
            常规绑定一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="concrete">服务实现</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.GBox.Bind(System.String,System.Func{GameBox.IContainer,System.Object[],System.Object})">
            <summary>
            常规绑定一个服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.GBox.BindIf``2(GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <typeparam name="TConcrete">服务实现</typeparam>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.GBox.BindIf``1(GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <typeparam name="TService">服务名，同时也是服务实现</typeparam>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.GBox.BindIf``1(System.Func{GameBox.IContainer,System.Object[],System.Object},GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="concrete">服务实现</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.GBox.BindIf``1(System.Func{System.Object[],System.Object},GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="concrete">服务实现</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.GBox.BindIf``1(System.Func{System.Object},GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="concrete">服务实现</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.GBox.BindIf(System.String,System.Func{GameBox.IContainer,System.Object[],System.Object},GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.GBox.Singleton``2">
            <summary>
            以单例的形式绑定一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <typeparam name="TConcrete">服务实现</typeparam>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.GBox.Singleton``1">
            <summary>
            以单例的形式绑定一个服务
            </summary>
            <typeparam name="TService">服务名，同时也是服务实现</typeparam>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.GBox.Singleton``1(System.Func{GameBox.IContainer,System.Object[],System.Object})">
            <summary>
            以单例的形式绑定一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="concrete">服务实现</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.GBox.Singleton``1(System.Func{System.Object})">
            <summary>
            以单例的形式绑定一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="concrete">服务实现</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.GBox.Singleton``1(System.Func{System.Object[],System.Object})">
            <summary>
            以单例的形式绑定一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="concrete">服务实现</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.GBox.Singleton(System.String,System.Func{GameBox.IContainer,System.Object[],System.Object})">
            <summary>
            以单例的形式绑定一个服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.GBox.SingletonIf``2(GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <typeparam name="TConcrete">服务实现</typeparam>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.GBox.SingletonIf``1(GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <typeparam name="TService">服务名，同时也是服务实现</typeparam>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.GBox.SingletonIf``1(System.Func{GameBox.IContainer,System.Object[],System.Object},GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="concrete">服务实现</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.GBox.SingletonIf``1(System.Func{System.Object[],System.Object},GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="concrete">服务实现</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.GBox.SingletonIf``1(System.Func{System.Object},GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="concrete">服务实现</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.GBox.SingletonIf(System.String,System.Func{GameBox.IContainer,System.Object[],System.Object},GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.GBox.BindMethod(System.String,System.Object,System.String)">
            <summary>
            绑定一个方法到容器
            </summary>
            <param name="method">方法名</param>
            <param name="target">调用目标</param>
            <param name="call">调用方法</param>
        </member>
        <member name="M:GameBox.GBox.BindMethod(System.String,System.Func{System.Object})">
            <summary>
            绑定一个方法到容器
            </summary>
            <param name="method">方法名</param>
            <param name="callback">调用方法</param>
        </member>
        <member name="M:GameBox.GBox.BindMethod``1(System.String,System.Func{``0,System.Object})">
            <summary>
            绑定一个方法到容器
            </summary>
            <param name="method">方法名</param>
            <param name="callback">调用方法</param>
        </member>
        <member name="M:GameBox.GBox.BindMethod``2(System.String,System.Func{``0,``1,System.Object})">
            <summary>
            绑定一个方法到容器
            </summary>
            <param name="method">方法名</param>
            <param name="callback">调用方法</param>
        </member>
        <member name="M:GameBox.GBox.BindMethod``3(System.String,System.Func{``0,``1,``2,System.Object})">
            <summary>
            绑定一个方法到容器
            </summary>
            <param name="method">方法名</param>
            <param name="callback">调用方法</param>
        </member>
        <member name="M:GameBox.GBox.BindMethod``4(System.String,System.Func{``0,``1,``2,``3,System.Object})">
            <summary>
            绑定一个方法到容器
            </summary>
            <param name="method">方法名</param>
            <param name="callback">调用方法</param>
        </member>
        <member name="M:GameBox.GBox.Unbind``1">
            <summary>
            解除服务绑定
            </summary>
            <typeparam name="TService">解除绑定的服务</typeparam>
        </member>
        <member name="M:GameBox.GBox.Tag``1(System.String)">
            <summary>
            为一个服务定义一个标记
            </summary>
            <typeparam name="TService">服务</typeparam>
            <param name="tag">标记名</param>
        </member>
        <member name="M:GameBox.GBox.Instance``1(System.Object)">
            <summary>
            静态化一个服务,实例值会经过解决修饰器
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="instance">实例值</param>
        </member>
        <member name="M:GameBox.GBox.Release``1">
            <summary>
            释放服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
        </member>
        <member name="M:GameBox.GBox.Release(System.Object[]@,System.Boolean)">
            <summary>
            根据实例对象释放静态化实例
            </summary>
            <param name="instances">需要释放静态化实例对象</param>
            <param name="reverse">以相反的顺序释放实例</param>
            <returns>只要有一个没有释放成功那么返回false，<paramref name="instances"/>为没有释放掉的实例</returns>
        </member>
        <member name="M:GameBox.GBox.Call(System.Object,System.String,System.Object[])">
            <summary>
            以依赖注入形式调用一个方法
            </summary>
            <param name="instance">方法对象</param>
            <param name="method">方法名</param>
            <param name="userParams">用户传入的参数</param>
            <returns>方法返回值</returns>
        </member>
        <member name="M:GameBox.GBox.Call``1(System.Action{``0},System.Object[])">
            <summary>
            以依赖注入的形式调用一个方法
            </summary>
            <param name="method">方法</param>
            <param name="userParams">用户传入的参数</param>
        </member>
        <member name="M:GameBox.GBox.Call``2(System.Action{``0,``1},System.Object[])">
            <summary>
            以依赖注入的形式调用一个方法
            </summary>
            <param name="method">方法</param>
            <param name="userParams">用户传入的参数</param>
        </member>
        <member name="M:GameBox.GBox.Call``3(System.Action{``0,``1,``2},System.Object[])">
            <summary>
            以依赖注入的形式调用一个方法
            </summary>
            <param name="method">方法</param>
            <param name="userParams">用户传入的参数</param>
        </member>
        <member name="M:GameBox.GBox.Call``4(System.Action{``0,``1,``2,``3},System.Object[])">
            <summary>
            以依赖注入的形式调用一个方法
            </summary>
            <param name="method">方法</param>
            <param name="userParams">用户传入的参数</param>
        </member>
        <member name="M:GameBox.GBox.Wrap``1(System.Action{``0},System.Object[])">
            <summary>
            包装一个依赖注入形式调用的一个方法
            </summary>
            <param name="method">方法</param>
            <param name="userParams">用户传入的参数</param>
            <returns>包装方法</returns>
        </member>
        <member name="M:GameBox.GBox.Wrap``2(System.Action{``0,``1},System.Object[])">
            <summary>
            包装一个依赖注入形式调用的一个方法
            </summary>
            <param name="method">方法</param>
            <param name="userParams">用户传入的参数</param>
            <returns>包装方法</returns>
        </member>
        <member name="M:GameBox.GBox.Wrap``3(System.Action{``0,``1,``2},System.Object[])">
            <summary>
            包装一个依赖注入形式调用的一个方法
            </summary>
            <param name="method">方法</param>
            <param name="userParams">用户传入的参数</param>
            <returns>包装方法</returns>
        </member>
        <member name="M:GameBox.GBox.Wrap``4(System.Action{``0,``1,``2,``3},System.Object[])">
            <summary>
            包装一个依赖注入形式调用的一个方法
            </summary>
            <param name="method">方法</param>
            <param name="userParams">用户传入的参数</param>
            <returns>包装方法</returns>
        </member>
        <member name="M:GameBox.GBox.Make``1(System.Object[])">
            <summary>
            构造一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="userParams">用户参数</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GameBox.GBox.Make(System.Type,System.Object[])">
            <summary>
            构造一个服务
            </summary>
            <param name="type">服务类型</param>
            <param name="userParams">用户提供的参数</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GameBox.GBox.Factory``1(System.Object[])">
            <summary>
            获取一个回调，当执行回调可以生成指定的服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <returns>回调方案</returns>
        </member>
        <member name="M:GameBox.GBox.OnRelease(System.Action{System.Object})">
            <summary>
            当静态服务被释放时
            </summary>
            <param name="callback">处理释放时的回调</param>
            <returns>当前容器实例</returns>
        </member>
        <member name="M:GameBox.GBox.OnRelease``1(System.Action{``0})">
            <summary>
            当静态服务被释放时
            </summary>
            <param name="closure">处理释放时的回调</param>
            <returns>当前容器实例</returns>
        </member>
        <member name="M:GameBox.GBox.OnRelease``1(System.Action{GameBox.IBindData,``0})">
            <summary>
            当静态服务被释放时
            </summary>
            <param name="closure">处理释放时的回调</param>
            <returns>当前容器实例</returns>
        </member>
        <member name="M:GameBox.GBox.OnResolving(System.Action{System.Object})">
            <summary>
            当服务被解决时，生成的服务会经过注册的回调函数
            </summary>
            <param name="callback">回调函数</param>
            <returns>当前容器对象</returns>
        </member>
        <member name="M:GameBox.GBox.OnResolving``1(System.Action{``0})">
            <summary>
            当服务被解决时，生成的服务会经过注册的回调函数
            </summary>
            <param name="closure">回调函数</param>
            <returns>当前容器对象</returns>
        </member>
        <member name="M:GameBox.GBox.OnResolving``1(System.Action{GameBox.IBindData,``0})">
            <summary>
            当服务被解决时，生成的服务会经过注册的回调函数
            </summary>
            <param name="closure">回调函数</param>
            <returns>当前容器对象</returns>
        </member>
        <member name="M:GameBox.GBox.OnAfterResolving(System.Action{GameBox.IBindData,System.Object})">
            <summary>
            当服务被解决事件之后的回调
            </summary>
            <param name="closure">闭包</param>
            <returns>当前容器</returns>
        </member>
        <member name="M:GameBox.GBox.OnAfterResolving(System.Action{System.Object})">
            <summary>
            当服务被解决事件之后的回调
            </summary>
            <param name="closure">闭包</param>
            <returns>当前容器</returns>
        </member>
        <member name="M:GameBox.GBox.OnAfterResolving``1(System.Action{``0})">
            <summary>
            当服务被解决事件之后的回调
            </summary>
            <typeparam name="TWhere">筛选条件</typeparam>
            <param name="closure">闭包</param>
            <returns>当前容器</returns>
        </member>
        <member name="M:GameBox.GBox.OnAfterResolving``1(System.Action{GameBox.IBindData,``0})">
            <summary>
            当服务被解决事件之后的回调
            </summary>
            <typeparam name="TWhere">筛选条件</typeparam>
            <param name="closure">闭包</param>
            <returns>当前容器</returns>
        </member>
        <member name="M:GameBox.GBox.Watch``1(System.Action)">
            <summary>
            关注指定的服务，当服务触发重定义时调用指定对象的指定方法
            <param>调用是以依赖注入的形式进行的</param>
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="method">回调</param>
        </member>
        <member name="M:GameBox.GBox.Watch``1(System.Action{``0})">
            <summary>
            关注指定的服务，当服务触发重定义时调用指定对象的指定方法
            <param>调用是以依赖注入的形式进行的</param>
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="method">回调</param>
        </member>
        <member name="M:GameBox.GBox.Flash(System.Action,System.String,System.Object)">
            <summary>
            在回调区间内暂时性的静态化服务实例
            </summary>
            <param name="callback">回调区间</param>
            <param name="service">服务名</param>
            <param name="instance">实例名</param>
        </member>
        <member name="M:GameBox.GBox.Type2Service``1">
            <summary>
            类型转为服务名
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <returns>服务名</returns>
        </member>
        <member name="T:GameBox.GBoxEvents">
            <summary>
            GameBox全局事件
            </summary>
        </member>
        <member name="F:GameBox.GBoxEvents.OnBootstrap">
            <summary>
            当引导程序开始之前
            </summary>
        </member>
        <member name="F:GameBox.GBoxEvents.Bootstrapping">
            <summary>
            当引导程序进行中
            </summary>
        </member>
        <member name="F:GameBox.GBoxEvents.OnBootstraped">
            <summary>
            当引导完成时
            </summary>
        </member>
        <member name="F:GameBox.GBoxEvents.OnRegisterProvider">
            <summary>
            当注册服务提供者
            </summary>
        </member>
        <member name="F:GameBox.GBoxEvents.OnInit">
            <summary>
            当初始化开始之前
            </summary>
        </member>
        <member name="F:GameBox.GBoxEvents.OnProviderInit">
            <summary>
            当服务提供者初始化进行前
            </summary>
        </member>
        <member name="F:GameBox.GBoxEvents.OnProviderInited">
            <summary>
            当服务提供者初始化结束后
            </summary>
        </member>
        <member name="F:GameBox.GBoxEvents.OnInited">
            <summary>
            当初始化完成之后
            </summary>
        </member>
        <member name="F:GameBox.GBoxEvents.OnStartCompleted">
            <summary>
            当程序启动完成
            </summary>
        </member>
        <member name="F:GameBox.GBoxEvents.OnTerminate">
            <summary>
            当程序终止之前
            </summary>
        </member>
        <member name="F:GameBox.GBoxEvents.OnTerminated">
            <summary>
            当程序终止之后
            </summary>
        </member>
        <member name="T:GameBox.GBoxFramework">
            <summary>
            GameBox 框架
            </summary>
        </member>
        <member name="F:GameBox.GBoxFramework.version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="T:GameBox.GBoxFramework.StartProcess">
            <summary>
            框架启动流程
            </summary>
        </member>
        <member name="F:GameBox.GBoxFramework.StartProcess.Construct">
            <summary>
            构建阶段
            </summary>
        </member>
        <member name="F:GameBox.GBoxFramework.StartProcess.Bootstrap">
            <summary>
            引导流程之前
            </summary>
        </member>
        <member name="F:GameBox.GBoxFramework.StartProcess.Bootstrapping">
            <summary>
            引导流程进行中
            </summary>
        </member>
        <member name="F:GameBox.GBoxFramework.StartProcess.Bootstraped">
            <summary>
            引导流程结束之后
            </summary>
        </member>
        <member name="F:GameBox.GBoxFramework.StartProcess.Init">
            <summary>
            初始化开始之前
            </summary>
        </member>
        <member name="F:GameBox.GBoxFramework.StartProcess.Initing">
            <summary>
            初始化中
            </summary>
        </member>
        <member name="F:GameBox.GBoxFramework.StartProcess.Inited">
            <summary>
            初始化完成后
            </summary>
        </member>
        <member name="F:GameBox.GBoxFramework.StartProcess.Running">
            <summary>
            框架运行中
            </summary>
        </member>
        <member name="F:GameBox.GBoxFramework.StartProcess.Terminate">
            <summary>
            框架终止之前
            </summary>
        </member>
        <member name="F:GameBox.GBoxFramework.StartProcess.Terminating">
            <summary>
            框架终止进行中
            </summary>
        </member>
        <member name="F:GameBox.GBoxFramework.StartProcess.Terminated">
            <summary>
            框架终止之后
            </summary>
        </member>
        <member name="F:GameBox.GBoxFramework.serviceProviders">
            <summary>
            服务提供者
            </summary>
        </member>
        <member name="F:GameBox.GBoxFramework.serviceProviderTypes">
            <summary>
            注册服务提供者
            </summary>
        </member>
        <member name="F:GameBox.GBoxFramework.bootstrapped">
            <summary>
            是否已经完成引导程序
            </summary>
        </member>
        <member name="F:GameBox.GBoxFramework.inited">
            <summary>
            是否已经完成初始化
            </summary>
        </member>
        <member name="F:GameBox.GBoxFramework.registering">
            <summary>
            是否正在注册中
            </summary>
        </member>
        <member name="P:GameBox.GBoxFramework.Process">
            <summary>
            启动流程
            </summary>
        </member>
        <member name="F:GameBox.GBoxFramework.incrementId">
            <summary>
            增量Id
            </summary>
        </member>
        <member name="F:GameBox.GBoxFramework.mainThreadId">
            <summary>
            主线程ID
            </summary>
        </member>
        <member name="P:GameBox.GBoxFramework.IsMainThread">
            <summary>
            是否是主线程
            </summary>
        </member>
        <member name="F:GameBox.GBoxFramework.dispatcher">
            <summary>
            事件系统
            </summary>
        </member>
        <member name="P:GameBox.GBoxFramework.Dispatcher">
            <summary>
            事件系统
            </summary>
        </member>
        <member name="F:GameBox.GBoxFramework.debugLevel">
            <summary>
            调试等级
            </summary>
        </member>
        <member name="M:GameBox.GBoxFramework.#ctor(System.Boolean)">
            <summary>
            GameBox
            </summary>
            <param name="global">是否将当前实例应用到全局</param>
        </member>
        <member name="M:GameBox.GBoxFramework.New(System.Boolean)">
            <summary>
            构建一个新的GBoxFramework实例
            </summary>
            <param name="global">是否将当前实例应用到全局</param>
            <returns>GBoxFramework实例</returns>
        </member>
        <member name="M:GameBox.GBoxFramework.Terminate">
            <summary>
            终止GameBox框架
            </summary>
        </member>
        <member name="M:GameBox.GBoxFramework.Bootstrap(GameBox.IBootstrap[])">
            <summary>
            引导程序
            </summary>
            <param name="bootstraps">引导程序</param>
            <returns>GameBox实例</returns>
            <exception cref="T:System.ArgumentNullException">当引导类型为null时引发</exception>
        </member>
        <member name="M:GameBox.GBoxFramework.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:GameBox.GBoxFramework.CoroutineInit">
            <summary>
            初始化
            </summary>
            <exception cref="T:GameBox.CodeStandardException">没有调用<c>Bootstrap(...)</c>就尝试初始化时触发</exception>
        </member>
        <member name="M:GameBox.GBoxFramework.Register(GameBox.IServiceProvider)">
            <summary>
            注册服务提供者
            </summary>
            <param name="provider">注册服务提供者</param>
            <exception cref="T:GameBox.LogicException">服务提供者被重复注册时触发</exception>
        </member>
        <member name="M:GameBox.GBoxFramework.CoroutineRegister(GameBox.IServiceProvider)">
            <summary>
            注册服务提供者
            </summary>
            <param name="provider">注册服务提供者</param>
            <exception cref="T:GameBox.LogicException">服务提供者被重复注册时触发</exception>
        </member>
        <member name="M:GameBox.GBoxFramework.AddSortedList``1(System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.List{``0}},``0,System.String)">
            <summary>
            增加到排序列表
            </summary>
            <param name="list">列表</param>
            <param name="insert">需要插入的记录</param>
            <param name="priorityMethod">优先级函数</param>
        </member>
        <member name="M:GameBox.GBoxFramework.InitProvider(GameBox.IServiceProvider)">
            <summary>
            初始化服务提供者
            </summary>
            <param name="provider">服务提供者</param>
        </member>
        <member name="M:GameBox.GBoxFramework.IsRegisted(GameBox.IServiceProvider)">
            <summary>
            服务提供者是否已经注册过
            </summary>
            <param name="provider">服务提供者</param>
            <returns>服务提供者是否已经注册过</returns>
        </member>
        <member name="M:GameBox.GBoxFramework.GetRuntimeId">
            <summary>
            获取运行时唯一Id
            </summary>
            <returns>应用程序内唯一id</returns>
        </member>
        <member name="M:GameBox.GBoxFramework.GetPriority(System.Type,System.String)">
            <summary>
            获取优先级
            </summary>
            <param name="type">识别的类型</param>
            <param name="method">识别的方法</param>
            <returns>优先级</returns>
        </member>
        <member name="P:GameBox.GBoxFramework.DebugLevel">
            <summary>
            调试等级
            </summary>
        </member>
        <member name="M:GameBox.GBoxFramework.Trigger(System.String,System.Object[])">
            <summary>
            触发一个事件,并获取事件的返回结果
            </summary>
            <param name="eventName">事件名称</param>
            <param name="payloads">载荷</param>
            <returns>事件结果</returns>
        </member>
        <member name="M:GameBox.GBoxFramework.TriggerHalt(System.String,System.Object[])">
            <summary>
            触发一个事件,遇到第一个事件存在处理结果后终止,并获取事件的返回结果
            </summary>
            <param name="eventName">事件名</param>
            <param name="payloads">载荷</param>
            <returns>事件结果</returns>
        </member>
        <member name="M:GameBox.GBoxFramework.HasListeners(System.String,System.Boolean)">
            <summary>
            判断给定事件是否存在事件监听器
            </summary>
            <param name="eventName">事件名</param>
            <param name="strict">
            严格模式
            <para>启用严格模式则不使用正则来进行匹配事件监听器</para>
            </param>
            <returns>是否存在事件监听器</returns>
        </member>
        <member name="M:GameBox.GBoxFramework.On(System.String,System.Func{System.String,System.Object[],System.Object},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="execution">事件调用方法</param>
            <param name="group">事件分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.GBoxFramework.Off(System.Object)">
            <summary>
            解除注册的事件监听器
            </summary>
            <param name="target">
            事件解除目标
            <para>如果传入的是字符串(<code>string</code>)将会解除对应事件名的所有事件</para>
            <para>如果传入的是事件对象(<code>IEvent</code>)那么解除对应事件</para>
            <para>如果传入的是其他实例(<code>object</code>)会解除该实例下的所有事件</para>
            </param>
        </member>
        <member name="P:GameBox.GBoxFramework.Version">
            <summary>
            GameBox版本(遵循semver)
            </summary>
        </member>
        <member name="M:GameBox.GBoxFramework.Compare(System.Int32,System.Int32,System.Int32)">
            <summary>
            比较GameBox版本(遵循semver)
            <para>输入版本大于当前版本则返回<code>-1</code></para>
            <para>输入版本等于当前版本则返回<code>0</code></para>
            <para>输入版本小于当前版本则返回<code>1</code></para>
            </summary>
            <param name="major">主版本号</param>
            <param name="minor">次版本号</param>
            <param name="revised">修订版本号</param>
            <returns>比较结果</returns>
        </member>
        <member name="M:GameBox.GBoxFramework.Compare(System.String)">
            <summary>
            比较GameBox版本(遵循semver)
            <para>输入版本大于当前版本则返回<code>-1</code></para>
            <para>输入版本等于当前版本则返回<code>0</code></para>
            <para>输入版本小于当前版本则返回<code>1</code></para>
            </summary>
            <param name="comparison">版本号</param>
            <returns>比较结果</returns>
        </member>
        <member name="M:GameBox.GBoxFramework.GuardConstruct(System.String)">
            <summary>
            验证构建状态
            </summary>
            <param name="method">函数名</param>
        </member>
        <member name="M:GameBox.GBoxFramework.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            启动迭代器
            </summary>
            <param name="coroutine">迭代程序</param>
        </member>
        <member name="M:GameBox.GBoxFramework.RegisterCoreAlias">
            <summary>
            注册核心别名
            </summary>
        </member>
        <member name="M:GameBox.GBoxFramework.RegisterCoreService">
            <summary>
            注册核心服务
            </summary>
        </member>
        <member name="M:GameBox.GBoxFramework.GetProviderBaseType(GameBox.IServiceProvider)">
            <summary>
            获取服务提供者基础类型
            </summary>
            <param name="provider">服务提供者</param>
            <returns>基础类型</returns>
        </member>
        <member name="T:GameBox.IBootstrap">
            <summary>
            引导程序接口
            </summary>
        </member>
        <member name="M:GameBox.IBootstrap.Bootstrap">
            <summary>
            引导程序接口
            </summary>
        </member>
        <member name="T:GameBox.ICoroutineInit">
            <summary>
            协同初始化
            </summary>
        </member>
        <member name="M:GameBox.ICoroutineInit.CoroutineInit">
            <summary>
            服务提供者初始化
            </summary>
        </member>
        <member name="T:GameBox.IGBox">
            <summary>
            GameBox Core
            </summary>
        </member>
        <member name="M:GameBox.IGBox.Register(GameBox.IServiceProvider)">
            <summary>
            注册服务提供者
            </summary>
            <param name="provider">服务提供者</param>
        </member>
        <member name="M:GameBox.IGBox.IsRegisted(GameBox.IServiceProvider)">
            <summary>
            服务提供者是否已经注册过
            </summary>
            <param name="provider">服务提供者</param>
            <returns>服务提供者是否已经注册过</returns>
        </member>
        <member name="M:GameBox.IGBox.GetRuntimeId">
            <summary>
            获取GameBox运行时的唯一Id
            </summary>
            <returns>运行时的唯一Id</returns>
        </member>
        <member name="P:GameBox.IGBox.IsMainThread">
            <summary>
            是否是主线程
            </summary>
        </member>
        <member name="M:GameBox.IGBox.GetPriority(System.Type,System.String)">
            <summary>
            获取优先级，如果存在方法优先级定义那么优先返回方法的优先级
            如果不存在优先级定义那么返回<c>int.MaxValue</c>
            </summary>
            <param name="type">获取优先级的类型</param>
            <param name="method">获取优先级的调用方法</param>
            <returns>优先级</returns>
        </member>
        <member name="P:GameBox.IGBox.DebugLevel">
            <summary>
            调试等级
            </summary>
        </member>
        <member name="M:GameBox.IGBox.Terminate">
            <summary>
            终止GameBox框架
            </summary>
        </member>
        <member name="T:GameBox.IServiceProvider">
            <summary>
            服务提供者
            </summary>
        </member>
        <member name="M:GameBox.IServiceProvider.Init">
            <summary>
            服务提供者初始化
            </summary>
        </member>
        <member name="M:GameBox.IServiceProvider.Register">
            <summary>
            当注册服务提供者
            </summary>
        </member>
        <member name="T:GameBox.IServiceProviderType">
            <summary>
            服务提供者类型
            </summary>
        </member>
        <member name="P:GameBox.IServiceProviderType.BaseType">
            <summary>
            提供者基础类型
            </summary>
        </member>
        <member name="T:GameBox.ServiceProvider">
            <summary>
            基础服务提供者
            </summary>
        </member>
        <member name="M:GameBox.ServiceProvider.Init">
            <summary>
            服务提供者初始化
            </summary>
        </member>
        <member name="M:GameBox.ServiceProvider.CoroutineInit">
            <summary>
            协同初始化
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:GameBox.ServiceProvider.Register">
            <summary>
            当注册服务提供者
            </summary>
        </member>
        <member name="T:GameBox.ExcludeFromCodeCoverageAttribute">
            <summary>
            标记的类，函数，属性不再进行覆盖率分析
            </summary>
        </member>
        <member name="T:GameBox.PriorityAttribute">
            <summary>
            执行优先级
            </summary>
        </member>
        <member name="P:GameBox.PriorityAttribute.Priorities">
            <summary>
            优先级
            </summary>
        </member>
        <member name="M:GameBox.PriorityAttribute.#ctor(System.Int32)">
            <summary>
            优先级(0最高)
            </summary>
            <param name="priority">优先级(0为最优先)</param>
        </member>
        <member name="T:GameBox.Bindable">
            <summary>
            可绑定对象
            </summary>
        </member>
        <member name="P:GameBox.Bindable.Service">
            <summary>
            当前绑定的名字
            </summary>
        </member>
        <member name="P:GameBox.Bindable.Container">
            <summary>
            所属服务容器
            </summary>
        </member>
        <member name="F:GameBox.Bindable.InternalContainer">
            <summary>
            父级容器
            </summary>
        </member>
        <member name="F:GameBox.Bindable.contextual">
            <summary>
            服务关系上下文
            当前服务需求某个服务时可以指定给与什么服务
            </summary>
        </member>
        <member name="F:GameBox.Bindable.contextualClosure">
            <summary>
            服务上下文闭包
            当前服务需求某个服务时给定的闭包
            </summary>
        </member>
        <member name="F:GameBox.Bindable.SyncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="F:GameBox.Bindable.isDestroy">
            <summary>
            是否被释放
            </summary>
        </member>
        <member name="M:GameBox.Bindable.#ctor(GameBox.Container,System.String)">
            <summary>
            构建一个绑定数据
            </summary>
            <param name="container">依赖注入容器</param>
            <param name="service">服务名</param>
        </member>
        <member name="M:GameBox.Bindable.Unbind">
            <summary>
            解除绑定
            </summary>
        </member>
        <member name="M:GameBox.Bindable.AddContextual(System.String,System.String)">
            <summary>
            为服务增加上下文
            </summary>
            <param name="needs">需求什么服务</param>
            <param name="given">给与什么服务</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.Bindable.AddContextual(System.String,System.Func{System.Object})">
            <summary>
            为服务增加上下文
            </summary>
            <param name="needs">需求什么服务</param>
            <param name="given">给与什么服务</param>
        </member>
        <member name="M:GameBox.Bindable.GetContextual(System.String)">
            <summary>
            获取上下文的需求关系
            </summary>
            <param name="needs">需求的服务</param>
            <returns>给与的服务</returns>
        </member>
        <member name="M:GameBox.Bindable.GetContextualClosure(System.String)">
            <summary>
            获取上下文关系闭包实现
            </summary>
            <param name="needs">需求的服务</param>
            <returns>给与的闭包</returns>
        </member>
        <member name="M:GameBox.Bindable.ReleaseBind">
            <summary>
            解除绑定
            </summary>
        </member>
        <member name="M:GameBox.Bindable.GuardIsDestroy">
            <summary>
            守卫是否被释放
            </summary>
        </member>
        <member name="T:GameBox.Bindable`1">
            <summary>
            可绑定对象
            </summary>
        </member>
        <member name="F:GameBox.Bindable`1.given">
            <summary>
            给与数据
            </summary>
        </member>
        <member name="M:GameBox.Bindable`1.#ctor(GameBox.Container,System.String)">
            <summary>
            构建一个绑定数据
            </summary>
            <param name="container">依赖注入容器</param>
            <param name="service">服务名</param>
        </member>
        <member name="M:GameBox.Bindable`1.Needs(System.String)">
            <summary>
            当需求某个服务                                                                                                                                                                                                                                                                                                                                                                                  
            </summary>
            <param name="service">服务名</param>
            <returns>绑定关系临时数据</returns>
        </member>
        <member name="M:GameBox.Bindable`1.Needs``1">
            <summary>
            当需求某个服务
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <returns>绑定关系临时数据</returns>
        </member>
        <member name="T:GameBox.BindData">
            <summary>
            服务绑定数据
            </summary>    
        </member>
        <member name="P:GameBox.BindData.Concrete">
            <summary>
            服务实现，执行这个委托将会获得服务实例
            </summary>
        </member>
        <member name="P:GameBox.BindData.IsStatic">
            <summary>
            当前绑定的服务是否是静态服务
            </summary>
        </member>
        <member name="F:GameBox.BindData.resolving">
            <summary>
            服务构造修饰器
            </summary>
        </member>
        <member name="F:GameBox.BindData.afterResolving">
            <summary>
            在服务构建修饰器之后的修饰器
            </summary>
        </member>
        <member name="F:GameBox.BindData.release">
            <summary>
            服务构造修饰器
            </summary>
        </member>
        <member name="M:GameBox.BindData.#ctor(GameBox.Container,System.String,System.Func{GameBox.IContainer,System.Object[],System.Object},System.Boolean)">
            <summary>
            构建一个绑定数据
            </summary>
            <param name="container">服务父级容器</param>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否是静态的</param>
        </member>
        <member name="M:GameBox.BindData.Alias(System.String)">
            <summary>
            为服务设定一个别名
            </summary>
            <param name="alias">别名</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.BindData.Tag(System.String)">
            <summary>
            为服务打上一个标签
            </summary>
            <param name="tag">标签名</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.BindData.OnResolving(System.Action{GameBox.IBindData,System.Object})">
            <summary>
            解决服务时触发的回调
            </summary>
            <param name="closure">解决事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.BindData.OnAfterResolving(System.Action{GameBox.IBindData,System.Object})">
            <summary>
            解决服务时事件之后的回调
            </summary>
            <param name="closure">解决事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.BindData.OnRelease(System.Action{GameBox.IBindData,System.Object})">
            <summary>
            当静态服务被释放时
            </summary>
            <param name="closure">处理事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.BindData.ReleaseBind">
            <summary>
            移除绑定服务 , 在解除绑定时如果是静态化物体将会触发释放
            </summary>
        </member>
        <member name="M:GameBox.BindData.TriggerResolving(System.Object)">
            <summary>
            执行服务修饰器
            </summary>
            <param name="instance">服务实例</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GameBox.BindData.TriggerAfterResolving(System.Object)">
            <summary>
            执行服务修饰器之后的回调
            </summary>
            <param name="instance">服务实例</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GameBox.BindData.TriggerRelease(System.Object)">
            <summary>
            执行服务释放处理器
            </summary>
            <param name="instance">服务实例</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GameBox.BindData.AddClosure(System.Action{GameBox.IBindData,System.Object},System.Collections.Generic.List{System.Action{GameBox.IBindData,System.Object}}@)">
            <summary>
            增加一个事件
            </summary>
            <param name="closure">闭包</param>
            <param name="list">事件列表</param>
        </member>
        <member name="T:GameBox.ExtendBindData">
            <summary>
             绑定数据拓展
             </summary>
        </member>
        <member name="M:GameBox.ExtendBindData.Alias``1(GameBox.IBindData)">
            <summary>
            为服务设定一个别名
            </summary>
            <typeparam name="TAlias">别名</typeparam>
            <param name="bindData">绑定数据</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendBindData.OnResolving(GameBox.IBindData,System.Action{System.Object})">
            <summary>
            解决服务时触发的回调
            </summary>
            <param name="bindData">绑定数据</param>
            <param name="action">解决事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendBindData.OnResolving``1(GameBox.IBindData,System.Action{``0})">
            <summary>
            解决服务时触发的回调
            </summary>
            <typeparam name="T">指定的类型</typeparam>
            <param name="bindData">绑定数据</param>
            <param name="closure">闭包</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendBindData.OnResolving``1(GameBox.IBindData,System.Action{GameBox.IBindData,``0})">
            <summary>
            解决服务时触发的回调
            </summary>
            <typeparam name="T">指定的类型</typeparam>
            <param name="bindData">绑定数据</param>
            <param name="closure">闭包</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendBindData.OnResolving(GameBox.IBindData,System.Action)">
            <summary>
            解决服务时触发的回调
            </summary>
            <param name="bindData">绑定数据</param>
            <param name="action">解决事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendBindData.OnAfterResolving(GameBox.IBindData,System.Action{System.Object})">
            <summary>
            解决服务事件之后的回调
            </summary>
            <param name="bindData">绑定数据</param>
            <param name="action">解决事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendBindData.OnAfterResolving``1(GameBox.IBindData,System.Action{``0})">
            <summary>
            解决服务事件之后的回调
            </summary>
            <param name="bindData">绑定数据</param>
            <param name="closure">解决事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendBindData.OnAfterResolving``1(GameBox.IBindData,System.Action{GameBox.IBindData,``0})">
            <summary>
            解决服务事件之后的回调
            </summary>
            <param name="bindData">绑定数据</param>
            <param name="closure">解决事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendBindData.OnAfterResolving(GameBox.IBindData,System.Action)">
            <summary>
            解决服务事件之后的回调
            </summary>
            <param name="bindData">绑定数据</param>
            <param name="action">解决事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendBindData.OnRelease(GameBox.IBindData,System.Action{System.Object})">
            <summary>
            当静态服务被释放时
            </summary>
            <param name="bindData">绑定数据</param>
            <param name="action">处理事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendBindData.OnRelease``1(GameBox.IBindData,System.Action{``0})">
            <summary>
            当静态服务被释放时
            </summary>
            <param name="bindData">绑定数据</param>
            <param name="closure">处理事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendBindData.OnRelease``1(GameBox.IBindData,System.Action{GameBox.IBindData,``0})">
            <summary>
            当静态服务被释放时
            </summary>
            <param name="bindData">绑定数据</param>
            <param name="closure">处理事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendBindData.OnRelease(GameBox.IBindData,System.Action)">
            <summary>
            当静态服务被释放时
            </summary>
            <param name="bindData">绑定数据</param>
            <param name="action">处理事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="T:GameBox.Container">
            <summary>
             依赖注入容器
             </summary>
        </member>
        <member name="F:GameBox.Container.binds">
            <summary>
            服务所绑定的相关数据，记录了服务的关系
            </summary>
        </member>
        <member name="F:GameBox.Container.instances">
            <summary>
             如果所属服务是静态的那么构建后将会储存在这里
            </summary>
        </member>
        <member name="F:GameBox.Container.instancesReverse">
            <summary>
            单例化对象的反查表
            </summary>
        </member>
        <member name="F:GameBox.Container.aliases">
            <summary>
             服务的别名(key: 别名 , value: 映射的服务名)
            </summary>
        </member>
        <member name="F:GameBox.Container.aliasesReverse">
            <summary>
            可以通过服务的真实名字来查找别名
            </summary>
        </member>
        <member name="F:GameBox.Container.tags">
            <summary>
            服务标记，一个标记允许标记多个服务
            </summary>
        </member>
        <member name="F:GameBox.Container.resolving">
            <summary>
            服务构建时的修饰器
            </summary>
        </member>
        <member name="F:GameBox.Container.afterResloving">
            <summary>
            在服务构建修饰器之后的修饰器
            </summary>
        </member>
        <member name="F:GameBox.Container.release">
            <summary>
            静态服务释放时的修饰器
            </summary>
        </member>
        <member name="F:GameBox.Container.extenders">
            <summary>
            全局服务扩展方法
            </summary>
        </member>
        <member name="F:GameBox.Container.findType">
            <summary>
            类型查询回调
            当类型无法被解决时会尝试去开发者提供的查询器中查询类型
            </summary>
        </member>
        <member name="F:GameBox.Container.findTypeCache">
            <summary>
            类型查询回调缓存
            </summary>
        </member>
        <member name="F:GameBox.Container.resolved">
            <summary>
            已经被解决过的服务名
            </summary>
        </member>
        <member name="F:GameBox.Container.instanceTiming">
            <summary>
            单例服务构建时序
            </summary>
        </member>
        <member name="F:GameBox.Container.rebound">
            <summary>
            重定义事件
            </summary>
        </member>
        <member name="F:GameBox.Container.methodContainer">
            <summary>
            方法容器
            </summary>
        </member>
        <member name="F:GameBox.Container.syncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="F:GameBox.Container.injectTarget">
            <summary>
            注入目标
            </summary>
        </member>
        <member name="P:GameBox.Container.BuildStack">
            <summary>
            编译堆栈
            </summary>
        </member>
        <member name="P:GameBox.Container.UserParamsStack">
            <summary>
            用户参数堆栈
            </summary>
        </member>
        <member name="F:GameBox.Container.flushing">
            <summary>
            是否在清空过程中
            </summary>
        </member>
        <member name="F:GameBox.Container.instanceId">
            <summary>
            单例化Id
            </summary>
        </member>
        <member name="F:GameBox.Container.ServiceBanChars">
            <summary>
            服务禁用字符
            </summary>
        </member>
        <member name="M:GameBox.Container.#ctor(System.Int32)">
            <summary>
            构造一个容器
            </summary>
            <param name="prime">初始预计服务数量</param>
        </member>
        <member name="M:GameBox.Container.Tag(System.String,System.String[])">
            <summary>
            为一个及以上的服务定义一个标记
            如果标记已经存在那么服务会被追加进列表
            </summary>
            <param name="tag">标记名</param>
            <param name="service">服务名或者别名</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="service"/>为<c>null</c>或者<paramref name="service"/>中的元素为<c>null</c>或者空字符串</exception>
        </member>
        <member name="M:GameBox.Container.Tagged(System.String)">
            <summary>
            根据标记名生成标记所对应的所有服务实例
            </summary>
            <param name="tag">标记名</param>
            <returns>将会返回标记所对应的所有服务实例</returns>
            <exception cref="T:GameBox.LogicException"><paramref name="tag"/>不存在</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tag"/>为<c>null</c>或者空字符串</exception>
        </member>
        <member name="M:GameBox.Container.GetBind(System.String)">
            <summary>
            获取服务的绑定数据,如果绑定不存在则返回null（只有进行过bind才视作绑定）
            </summary>
            <param name="service">服务名或别名</param>
            <returns>服务绑定数据或者null</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="service"/>为<c>null</c>或者空字符串</exception>
        </member>
        <member name="M:GameBox.Container.HasBind(System.String)">
            <summary>
            是否已经绑定了服务
            </summary>
            <param name="service">服务名或别名</param>
            <returns>服务是否被绑定</returns>
        </member>
        <member name="M:GameBox.Container.HasInstance(System.String)">
            <summary>
            是否已经实例静态化
            </summary>
            <param name="service">服务名或别名</param>
            <returns>是否已经静态化</returns>
        </member>
        <member name="M:GameBox.Container.IsResolved(System.String)">
            <summary>
            服务是否已经被解决过
            </summary>
            <param name="service">服务名或别名</param>
            <returns>是否已经被解决过</returns>
        </member>
        <member name="M:GameBox.Container.CanMake(System.String)">
            <summary>
            是否可以生成服务
            </summary>
            <param name="service">服务名或者别名</param>
            <returns>是否可以生成服务</returns>
        </member>
        <member name="M:GameBox.Container.IsStatic(System.String)">
            <summary>
            服务是否是静态化的,如果服务不存在也将返回false
            </summary>
            <param name="service">服务名或者别名</param>
            <returns>是否是静态化的</returns>
        </member>
        <member name="M:GameBox.Container.IsAlias(System.String)">
            <summary>
            是否是别名
            </summary>
            <param name="name">名字</param>
            <returns>是否是别名</returns>
        </member>
        <member name="M:GameBox.Container.Alias(System.String,System.String)">
            <summary>
            以全局的方式为服务设定一个别名
            </summary>
            <param name="alias">别名</param>
            <param name="service">映射到的服务名</param>
            <returns>当前容器对象</returns>
            <exception cref="T:GameBox.LogicException"><paramref name="alias"/>别名冲突或者<paramref name="service"/>的绑定与实例都不存在</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="alias"/>,<paramref name="service"/>为<c>null</c>或者空字符串</exception>
        </member>
        <member name="M:GameBox.Container.BindIf(System.String,System.Func{GameBox.IContainer,System.Object[],System.Object},System.Boolean,GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否是静态的</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.Container.BindIf(System.String,System.Type,System.Boolean,GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否是静态的</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.Container.Bind(System.String,System.Type,System.Boolean)">
            <summary>
            绑定一个服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否静态化</param>
            <returns>服务绑定数据</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="concrete"/>为<c>null</c>或者空字符串</exception>
        </member>
        <member name="M:GameBox.Container.Bind(System.String,System.Func{GameBox.IContainer,System.Object[],System.Object},System.Boolean)">
            <summary>
            绑定一个服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否静态化</param>
            <returns>服务绑定数据</returns>
            <exception cref="T:GameBox.LogicException"><paramref name="service"/>绑定冲突</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="concrete"/>为<c>null</c></exception>
        </member>
        <member name="M:GameBox.Container.BindMethod(System.String,System.Object,System.Reflection.MethodInfo)">
            <summary>
            绑定一个方法到容器
            </summary>
            <param name="method">方法名</param>
            <param name="target">调用目标</param>
            <param name="call">调用方法</param>
            <returns>方法绑定数据</returns>
        </member>
        <member name="M:GameBox.Container.UnbindMethod(System.Object)">
            <summary>
            解除绑定的方法
            </summary>
            <param name="target">
            解除目标
            <para>如果为字符串则作为调用方法名</para>
            <para>如果为<code>IMethodBind</code>则作为指定方法</para>
            <para>如果为其他对象则作为调用目标做全体解除</para>
            </param>
        </member>
        <member name="M:GameBox.Container.Invoke(System.String,System.Object[])">
            <summary>
            调用一个已经被绑定的方法
            </summary>
            <param name="method">方法名</param>
            <param name="userParams">用户提供的参数</param>
            <returns>调用结果</returns>
        </member>
        <member name="M:GameBox.Container.Call(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            以依赖注入形式调用一个方法
            </summary>
            <param name="target">方法对象</param>
            <param name="methodInfo">方法信息</param>
            <param name="userParams">用户传入的参数</param>
            <returns>方法返回值</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/>,<paramref name="methodInfo"/>为<c>null</c></exception>
        </member>
        <member name="M:GameBox.Container.Make(System.String,System.Object[])">
            <summary>
            构造服务
            </summary>
            <param name="service">服务名或别名</param>
            <param name="userParams">用户传入的构造参数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="service"/>为<c>null</c>或者空字符串</exception>
            <exception cref="T:GameBox.LogicException">出现循环依赖</exception>
            <returns>服务实例，如果构造失败那么返回null</returns>
        </member>
        <member name="P:GameBox.Container.Item(System.String)">
            <summary>
            构造服务
            </summary>
            <param name="service">服务名或者别名</param>
            <returns>服务实例，如果构造失败那么返回null</returns>
        </member>
        <member name="M:GameBox.Container.Extend(System.String,System.Func{System.Object,GameBox.IContainer,System.Object})">
            <summary>
            扩展容器中的服务
            <para>允许在服务构建的过程中配置或者替换服务</para>
            <para>如果服务已经被构建，拓展会立即生效。</para>
            </summary>
            <param name="service">服务名或别名,如果为null则意味着全局有效</param>
            <param name="closure">闭包</param>
        </member>
        <member name="M:GameBox.Container.ClearExtenders(System.String)">
            <summary>
            移除指定服务的全部扩展
            </summary>
            <param name="service">服务名或别名</param>
        </member>
        <member name="M:GameBox.Container.Instance(System.String,System.Object)">
            <summary>
            静态化一个服务,实例值会经过解决修饰器
            </summary>
            <param name="service">服务名或别名</param>
            <param name="instance">服务实例，<c>null</c>也是合法的实例值</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="service"/>为<c>null</c>或者空字符串</exception>
            <exception cref="T:GameBox.LogicException"><paramref name="service"/>的服务在绑定设置中不是静态的</exception>
            <returns>被修饰器处理后的新的实例</returns>
        </member>
        <member name="M:GameBox.Container.Release(System.Object)">
            <summary>
            释放静态化实例
            </summary>
            <param name="mixed">服务名或别名或单例化的对象</param>
            <returns>是否完成了释放</returns>
        </member>
        <member name="M:GameBox.Container.OnFindType(System.Func{System.String,System.Type},System.Int32)">
            <summary>
            当查找类型无法找到时会尝试去调用开发者提供的查找类型函数
            </summary>
            <param name="finder">查找类型的回调</param>
            <param name="priority">查询优先级(值越小越优先)</param>
            <returns>当前容器实例</returns>
        </member>
        <member name="M:GameBox.Container.OnRelease(System.Action{GameBox.IBindData,System.Object})">
            <summary>
            当静态服务被释放时
            </summary>
            <param name="closure">处理释放时的回调</param>
            <returns>当前容器实例</returns>
        </member>
        <member name="M:GameBox.Container.OnResolving(System.Action{GameBox.IBindData,System.Object})">
            <summary>
            当服务被解决时，生成的服务会经过注册的回调函数
            </summary>
            <param name="closure">回调函数</param>
            <returns>当前容器对象</returns>
        </member>
        <member name="M:GameBox.Container.OnAfterResolving(System.Action{GameBox.IBindData,System.Object})">
            <summary>
            解决服务时事件之后的回调
            </summary>
            <param name="closure">解决事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.Container.OnRebound(System.String,System.Action{System.Object})">
            <summary>
            关注指定的服务，当服务触发重定义时调用指定对象的指定方法
            <para>调用是以依赖注入的形式进行的</para>
            <para>服务的新建（第一次解决服务）操作并不会触发重定义</para>
            </summary>
            <param name="service">服务名</param>
            <param name="callback">回调</param>
            <returns>服务容器</returns>
        </member>
        <member name="M:GameBox.Container.Unbind(System.String)">
            <summary>
            解除绑定服务
            </summary>
            <param name="service">服务名或者别名</param>
        </member>
        <member name="M:GameBox.Container.Flush">
            <summary>
            清空容器的所有实例，绑定，别名，标签，解决器，方法容器, 扩展
            </summary>
        </member>
        <member name="M:GameBox.Container.Type2Service(System.Type)">
            <summary>
            将类型转为服务名
            </summary>
            <param name="type">类型</param>
            <returns>服务名</returns>
        </member>
        <member name="M:GameBox.Container.Unbind(GameBox.IBindable)">
            <summary>
            解除绑定服务
            </summary>
            <param name="bindable">绑定关系</param>
        </member>
        <member name="M:GameBox.Container.Flash(System.Action,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            在回调区间内暂时性的静态化服务实例
            </summary>
            <param name="callback">回调区间</param>
            <param name="services">服务映射</param>
        </member>
        <member name="M:GameBox.Container.IsBasicType(System.Type)">
            <summary>
            是否是依赖注入容器默认的基础类型
            </summary>
            <param name="type">基础类型</param>
            <returns>是否是基础类型</returns>
        </member>
        <member name="M:GameBox.Container.IsUnableType(System.Type)">
            <summary>
            是否是无法被构建的类型
            </summary>
            <param name="type">类型</param>
            <returns>是否可以被构建</returns>
        </member>
        <member name="M:GameBox.Container.WrapperTypeBuilder(System.String,System.Type)">
            <summary>
            包装一个类型，可以被用来生成服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">类型</param>
            <returns>根据类型生成的服务</returns>
        </member>
        <member name="M:GameBox.Container.GetDependenciesFromUserParams(System.Reflection.ParameterInfo,System.Object[]@)">
            <summary>
            从用户传入的参数中获取依赖
            </summary>
            <param name="baseParam">基础参数</param>
            <param name="userParams">用户传入参数</param>
            <returns>合适的注入参数</returns>
        </member>
        <member name="M:GameBox.Container.ChangeType(System.Object@,System.Type)">
            <summary>
            转换参数类型
            </summary>
            <param name="result">需要转换的参数</param>
            <param name="conversionType">转换到的类型</param>
            <returns>是否转换成功</returns>
        </member>
        <member name="M:GameBox.Container.GetPropertyNeedsService(System.Reflection.PropertyInfo)">
            <summary>
            获取字段需求服务
            </summary>
            <param name="property">字段</param>
            <returns>需求的服务名</returns>
        </member>
        <member name="M:GameBox.Container.GetParamNeedsService(System.Reflection.ParameterInfo)">
            <summary>
            获取参数需求服务
            </summary>
            <param name="baseParam">当前正在解决的变量</param>
            <returns>需求的服务名</returns>
        </member>
        <member name="M:GameBox.Container.GetContextualClosure(GameBox.Bindable,System.String,System.String)">
            <summary>
            根据上下文获取相关的构建闭包
            </summary>
            <param name="makeServiceBindData">请求注入操作的服务绑定数据</param>
            <param name="service">构建的服务名</param>
            <param name="paramName">目标参数的名字</param>
            <returns>构建闭包</returns>
        </member>
        <member name="M:GameBox.Container.GetContextualService(GameBox.Bindable,System.String,System.String)">
            <summary>
            根据上下文获取相关的需求服务
            </summary>
            <param name="makeServiceBindData">请求注入操作的服务绑定数据</param>
            <param name="service">构建的服务名</param>
            <param name="paramName">目标参数的名字</param>
            <returns>需求的服务名</returns>
        </member>
        <member name="M:GameBox.Container.MakeFromContextualClosure(System.Func{System.Object},System.Type,System.Object@)">
            <summary>
            从上下文闭包中进行构建获得实例
            </summary>
            <param name="closure">上下文闭包</param>
            <param name="needType">参数需求的类型</param>
            <param name="ouput">构建的实例</param>
            <returns>是否成功构建</returns>
        </member>
        <member name="M:GameBox.Container.MakeFromContextualService(System.String,System.Type,System.Object@)">
            <summary>
            从上下文关系的服务名获取服务实现
            </summary>
            <param name="service">上下文关系的服务名</param>
            <param name="needType">参数需求类型</param>
            <param name="output">构建的实例</param>
            <returns>是否成功构建</returns>
        </member>
        <member name="M:GameBox.Container.ResloveFromContextual(GameBox.Bindable,System.String,System.String,System.Type,System.Object@)">
            <summary>
            根据上下文来解决指定需求的服务
            </summary>
            <param name="makeServiceBindData">请求注入操作的服务绑定数据</param>
            <param name="service">构建的服务名字</param>
            <param name="paramName">目标参数的名字</param>
            <param name="paramType">目标参数的类型</param>
            <param name="output">构建的实例</param>
            <returns>是否成功通过上下文解决</returns>
        </member>
        <member name="M:GameBox.Container.ResolveAttrPrimitive(GameBox.Bindable,System.String,System.Reflection.PropertyInfo)">
            <summary>
            解决基本类型
            </summary>
            <param name="makeServiceBindData">请求注入操作的服务绑定数据</param>
            <param name="service">希望解决的服务名或者别名</param>
            <param name="baseParam">当前正在解决的变量</param>
            <returns>解决结果</returns>
        </member>
        <member name="M:GameBox.Container.ResloveAttrClass(GameBox.Bindable,System.String,System.Reflection.PropertyInfo)">
            <summary>
            解决类类型
            </summary>
            <param name="makeServiceBindData">请求注入操作的服务绑定数据</param>
            <param name="service">希望解决的服务名或者别名</param>
            <param name="baseParam">当前正在解决的变量</param>
            <returns>解决结果</returns>
        </member>
        <member name="M:GameBox.Container.ResolvePrimitive(GameBox.Bindable,System.String,System.Reflection.ParameterInfo)">
            <summary>
            解决基本类型
            </summary>
            <param name="makeServiceBindData">请求注入操作的服务绑定数据</param>
            <param name="service">希望解决的服务名或者别名</param>
            <param name="baseParam">当前正在解决的变量</param>
            <returns>解决结果</returns>
        </member>
        <member name="M:GameBox.Container.ResloveClass(GameBox.Bindable,System.String,System.Reflection.ParameterInfo)">
            <summary>
            解决类类型
            </summary>
            <param name="makeServiceBindData">请求注入操作的服务绑定数据</param>
            <param name="service">希望解决的服务名或者别名</param>
            <param name="baseParam">当前正在解决的变量</param>
            <returns>解决结果</returns>
        </member>
        <member name="M:GameBox.Container.GetVariableTag">
            <summary>
            获取变量标签
            </summary>
            <returns>变量标签</returns>
        </member>
        <member name="M:GameBox.Container.GetBuildStackDebugMessage">
            <summary>
            获取编译堆栈调试消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:GameBox.Container.MakeBuildFaildException(System.String,System.Type,System.Exception)">
            <summary>
            生成一个编译失败异常
            </summary>
            <param name="makeService">构造的服务名字</param>
            <param name="makeServiceType">构造的服务类型</param>
            <param name="innerException">内部异常</param>
            <returns>运行时异常</returns>
        </member>
        <member name="M:GameBox.Container.GetInnerExceptionMessage(System.Exception)">
            <summary>
            获取内部异常提示消息
            </summary>
            <param name="innerException">内部异常</param>
            <returns>提示消息内容</returns>
        </member>
        <member name="M:GameBox.Container.MakeUnresolvableException(System.String,System.Type)">
            <summary>
            生成一个未能解决基本类型的异常
            </summary>
            <param name="name">变量名</param>
            <param name="declaringClass">变量所属类</param>
            <returns>运行时异常</returns>
        </member>
        <member name="M:GameBox.Container.MakeCircularDependencyException(System.String)">
            <summary>
            生成一个出现循环依赖的异常
            </summary>
            <param name="service">当前服务名</param>
            <returns>运行时异常</returns>
        </member>
        <member name="M:GameBox.Container.FormatService(System.String)">
            <summary>
            格式化服务名
            </summary>
            <param name="service">服务名</param>
            <returns>格式化后的服务名</returns>
        </member>
        <member name="M:GameBox.Container.CanInject(System.Type,System.Object)">
            <summary>
            检查实例是否实现自某种类型
            </summary>
            <param name="type">需要实现自的类型</param>
            <param name="instance">生成的实例</param>
            <returns>是否符合类型</returns>
        </member>
        <member name="M:GameBox.Container.GuardUserParamsCount(System.Int32)">
            <summary>
            保证用户传入参数必须小于指定值
            </summary>
            <param name="count">传入参数数量</param>
        </member>
        <member name="M:GameBox.Container.GuardResolveInstance(System.Object,System.String)">
            <summary>
            守卫解决实例状态
            </summary>
            <param name="instance">服务实例</param>
            <param name="makeService">服务名</param>
        </member>
        <member name="M:GameBox.Container.SpeculatedServiceType(System.String)">
            <summary>
            根据服务名推测服务的类型
            </summary>
            <param name="service">服务名</param>
            <returns>服务类型</returns>
        </member>
        <member name="M:GameBox.Container.AttributeInject(GameBox.Bindable,System.Object)">
            <summary>
            属性注入
            </summary>
            <param name="makeServiceBindData">服务绑定数据</param>
            <param name="makeServiceInstance">服务实例</param>
            <returns>服务实例</returns>
            <exception cref="T:GameBox.LogicException">属性是必须的或者注入类型和需求类型不一致</exception>
        </member>
        <member name="M:GameBox.Container.CheckCompactInjectUserParams(System.Reflection.ParameterInfo,System.Object[])">
            <summary>
            检查是否可以紧缩注入用户传入的参数
            </summary>
            <param name="baseParam">服务实例的参数信息</param>
            <param name="userParams">输入的构造参数列表</param>
            <returns>是否可以紧缩注入</returns>
        </member>
        <member name="M:GameBox.Container.GetCompactInjectUserParams(System.Reflection.ParameterInfo,System.Object[]@)">
            <summary>
            获取通过紧缩注入的参数
            </summary>
            <param name="baseParam">服务实例的参数信息</param>
            <param name="userParams">输入的构造参数列表</param>
            <returns>紧缩注入的参数</returns>
        </member>
        <member name="M:GameBox.Container.GetParamsMatcher(System.Object[]@)">
            <summary>
            获取参数(<see cref="T:GameBox.IParams"/>)匹配器
            <para>开发者重写后可以实现自己的匹配器</para>
            <para>如果调用获取到的匹配器后返回结果为null则表示没有匹配到参数</para>
            </summary>
            <param name="userParams">用户传入的参数</param>
            <returns>匹配器，如果返回null则表示没有匹配器</returns>
        </member>
        <member name="M:GameBox.Container.GetDependencies(GameBox.Bindable,System.Reflection.ParameterInfo[],System.Object[])">
            <summary>
            获取依赖解决结果
            </summary>
            <param name="makeServiceBindData">服务绑定数据</param>
            <param name="baseParams">服务实例的参数信息</param>
            <param name="userParams">输入的构造参数列表</param>
            <returns>服务所需参数的解决结果</returns>
            <exception cref="T:GameBox.LogicException">生成的实例类型和需求类型不一致</exception>
        </member>
        <member name="M:GameBox.Container.GetConstructorsInjectParams(GameBox.Bindable,System.Type,System.Object[])">
            <summary>
            获取构造函数参数
            </summary>
            <param name="makeServiceBindData">服务绑定数据</param>
            <param name="makeServiceType">服务类型</param>
            <param name="userParams">用户传入的构造参数</param>
            <returns>构造函数参数</returns>
        </member>
        <member name="M:GameBox.Container.GetServiceWithInstanceObject(System.Object)">
            <summary>
            通过对象反向获取服务名
            </summary>
            <param name="instance">对象</param>
            <returns>服务名</returns>
        </member>
        <member name="M:GameBox.Container.GuardConstruct(System.String)">
            <summary>
            验证构建状态
            </summary>
            <param name="method">函数名</param>
        </member>
        <member name="M:GameBox.Container.GuardServiceName(System.String)">
            <summary>
            验证服务名有效性
            </summary>
            <param name="service">服务名</param>
        </member>
        <member name="M:GameBox.Container.GuardMethodName(System.String)">
            <summary>
            验证函数名有效性
            </summary>
            <param name="method">函数名</param>
        </member>
        <member name="M:GameBox.Container.GuardFlushing">
            <summary>
            验证重置状态
            </summary>
        </member>
        <member name="M:GameBox.Container.AliasToService(System.String)">
            <summary>
            获取别名最终对应的服务名
            </summary>
            <param name="service">服务名或别名</param>
            <returns>最终映射的服务名</returns>
        </member>
        <member name="M:GameBox.Container.TriggerOnResolving(GameBox.BindData,System.Object)">
            <summary>
            触发全局解决修饰器
            </summary>
            <param name="bindData">服务绑定数据</param>
            <param name="instance">服务实例</param>
            <returns>被修饰器修饰后的服务实例</returns>
        </member>
        <member name="M:GameBox.Container.TriggerOnAfterResolving(GameBox.BindData,System.Object)">
            <summary>
            触发全局解决修饰器之后的修饰器回调
            </summary>
            <param name="bindData">服务绑定数据</param>
            <param name="instance">服务实例</param>
            <returns>被修饰器修饰后的服务实例</returns>
        </member>
        <member name="M:GameBox.Container.TriggerOnRelease(GameBox.IBindData,System.Object)">
            <summary>
            触发全局释放修饰器
            </summary>
            <param name="bindData">服务绑定数据</param>
            <param name="instance">服务实例</param>
            <returns>被修饰器修饰后的服务实例</returns>
        </member>
        <member name="M:GameBox.Container.Trigger(GameBox.IBindData,System.Object,System.Collections.Generic.List{System.Action{GameBox.IBindData,System.Object}})">
            <summary>
            触发指定的事件列表
            </summary>
            <param name="bindData">服务绑定数据</param>
            <param name="instance">服务实例</param>
            <param name="list">事件列表</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GameBox.Container.TriggerOnRebound(System.String,System.Object)">
            <summary>
            触发服务重定义事件
            </summary>
            <param name="service">发生重定义的服务</param>
            <param name="instance">服务实例（如果为空将会从容器请求）</param>
        </member>
        <member name="M:GameBox.Container.DisposeInstance(System.Object)">
            <summary>
            释放实例
            </summary>
            <param name="obj">实例</param>
        </member>
        <member name="M:GameBox.Container.Pair(System.Type,System.Object)">
            <summary>
            类型配实例配偶
            </summary>
            <param name="type">类型</param>
            <param name="instance">实例</param>
            <returns>键值对</returns>
        </member>
        <member name="M:GameBox.Container.GetOnReboundCallbacks(System.String)">
            <summary>
            获取重定义的服务所对应的回调
            </summary>
            <param name="service">服务名</param>
            <returns>回调列表</returns>
        </member>
        <member name="M:GameBox.Container.HasOnReboundCallbacks(System.String)">
            <summary>
            是否拥有重定义的服务所对应的回调
            </summary>
            <param name="service">服务名</param>
            <returns>是否存在回调</returns>
        </member>
        <member name="M:GameBox.Container.MakeEmptyBindData(System.String)">
            <summary>
            制作一个空的绑定数据
            </summary>
            <param name="service">服务名</param>
            <returns>空绑定数据</returns>
        </member>
        <member name="M:GameBox.Container.Resolve(System.String,System.Object[])">
            <summary>
            解决服务
            </summary>
            <param name="service">服务名或别名</param>
            <param name="userParams">用户传入的构造参数</param>
            <returns>服务实例，如果构造失败那么返回null</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="service"/>为<c>null</c>或者空字符串</exception>
            <exception cref="T:GameBox.LogicException">出现循环依赖</exception>
            <exception cref="T:GameBox.UnresolvableException">无法解决服务</exception>
            <returns>服务实例</returns>
        </member>
        <member name="M:GameBox.Container.Extend(System.String,System.Object)">
            <summary>
            为服务进行扩展
            </summary>
            <param name="service">服务名</param>
            <param name="instance">服务实例</param>
            <returns>扩展后的服务</returns>
        </member>
        <member name="M:GameBox.Container.Inject(GameBox.Bindable,System.Object)">
            <summary>
            为对象进行依赖注入
            </summary>
            <param name="bindData">绑定数据</param>
            <param name="instance">对象实例</param>
            <returns>注入完成的对象</returns>
        </member>
        <member name="M:GameBox.Container.Build(GameBox.BindData,System.Object[])">
            <summary>
            编译服务
            </summary>
            <param name="makeServiceBindData">服务绑定数据</param>
            <param name="userParams">用户传入的构造参数</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GameBox.Container.CreateInstance(GameBox.Bindable,System.Type,System.Object[])">
            <summary>
            构造服务实现（准备需要注入的参数）
            </summary>
            <param name="makeServiceBindData">服务绑定数据</param>
            <param name="makeServiceType">服务类型</param>
            <param name="userParams">用户传入的构造参数</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GameBox.Container.CreateInstance(System.Type,System.Object[])">
            <summary>
            通过指定的类型构建服务实现
            </summary>
            <param name="makeServiceType">指定的服务类型</param>
            <param name="userParams">用户自定义参数</param>
            <returns>构建的服务实现</returns>
        </member>
        <member name="M:GameBox.Container.GetBindFillable(System.String)">
            <summary>
            获取服务绑定数据,如果数据为null则填充数据
            </summary>
            <param name="service">服务名</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.Container.GetParamsTypeInUserParams(System.Object[]@)">
            <summary>
            从<paramref name="userParams"/>中获取<see cref="T:GameBox.IParams"/>类型的变量
            </summary>
            <param name="userParams">用户传入参数</param>
            <returns>获取到的参数</returns>
        </member>
        <member name="M:GameBox.Container.MakeParamsMatcher(GameBox.IParams[])">
            <summary>
            生成一个默认的参数<see cref="T:GameBox.IParams" />匹配器
            </summary>
            <param name="tables">参数表</param>
            <returns>匹配器</returns>
        </member>
        <member name="M:GameBox.Container.AddClosure(System.Action{GameBox.IBindData,System.Object},System.Collections.Generic.List{System.Action{GameBox.IBindData,System.Object}})">
            <summary>
            增加一个闭包到指定的列表
            </summary>
            <param name="closure">闭包</param>
            <param name="list">指定的列表</param>
        </member>
        <member name="T:GameBox.ExtendContainer">
            <summary>
             容器拓展
             </summary>
        </member>
        <member name="M:GameBox.ExtendContainer.GetBind``1(GameBox.IContainer)">
            <summary>
            获取服务的绑定数据,如果绑定不存在则返回null
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <returns>服务绑定数据或者null</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.HasBind``1(GameBox.IContainer)">
            <summary>
            是否已经绑定了服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <returns>代表服务是否被绑定</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.HasInstance``1(GameBox.IContainer)">
            <summary>
            是否已经实例静态化
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <returns>是否已经静态化</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.IsResolved``1(GameBox.IContainer)">
            <summary>
            服务是否已经被解决过
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <returns>是否已经被解决过</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.CanMake``1(GameBox.IContainer)">
            <summary>
            是否可以生成服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <returns>服务是否可以被构建</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.IsStatic``1(GameBox.IContainer)">
            <summary>
            服务是否是静态化的,如果服务不存在也将返回false
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <returns>服务是否是静态化的</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.IsAlias``1(GameBox.IContainer)">
            <summary>
            是否是别名
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <returns>是否是别名</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.Alias``2(GameBox.IContainer)">
            <summary>
            为服务设定一个别名
            </summary>
            <typeparam name="TAlias">别名</typeparam>
            <typeparam name="TService">服务名</typeparam>
        </member>
        <member name="M:GameBox.ExtendContainer.Bind``1(GameBox.IContainer)">
            <summary>
            常规绑定一个服务
            </summary>
            <typeparam name="TService">服务名，同时也是服务实现</typeparam>
            <param name="container">服务容器</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.Bind``2(GameBox.IContainer)">
            <summary>
            常规绑定一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <typeparam name="TConcrete">服务实现</typeparam>
            <param name="container">服务容器</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.Bind``1(GameBox.IContainer,System.Func{GameBox.IContainer,System.Object[],System.Object})">
            <summary>
            常规绑定一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <param name="concrete">服务实现</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.Bind``1(GameBox.IContainer,System.Func{System.Object[],System.Object})">
            <summary>
            常规绑定一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <param name="concrete">服务实现</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.Bind``1(GameBox.IContainer,System.Func{System.Object})">
            <summary>
            常规绑定一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <param name="concrete">服务实现</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.Bind(GameBox.IContainer,System.String,System.Func{GameBox.IContainer,System.Object[],System.Object})">
            <summary>
            常规绑定一个服务
            </summary>
            <param name="container">服务容器</param>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.BindIf``2(GameBox.IContainer,GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <typeparam name="TConcrete">服务实现</typeparam>
            <param name="container">服务容器</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.BindIf``1(GameBox.IContainer,GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <typeparam name="TService">服务名，同时也是服务实现</typeparam>
            <param name="container">服务容器</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.BindIf``1(GameBox.IContainer,System.Func{GameBox.IContainer,System.Object[],System.Object},GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <param name="concrete">服务实现</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.BindIf``1(GameBox.IContainer,System.Func{System.Object[],System.Object},GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <param name="concrete">服务实现</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.BindIf``1(GameBox.IContainer,System.Func{System.Object},GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <param name="concrete">服务实现</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.BindIf(GameBox.IContainer,System.String,System.Func{GameBox.IContainer,System.Object[],System.Object},GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <param name="container">服务容器</param>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.Singleton(GameBox.IContainer,System.String,System.Func{GameBox.IContainer,System.Object[],System.Object})">
            <summary>
            以单例的形式绑定一个服务
            </summary>
            <param name="container">服务容器</param>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.Singleton``2(GameBox.IContainer)">
            <summary>
            以单例的形式绑定一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <typeparam name="TConcrete">服务实现</typeparam>
            <param name="container">服务容器</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.Singleton``1(GameBox.IContainer)">
            <summary>
            以单例的形式绑定一个服务
            </summary>
            <typeparam name="TService">服务名，同时也是服务实现</typeparam>
            <param name="container">服务容器</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.Singleton``1(GameBox.IContainer,System.Func{GameBox.IContainer,System.Object[],System.Object})">
            <summary>
            以单例的形式绑定一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <param name="concrete">服务实现</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.Singleton``1(GameBox.IContainer,System.Func{System.Object[],System.Object})">
            <summary>
            以单例的形式绑定一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <param name="concrete">服务实现</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.Singleton``1(GameBox.IContainer,System.Func{System.Object})">
            <summary>
            以单例的形式绑定一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <param name="concrete">服务实现</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.SingletonIf``2(GameBox.IContainer,GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <typeparam name="TConcrete">服务实现</typeparam>
            <param name="container">服务容器</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.SingletonIf``1(GameBox.IContainer,GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <typeparam name="TService">服务名，同时也是服务实现</typeparam>
            <param name="container">服务容器</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.SingletonIf``1(GameBox.IContainer,System.Func{GameBox.IContainer,System.Object[],System.Object},GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <param name="concrete">服务实现</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.SingletonIf``1(GameBox.IContainer,System.Func{System.Object[],System.Object},GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <param name="concrete">服务实现</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.SingletonIf``1(GameBox.IContainer,System.Func{System.Object},GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <param name="concrete">服务实现</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.SingletonIf(GameBox.IContainer,System.String,System.Func{GameBox.IContainer,System.Object[],System.Object},GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <param name="container">服务容器</param>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否完成绑定</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.BindMethod(GameBox.IContainer,System.String,System.Object,System.String)">
            <summary>
            绑定一个方法到容器
            </summary>
            <param name="container">服务容器</param>
            <param name="method">方法名</param>
            <param name="target">调用目标</param>
            <param name="call">调用方法</param>
        </member>
        <member name="M:GameBox.ExtendContainer.BindMethod(GameBox.IContainer,System.String,System.Func{System.Object})">
            <summary>
            绑定一个方法到容器
            </summary>
            <param name="container">服务容器</param>
            <param name="method">方法名</param>
            <param name="callback">调用方法</param>
        </member>
        <member name="M:GameBox.ExtendContainer.BindMethod``1(GameBox.IContainer,System.String,System.Func{``0,System.Object})">
            <summary>
            绑定一个方法到容器
            </summary>
            <param name="container">服务容器</param>
            <param name="method">方法名</param>
            <param name="callback">调用方法</param>
        </member>
        <member name="M:GameBox.ExtendContainer.BindMethod``2(GameBox.IContainer,System.String,System.Func{``0,``1,System.Object})">
            <summary>
            绑定一个方法到容器
            </summary>
            <param name="container">服务容器</param>
            <param name="method">方法名</param>
            <param name="callback">调用方法</param>
        </member>
        <member name="M:GameBox.ExtendContainer.BindMethod``3(GameBox.IContainer,System.String,System.Func{``0,``1,``2,System.Object})">
            <summary>
            绑定一个方法到容器
            </summary>
            <param name="container">服务容器</param>
            <param name="method">方法名</param>
            <param name="callback">调用方法</param>
        </member>
        <member name="M:GameBox.ExtendContainer.BindMethod``4(GameBox.IContainer,System.String,System.Func{``0,``1,``2,``3,System.Object})">
            <summary>
            绑定一个方法到容器
            </summary>
            <param name="container">服务容器</param>
            <param name="method">方法名</param>
            <param name="callback">调用方法</param>
        </member>
        <member name="M:GameBox.ExtendContainer.Unbind``1(GameBox.IContainer)">
            <summary>
            解除服务绑定
            </summary>
            <typeparam name="TService">解除绑定的服务</typeparam>
            <param name="container">服务容器</param>
        </member>
        <member name="M:GameBox.ExtendContainer.Tag``1(GameBox.IContainer,System.String)">
            <summary>
            为一个服务定义一个标记
            </summary>
            <typeparam name="TService">服务</typeparam>
            <param name="container">服务容器</param>
            <param name="tag">标记名</param>
        </member>
        <member name="M:GameBox.ExtendContainer.Instance``1(GameBox.IContainer,System.Object)">
            <summary>
            静态化一个服务,实例值会经过解决修饰器
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <param name="instance">实例值</param>
        </member>
        <member name="M:GameBox.ExtendContainer.Release``1(GameBox.IContainer)">
            <summary>
            释放服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
        </member>
        <member name="M:GameBox.ExtendContainer.Release(GameBox.IContainer,System.Object[]@,System.Boolean)">
            <summary>
            根据实例对象释放静态化实例
            </summary>
            <param name="container">服务容器</param>
            <param name="instances">需要释放静态化实例对象</param>
            <param name="reverse">以相反的顺序开始释放</param>
            <returns>只要有一个没有释放成功那么返回false, <paramref name="instances"/>为没有释放掉的实例</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.Call``1(GameBox.IContainer,System.Action{``0},System.Object[])">
            <summary>
            以依赖注入的形式调用一个方法
            </summary>
            <param name="container">服务容器</param>
            <param name="method">方法</param>
            <param name="userParams">用户参数</param>
        </member>
        <member name="M:GameBox.ExtendContainer.Call``2(GameBox.IContainer,System.Action{``0,``1},System.Object[])">
            <summary>
            以依赖注入的形式调用一个方法
            </summary>
            <param name="container">服务容器</param>
            <param name="method">方法</param>
            <param name="userParams">用户参数</param>
        </member>
        <member name="M:GameBox.ExtendContainer.Call``3(GameBox.IContainer,System.Action{``0,``1,``2},System.Object[])">
            <summary>
            以依赖注入的形式调用一个方法
            </summary>
            <param name="container">服务容器</param>
            <param name="method">方法</param>
            <param name="userParams">用户参数</param>
        </member>
        <member name="M:GameBox.ExtendContainer.Call``4(GameBox.IContainer,System.Action{``0,``1,``2,``3},System.Object[])">
            <summary>
            以依赖注入的形式调用一个方法
            </summary>
            <param name="container">服务容器</param>
            <param name="method">方法</param>
            <param name="userParams">用户参数</param>
        </member>
        <member name="M:GameBox.ExtendContainer.Call(GameBox.IContainer,System.Object,System.String,System.Object[])">
            <summary>
            以依赖注入形式调用一个方法
            </summary>
            <param name="container">服务容器</param>
            <param name="target">方法对象</param>
            <param name="method">方法名</param>
            <param name="userParams">用户传入的参数</param>
            <returns>方法返回值</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/>,<paramref name="method"/>为<c>null</c>或者空字符串</exception>
        </member>
        <member name="M:GameBox.ExtendContainer.Wrap``1(GameBox.IContainer,System.Action{``0},System.Object[])">
            <summary>
            包装一个依赖注入形式调用的一个方法
            </summary>
            <param name="container">服务容器</param>
            <param name="method">方法</param>
            <param name="userParams">用户传入的参数</param>
            <returns>包装方法</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.Wrap``2(GameBox.IContainer,System.Action{``0,``1},System.Object[])">
            <summary>
            包装一个依赖注入形式调用的一个方法
            </summary>
            <param name="container">服务容器</param>
            <param name="method">方法</param>
            <param name="userParams">用户传入的参数</param>
            <returns>包装方法</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.Wrap``3(GameBox.IContainer,System.Action{``0,``1,``2},System.Object[])">
            <summary>
            包装一个依赖注入形式调用的一个方法
            </summary>
            <param name="container">服务容器</param>
            <param name="method">方法</param>
            <param name="userParams">用户传入的参数</param>
            <returns>包装方法</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.Wrap``4(GameBox.IContainer,System.Action{``0,``1,``2,``3},System.Object[])">
            <summary>
            包装一个依赖注入形式调用的一个方法
            </summary>
            <param name="container">服务容器</param>
            <param name="method">方法</param>
            <param name="userParams">用户传入的参数</param>
            <returns>包装方法</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.Make``1(GameBox.IContainer,System.Object[])">
            <summary>
            构造一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <param name="userParams">用户提供的参数</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.Make(GameBox.IContainer,System.Type,System.Object[])">
            <summary>
            构造一个服务
            </summary>
            <param name="container">服务容器</param>
            <param name="type">服务类型</param>
            <param name="userParams">用户提供的参数</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.Factory``1(GameBox.IContainer,System.Object[])">
            <summary>
            获取一个回调，当执行回调可以生成指定的服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <param name="userParams">用户传入的参数</param>
            <returns>回调方案</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.Extend(GameBox.IContainer,System.String,System.Func{System.Object,System.Object})">
            <summary>
            扩展容器中的服务
            <para>允许在服务构建的过程中配置或者替换服务</para>
            <para>如果服务已经被构建，拓展会立即生效。</para>
            </summary>
            <param name="container">服务容器</param>
            <param name="service">服务名</param>
            <param name="closure">闭包</param>
        </member>
        <member name="M:GameBox.ExtendContainer.Extend``2(GameBox.IContainer,System.Func{``1,System.Object})">
            <summary>
            扩展容器中的服务
            <para>允许在服务构建的过程中配置或者替换服务</para>
            <para>如果服务已经被构建，拓展会立即生效。</para>
            </summary>
            <param name="container">服务容器</param>
            <param name="closure">闭包</param>
        </member>
        <member name="M:GameBox.ExtendContainer.Extend``2(GameBox.IContainer,System.Func{``1,GameBox.IContainer,System.Object})">
            <summary>
            扩展容器中的服务
            <para>允许在服务构建的过程中配置或者替换服务</para>
            <para>如果服务已经被构建，拓展会立即生效。</para>
            </summary>
            <param name="container">服务容器</param>
            <param name="closure">闭包</param>
        </member>
        <member name="M:GameBox.ExtendContainer.Extend``1(GameBox.IContainer,System.Func{``0,GameBox.IContainer,System.Object})">
            <summary>
            扩展容器中的服务
            <para>允许在服务构建的过程中配置或者替换服务</para>
            <para>如果服务已经被构建，拓展会立即生效。</para>
            </summary>
            <typeparam name="TConcrete">实现的类型或接口</typeparam>
            <param name="container">服务容器</param>
            <param name="closure">闭包</param>
        </member>
        <member name="M:GameBox.ExtendContainer.Extend``1(GameBox.IContainer,System.Func{``0,System.Object})">
            <summary>
            扩展容器中的服务
            <para>允许在服务构建的过程中配置或者替换服务</para>
            <para>如果服务已经被构建，拓展会立即生效。</para>
            </summary>
            <typeparam name="TConcrete">实现的类型或接口</typeparam>
            <param name="container">服务容器</param>
            <param name="closure">闭包</param>
        </member>
        <member name="M:GameBox.ExtendContainer.OnRelease(GameBox.IContainer,System.Action{System.Object})">
            <summary>
            当静态服务被释放时
            </summary>
            <param name="container">服务容器</param>
            <param name="callback">处理释放时的回调</param>
            <returns>当前容器实例</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.OnRelease``1(GameBox.IContainer,System.Action{``0})">
            <summary>
            当静态服务被释放时
            </summary>
            <param name="container">服务容器</param>
            <param name="closure">处理释放时的回调</param>
            <returns>当前容器实例</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.OnRelease``1(GameBox.IContainer,System.Action{GameBox.IBindData,``0})">
            <summary>
            当静态服务被释放时
            </summary>
            <param name="container">服务容器</param>
            <param name="closure">处理释放时的回调</param>
            <returns>当前容器实例</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.OnResolving(GameBox.IContainer,System.Action{System.Object})">
            <summary>
            当服务被解决时，生成的服务会经过注册的回调函数
            </summary>
            <param name="container">服务容器</param>
            <param name="callback">回调函数</param>
            <returns>当前容器对象</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.OnResolving``1(GameBox.IContainer,System.Action{``0})">
            <summary>
            当服务被解决时，生成的服务会经过注册的回调函数
            <para>只有类型和给定的类型相匹配才会被回调</para>
            </summary>
            <typeparam name="T">指定的类型</typeparam>
            <param name="container">服务容器</param>
            <param name="closure">闭包</param>
            <returns>当前容器对象</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.OnResolving``1(GameBox.IContainer,System.Action{GameBox.IBindData,``0})">
            <summary>
            当服务被解决时，生成的服务会经过注册的回调函数
            <para>只有类型和给定的类型相匹配才会被回调</para>
            </summary>
            <typeparam name="T">指定的类型</typeparam>
            <param name="container">服务容器</param>
            <param name="closure">闭包</param>
            <returns>当前容器对象</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.OnAfterResolving(GameBox.IContainer,System.Action{System.Object})">
            <summary>
            当服务被解决事件之后的回调
            </summary>
            <param name="container">服务容器</param>
            <param name="callback">回调函数</param>
            <returns>当前容器对象</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.OnAfterResolving``1(GameBox.IContainer,System.Action{``0})">
            <summary>
            当服务被解决事件之后的回调
            <para>只有类型和给定的类型相匹配才会被回调</para>
            </summary>
            <typeparam name="T">指定的类型</typeparam>
            <param name="container">服务容器</param>
            <param name="closure">闭包</param>
            <returns>当前容器对象</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.OnAfterResolving``1(GameBox.IContainer,System.Action{GameBox.IBindData,``0})">
            <summary>
            当服务被解决事件之后的回调
            <para>只有类型和给定的类型相匹配才会被回调</para>
            </summary>
            <typeparam name="T">指定的类型</typeparam>
            <param name="container">服务容器</param>
            <param name="closure">闭包</param>
            <returns>当前容器对象</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.Watch``1(GameBox.IContainer,System.Action)">
            <summary>
            关注指定的服务，当服务触发重定义时调用指定对象的指定方法
            <param>调用是以依赖注入的形式进行的</param>
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <param name="method">回调</param>
        </member>
        <member name="M:GameBox.ExtendContainer.Watch``1(GameBox.IContainer,System.Action{``0})">
            <summary>
            关注指定的服务，当服务触发重定义时调用指定对象的指定方法
            <param>调用是以依赖注入的形式进行的</param>
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <param name="method">回调</param>
        </member>
        <member name="M:GameBox.ExtendContainer.Flash(GameBox.IContainer,System.Action,System.String,System.Object)">
            <summary>
            在回调区间内暂时性的静态化服务实例
            </summary>
            <param name="container">服务容器</param>
            <param name="callback">回调区间</param>
            <param name="service">服务名</param>
            <param name="instance">实例名</param>
        </member>
        <member name="M:GameBox.ExtendContainer.Type2Service``1(GameBox.IContainer)">
            <summary>
            类型转为服务名
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <param name="container">服务容器</param>
            <returns>服务名</returns>
        </member>
        <member name="M:GameBox.ExtendContainer.Factory(GameBox.IContainer,System.String,System.Object[])">
            <summary>
            获取一个回调，当执行回调可以生成指定的服务
            </summary>
            <param name="container">服务容器</param>
            <param name="service">服务名或别名</param>
            <param name="userParams">用户传入的参数</param>
            <returns>回调方案</returns>
        </member>
        <member name="T:GameBox.GivenData`1">
            <summary>
            绑定关系临时数据,用于支持链式调用
            </summary>
        </member>
        <member name="F:GameBox.GivenData`1.bindable">
            <summary>
            绑定数据
            </summary>
        </member>
        <member name="F:GameBox.GivenData`1.container">
            <summary>
            父级容器
            </summary>
        </member>
        <member name="F:GameBox.GivenData`1.needs">
            <summary>
            需求什么服务
            </summary>
        </member>
        <member name="M:GameBox.GivenData`1.#ctor(GameBox.Container,GameBox.Bindable{`0})">
            <summary>
            绑定关系临时数据
            </summary>
            <param name="container">依赖注入容器</param>
            <param name="bindable">可绑定数据</param>
        </member>
        <member name="M:GameBox.GivenData`1.Needs(System.String)">
            <summary>
            需求什么服务
            </summary>
            <param name="needs">需求什么服务</param>
            <returns>绑定关系实例</returns>
        </member>
        <member name="M:GameBox.GivenData`1.Given(System.String)">
            <summary>
            给与什么服务
            </summary>
            <param name="service">给与的服务名或别名</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.GivenData`1.Given``1">
            <summary>
            给与什么服务
            </summary>
            <typeparam name="TService">给与的服务名或别名</typeparam>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.GivenData`1.Given(System.Func{System.Object})">
            <summary>
            给与什么服务
            </summary>
            <param name="closure">给与的服务生成闭包</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="T:GameBox.IBindable">
            <summary>
            被绑定对象
            </summary>
        </member>
        <member name="P:GameBox.IBindable.Service">
            <summary>
            当前绑定的名字
            </summary>
        </member>
        <member name="P:GameBox.IBindable.Container">
            <summary>
            所属服务容器
            </summary>
        </member>
        <member name="M:GameBox.IBindable.Unbind">
            <summary>
            移除绑定
            <para>如果进行的是服务绑定 , 那么在解除绑定时如果是静态化物体将会触发释放</para>
            </summary>
        </member>
        <member name="T:GameBox.IBindable`1">
            <summary>
            被绑定对象
            </summary>
        </member>
        <member name="M:GameBox.IBindable`1.Needs(System.String)">
            <summary>
            当需求某个服务                                                                                                                                                                                                                                                                                                                                                                                  
            </summary>
            <param name="service">服务名</param>
            <returns>绑定关系临时数据</returns>
        </member>
        <member name="M:GameBox.IBindable`1.Needs``1">
            <summary>
            当需求某个服务
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <returns>绑定关系临时数据</returns>
        </member>
        <member name="T:GameBox.IBindData">
            <summary>
            服务绑定数据
            </summary>
        </member>
        <member name="P:GameBox.IBindData.Concrete">
            <summary>
            服务实现
            </summary>
        </member>
        <member name="P:GameBox.IBindData.IsStatic">
            <summary>
            是否是静态服务
            </summary>
        </member>
        <member name="M:GameBox.IBindData.Alias(System.String)">
            <summary>
            为服务设定一个别名
            </summary>
            <param name="alias">别名</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.IBindData.Tag(System.String)">
            <summary>
            为服务打上一个标签
            </summary>
            <param name="tag">标签名</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.IBindData.OnResolving(System.Action{GameBox.IBindData,System.Object})">
            <summary>
            解决服务时触发的回调
            </summary>
            <param name="closure">解决事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.IBindData.OnAfterResolving(System.Action{GameBox.IBindData,System.Object})">
            <summary>
            解决服务时事件之后的回调
            </summary>
            <param name="closure">解决事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.IBindData.OnRelease(System.Action{GameBox.IBindData,System.Object})">
            <summary>
            当服务被释放时
            </summary>
            <param name="closure">处理事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="T:GameBox.IContainer">
            <summary>
            依赖注入容器
            </summary>
        </member>
        <member name="M:GameBox.IContainer.GetBind(System.String)">
            <summary>
            获取服务的绑定数据,如果绑定不存在则返回null
            </summary>
            <param name="service">服务名或者别名</param>
            <returns>服务绑定数据或者null</returns>
        </member>
        <member name="M:GameBox.IContainer.HasBind(System.String)">
            <summary>
            是否已经绑定了服务
            </summary>
            <param name="service">服务名或者别名</param>
            <returns>返回一个bool值代表服务是否被绑定</returns>
        </member>
        <member name="M:GameBox.IContainer.HasInstance(System.String)">
            <summary>
            是否已经实例静态化
            </summary>
            <param name="service">服务名或别名</param>
            <returns>是否已经静态化</returns>
        </member>
        <member name="M:GameBox.IContainer.IsResolved(System.String)">
            <summary>
            服务是否已经被解决过
            </summary>
            <param name="service">服务名或别名</param>
            <returns>是否已经被解决过</returns>
        </member>
        <member name="M:GameBox.IContainer.CanMake(System.String)">
            <summary>
            是否可以生成服务
            </summary>
            <param name="service">服务名或者别名</param>
            <returns>是否可以生成服务</returns>
        </member>
        <member name="M:GameBox.IContainer.IsStatic(System.String)">
            <summary>
            服务是否是静态化的,如果服务不存在也将返回false
            </summary>
            <param name="service">服务名或者别名</param>
            <returns>是否是静态化的</returns>
        </member>
        <member name="M:GameBox.IContainer.IsAlias(System.String)">
            <summary>
            是否是别名
            </summary>
            <param name="name">名字</param>
            <returns>是否是别名</returns>
        </member>
        <member name="M:GameBox.IContainer.Bind(System.String,System.Type,System.Boolean)">
            <summary>
            绑定一个服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否静态化</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.IContainer.Bind(System.String,System.Func{GameBox.IContainer,System.Object[],System.Object},System.Boolean)">
            <summary>
            绑定一个服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实体</param>
            <param name="isStatic">服务是否静态化</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.IContainer.BindIf(System.String,System.Func{GameBox.IContainer,System.Object[],System.Object},System.Boolean,GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否是静态的</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否成功绑定</returns>
        </member>
        <member name="M:GameBox.IContainer.BindIf(System.String,System.Type,System.Boolean,GameBox.IBindData@)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否是静态的</param>
            <param name="bindData">如果绑定失败则返回历史绑定对象</param>
            <returns>是否成功绑定</returns>
        </member>
        <member name="M:GameBox.IContainer.BindMethod(System.String,System.Object,System.Reflection.MethodInfo)">
            <summary>
            绑定一个方法到容器
            </summary>
            <param name="method">方法名</param>
            <param name="target">调用目标</param>
            <param name="call">调用方法</param>
            <returns>方法绑定数据</returns>
        </member>
        <member name="M:GameBox.IContainer.UnbindMethod(System.Object)">
            <summary>
            解除绑定的方法
            </summary>
            <param name="target">
            解除目标
            <para>如果为字符串则作为调用方法名</para>
            <para>如果为<code>IMethodBind</code>则作为指定方法</para>
            <para>如果为其他对象则作为调用目标做全体解除</para>
            </param>
        </member>
        <member name="M:GameBox.IContainer.Unbind(System.String)">
            <summary>
            解除绑定服务
            </summary>
            <param name="service">服务名或者别名</param>
        </member>
        <member name="M:GameBox.IContainer.Tag(System.String,System.String[])">
            <summary>
            为一个及以上的服务定义一个标记
            </summary>
            <param name="tag">标记名</param>
            <param name="service">服务名</param>
        </member>
        <member name="M:GameBox.IContainer.Tagged(System.String)">
            <summary>
            根据标记名生成标记所对应的所有服务实例
            </summary>
            <param name="tag">标记名</param>
            <returns>将会返回标记所对应的所有服务实例</returns>
        </member>
        <member name="M:GameBox.IContainer.Instance(System.String,System.Object)">
            <summary>
            静态化一个服务
            </summary>
            <param name="service">服务名或者别名</param>
            <param name="instance">服务实例</param>
            <returns>被修饰器处理后的新的实例</returns>
        </member>
        <member name="M:GameBox.IContainer.Release(System.Object)">
            <summary>
            释放某个单例化的对象
            </summary>
            <param name="mixed">服务名或别名或单例对象</param>
        </member>
        <member name="M:GameBox.IContainer.Flush">
            <summary>
            清空容器的所有实例，绑定，别名，标签，解决器，方法容器, 扩展
            </summary>
        </member>
        <member name="M:GameBox.IContainer.Invoke(System.String,System.Object[])">
            <summary>
            调用一个已经被绑定的方法
            </summary>
            <param name="method">方法名</param>
            <param name="userParams">用户提供的参数</param>
            <returns>调用结果</returns>
        </member>
        <member name="M:GameBox.IContainer.Call(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            以依赖注入形式调用一个方法
            </summary>
            <param name="instance">方法对象</param>
            <param name="methodInfo">方法信息</param>
            <param name="userParams">用户传入的参数</param>
            <returns>方法返回值</returns>
        </member>
        <member name="M:GameBox.IContainer.Make(System.String,System.Object[])">
            <summary>
            构造服务
            </summary>
            <param name="service">服务名或别名</param>
            <param name="userParams">用户传入的参数</param>
            <returns>服务实例，如果构造失败那么返回null</returns>
        </member>
        <member name="P:GameBox.IContainer.Item(System.String)">
            <summary>
            构造服务
            </summary>
            <param name="service">服务名或者别名</param>
            <returns>服务实例，如果构造失败那么返回null</returns>
        </member>
        <member name="M:GameBox.IContainer.Alias(System.String,System.String)">
            <summary>
            为服务设定一个别名
            </summary>
            <param name="alias">别名</param>
            <param name="service">映射到的服务名</param>
            <returns>当前容器对象</returns>
        </member>
        <member name="M:GameBox.IContainer.Extend(System.String,System.Func{System.Object,GameBox.IContainer,System.Object})">
            <summary>
            扩展容器中的服务
            <para>允许在服务构建的过程中配置或者替换服务</para>
            <para>如果服务已经被构建，拓展会立即生效。</para>
            </summary>
            <param name="service">服务名或别名,如果为null则意味着全局有效</param>
            <param name="closure">闭包</param>
        </member>
        <member name="M:GameBox.IContainer.OnResolving(System.Action{GameBox.IBindData,System.Object})">
            <summary>
            当服务被解决时触发的事件
            </summary>
            <param name="closure">回调函数</param>
            <returns>当前容器实例</returns>
        </member>
        <member name="M:GameBox.IContainer.OnAfterResolving(System.Action{GameBox.IBindData,System.Object})">
            <summary>
            解决服务时事件之后的回调
            </summary>
            <param name="closure">解决事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.IContainer.OnRelease(System.Action{GameBox.IBindData,System.Object})">
            <summary>
            当静态服务被释放时
            </summary>
            <param name="closure">处理释放时的回调</param>
        </member>
        <member name="M:GameBox.IContainer.OnFindType(System.Func{System.String,System.Type},System.Int32)">
            <summary>
            当查找类型无法找到时会尝试去调用开发者提供的查找类型函数
            </summary>
            <param name="func">查找类型的回调</param>
            <param name="priority">查询优先级(值越小越优先)</param>
            <returns>当前容器实例</returns>
        </member>
        <member name="M:GameBox.IContainer.OnRebound(System.String,System.Action{System.Object})">
            <summary>
            关注指定的服务，当服务触发重定义时调用指定对象的指定方法
            <para>调用是以依赖注入的形式进行的</para>
            <para>服务的新建（第一次解决服务）操作并不会触发重定义</para>
            </summary>
            <param name="service">服务名</param>
            <param name="callback">回调</param>
            <returns>服务容器</returns>
        </member>
        <member name="M:GameBox.IContainer.Flash(System.Action,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            在回调区间内暂时性的静态化服务实例
            </summary>
            <param name="callback">回调区间</param>
            <param name="services">服务映射</param>
        </member>
        <member name="M:GameBox.IContainer.Type2Service(System.Type)">
            <summary>
            类型转为服务名
            </summary>
            <param name="type">类型</param>
            <returns>转换后的服务名</returns>
        </member>
        <member name="T:GameBox.IGivenData`1">
            <summary>
            绑定关系临时数据,用于支持链式调用
            </summary>
            <typeparam name="TReturn">返回类型</typeparam>
        </member>
        <member name="M:GameBox.IGivenData`1.Given(System.String)">
            <summary>
            给与什么服务
            </summary>
            <param name="service">给与的服务名或别名</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.IGivenData`1.Given``1">
            <summary>
            给与什么服务
            </summary>
            <typeparam name="TService">给与的服务名或别名</typeparam>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:GameBox.IGivenData`1.Given(System.Func{System.Object})">
            <summary>
            给与什么服务
            </summary>
            <param name="closure">给定的服务</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="T:GameBox.IMethodBind">
            <summary>
            方法绑定数据
            </summary>
        </member>
        <member name="T:GameBox.InjectAttribute">
            <summary>
            注入标记
            </summary>
        </member>
        <member name="T:GameBox.IParams">
            <summary>
            参数名注入表
            </summary>
        </member>
        <member name="M:GameBox.IParams.TryGetValue(System.String,System.Object@)">
            <summary>
            获取一个参数
            </summary>
            <param name="key">参数名</param>
            <param name="value">参数值</param>
            <returns>是否成功获取</returns>
        </member>
        <member name="T:GameBox.IVariant">
            <summary>
            可转变的
            <para>实现该接口的类，允许依赖注入容器将用户传入的基本类型(包含string)转变为目标类</para>
            </summary>
        </member>
        <member name="T:GameBox.MethodBind">
            <summary>
            方法绑定数据
            </summary>
        </member>
        <member name="P:GameBox.MethodBind.MethodInfo">
            <summary>
            方法信息
            </summary>
        </member>
        <member name="P:GameBox.MethodBind.Target">
            <summary>
            调用目标
            </summary>
        </member>
        <member name="P:GameBox.MethodBind.ParameterInfos">
            <summary>
            参数表
            </summary>
        </member>
        <member name="F:GameBox.MethodBind.methodContainer">
            <summary>
            方法容器
            </summary>
        </member>
        <member name="M:GameBox.MethodBind.#ctor(GameBox.MethodContainer,GameBox.Container,System.String,System.Object,System.Reflection.MethodInfo)">
            <summary>
            构建一个绑定数据
            </summary>
            <param name="methodContainer">方法容器</param>
            <param name="container">依赖注入容器</param>
            <param name="service">服务名</param>
            <param name="target">调用目标</param>
            <param name="call">调用方法</param>
        </member>
        <member name="M:GameBox.MethodBind.ReleaseBind">
            <summary>
            解除绑定
            </summary>
        </member>
        <member name="T:GameBox.MethodContainer">
            <summary>
            方法容器
            </summary>
        </member>
        <member name="F:GameBox.MethodContainer.targetToMethodsMappings">
            <summary>
            调用方法目标 映射到 方法名字
            </summary>
        </member>
        <member name="F:GameBox.MethodContainer.methodMappings">
            <summary>
            绑定数据
            </summary>
        </member>
        <member name="F:GameBox.MethodContainer.container">
            <summary>
            依赖注入容器
            </summary>
        </member>
        <member name="F:GameBox.MethodContainer.dependenciesResolved">
            <summary>
            依赖解决器
            </summary>
        </member>
        <member name="F:GameBox.MethodContainer.syncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="M:GameBox.MethodContainer.#ctor(GameBox.Container,System.Func{GameBox.Bindable,System.Reflection.ParameterInfo[],System.Object[],System.Object[]})">
            <summary>
            构建一个新的方法容器
            </summary>
            <param name="container"></param>
            <param name="dependenciesResolved">依赖解决器</param>
        </member>
        <member name="M:GameBox.MethodContainer.Bind(System.String,System.Object,System.Reflection.MethodInfo)">
            <summary>
            绑定一个方法
            </summary>
            <param name="method">通过这个名字可以调用方法</param>
            <param name="target">方法调用目标</param>
            <param name="methodInfo">在方法调用目标中被调用的方法</param>
            <returns></returns>
        </member>
        <member name="M:GameBox.MethodContainer.Invoke(System.String,System.Object[])">
            <summary>
            调用方法
            </summary>
            <param name="method">方法名</param>
            <param name="userParams">用户传入的参数</param>
            <returns>方法调用结果</returns>
        </member>
        <member name="M:GameBox.MethodContainer.Unbind(System.Object)">
            <summary>
            解除绑定
            </summary>
            <param name="target">
            解除目标
            <para>如果为字符串则作为调用方法名</para>
            <para>如果为<code>IMethodBind</code>则作为指定方法</para>
            <para>如果为其他对象则作为调用目标做全体解除</para>
            </param>
        </member>
        <member name="M:GameBox.MethodContainer.Unbind(GameBox.MethodBind)">
            <summary>
            解除绑定
            </summary>
            <param name="methodBind">方法绑定</param>
        </member>
        <member name="M:GameBox.MethodContainer.UnbindWithObject(System.Object)">
            <summary>
            根据对象绑定移除为该对象绑定的所有方法
            </summary>
            <param name="target">对象信息</param>
        </member>
        <member name="M:GameBox.MethodContainer.Flush">
            <summary>
            清空容器的所有实例，绑定，别名，标签，解决器
            </summary>
        </member>
        <member name="M:GameBox.MethodContainer.MakeMethodNotFoundException(System.String)">
            <summary>
            生成一个方法没有找到异常
            </summary>
            <param name="method"></param>
        </member>
        <member name="T:GameBox.Params">
            <summary>
            参数名注入表
            </summary>
        </member>
        <member name="F:GameBox.Params.table">
            <summary>
            参数表
            </summary>
        </member>
        <member name="M:GameBox.Params.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:GameBox.Params.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:GameBox.Params.#ctor">
            <summary>
            参数名注入表
            </summary>
        </member>
        <member name="M:GameBox.Params.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            参数名注入表
            </summary>
            <param name="args">参数表</param>
        </member>
        <member name="P:GameBox.Params.Item(System.String)">
            <summary>
            获取或者设定一个参数
            </summary>
            <param name="key">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:GameBox.Params.Add(System.String,System.Object)">
            <summary>
            增加一个参数
            </summary>
            <param name="key">参数名</param>
            <param name="value">参数值</param>
        </member>
        <member name="M:GameBox.Params.Remove(System.String)">
            <summary>
            移除参数
            </summary>
            <param name="key">参数名</param>
            <returns></returns>
        </member>
        <member name="M:GameBox.Params.TryGetValue(System.String,System.Object@)">
            <summary>
            获取一个参数
            </summary>
            <param name="key">参数名</param>
            <param name="value">参数值</param>
            <returns>是否成功获取</returns>
        </member>
        <member name="T:GameBox.UnresolvableException">
            <summary>
            未能解决异常
            </summary>
        </member>
        <member name="M:GameBox.UnresolvableException.#ctor">
            <summary>
            未能解决异常
            </summary>
        </member>
        <member name="M:GameBox.UnresolvableException.#ctor(System.String)">
            <summary>
            未能解决异常
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:GameBox.UnresolvableException.#ctor(System.String,System.Exception)">
            <summary>
            未能解决异常
            </summary>
            <param name="message">异常消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:GameBox.Dispatcher">
            <summary>
            事件调度器
            </summary>
        </member>
        <member name="F:GameBox.Dispatcher.groupMapping">
            <summary>
            分组映射
            </summary>
        </member>
        <member name="F:GameBox.Dispatcher.listeners">
            <summary>
            普通事件列表
            </summary>
        </member>
        <member name="F:GameBox.Dispatcher.wildcardListeners">
            <summary>
            通配符事件列表
            </summary>
        </member>
        <member name="F:GameBox.Dispatcher.syncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="P:GameBox.Dispatcher.BreakFlag">
            <summary>
            跳出标记
            </summary>
        </member>
        <member name="M:GameBox.Dispatcher.#ctor">
            <summary>
            构建一个事件调度器
            </summary>
        </member>
        <member name="M:GameBox.Dispatcher.HasListeners(System.String,System.Boolean)">
            <summary>
            判断给定事件是否存在事件监听器
            </summary>
            <param name="eventName">事件名</param>
            <param name="strict">
            严格模式
            <para>启用严格模式则不使用正则来进行匹配事件监听器</para>
            </param>
            <returns>是否存在事件监听器</returns>
        </member>
        <member name="M:GameBox.Dispatcher.Trigger(System.String,System.Object[])">
            <summary>
            触发一个事件,并获取事件监听器的返回结果
            </summary>
            <param name="eventName">事件名称</param>
            <param name="payloads">载荷</param>
            <returns>事件结果</returns>
        </member>
        <member name="M:GameBox.Dispatcher.TriggerHalt(System.String,System.Object[])">
            <summary>
            触发一个事件,并获取事件监听器的返回结果
            </summary>
            <param name="eventName">事件名称</param>
            <param name="payloads">载荷</param>
            <returns>事件结果</returns>
        </member>
        <member name="M:GameBox.Dispatcher.On(System.String,System.Func{System.String,System.Object[],System.Object},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="execution">执行方法</param>
            <param name="group">事件分组，如果为<code>Null</code>则不进行分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.Dispatcher.Off(System.Object)">
            <summary>
            解除注册的事件监听器
            </summary>
            <param name="target">
            事件解除目标
            <para>如果传入的是字符串(<code>string</code>)将会解除对应事件名的所有事件</para>
            <para>如果传入的是事件对象(<code>IEvent</code>)那么解除对应事件</para>
            <para>如果传入的是分组(<code>object</code>)会解除该分组下的所有事件</para>
            </param>
        </member>
        <member name="M:GameBox.Dispatcher.MakeEvent(System.String,System.Func{System.String,System.Object[],System.Object},System.Object,System.Boolean)">
            <summary>
            生成事件
            </summary>
            <param name="eventName">事件名</param>
            <param name="execution">事件执行方法</param>
            <param name="group">事件分组</param>
            <param name="isWildcard">是否是通配符事件</param>
        </member>
        <member name="M:GameBox.Dispatcher.MakeListener(System.Func{System.String,System.Object[],System.Object},System.Boolean)">
            <summary>
            创建事件监听器
            </summary>
            <param name="execution">事件执行器</param>
            <param name="isWildcard">是否是通配符方法</param>
            <returns>事件监听器</returns>
        </member>
        <member name="M:GameBox.Dispatcher.FormatEventName(System.String)">
            <summary>
            格式化事件名
            </summary>
            <param name="eventName">事件名</param>
            <returns>格式化后的事件名</returns>
        </member>
        <member name="M:GameBox.Dispatcher.IsWildcard(System.String)">
            <summary>
            是否是通配符事件
            </summary>
            <param name="eventName">事件名</param>
            <returns>是否是通配符事件</returns>
        </member>
        <member name="M:GameBox.Dispatcher.Dispatch(System.Boolean,System.String,System.Object[])">
            <summary>
            调度事件
            </summary>
            <param name="halt">遇到第一个事件存在处理结果后终止</param>
            <param name="eventName">事件名</param>
            <param name="payload">载荷</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:GameBox.Dispatcher.GetListeners(System.String)">
            <summary>
            获取指定事件的事件列表
            </summary>
            <param name="eventName">事件名</param>
            <returns>事件列表</returns>
        </member>
        <member name="M:GameBox.Dispatcher.DismissEventName(System.String)">
            <summary>
            根据普通事件解除相关事件
            </summary>
            <param name="eventName">事件名</param>
        </member>
        <member name="M:GameBox.Dispatcher.DismissWildcardEventName(System.String)">
            <summary>
            根据通配符事件解除相关事件
            </summary>
            <param name="eventName">事件名</param>
        </member>
        <member name="M:GameBox.Dispatcher.DismissTargetObject(System.Object)">
            <summary>
            根据Object解除事件
            </summary>
            <param name="target">事件解除目标</param>
        </member>
        <member name="M:GameBox.Dispatcher.Forget(GameBox.IEvent)">
            <summary>
            从事件调度器中移除指定的事件监听器
            </summary>
            <param name="target">事件监听器</param>
        </member>
        <member name="M:GameBox.Dispatcher.ForgetListen(GameBox.IEvent)">
            <summary>
            销毁普通事件
            </summary>
            <param name="target">事件对象</param>
        </member>
        <member name="M:GameBox.Dispatcher.ForgetWildcardListen(GameBox.IEvent)">
            <summary>
            销毁通配符事件
            </summary>
            <param name="target">事件对象</param>
        </member>
        <member name="M:GameBox.Dispatcher.SetupListen(System.String,System.Func{System.String,System.Object[],System.Object},System.Object)">
            <summary>
            设定普通事件
            </summary>
            <param name="eventName">事件名</param>
            <param name="execution">事件调用方法</param>
            <param name="group">事件分组</param>
            <returns>监听事件</returns>
        </member>
        <member name="M:GameBox.Dispatcher.SetupWildcardListen(System.String,System.Func{System.String,System.Object[],System.Object},System.Object)">
            <summary>
            设定通配符事件
            </summary>
            <param name="eventName">事件名</param>
            <param name="execution">事件调用方法</param>
            <param name="group">事件分组</param>
            <returns>监听事件</returns>
        </member>
        <member name="T:GameBox.Event">
            <summary>
            事件对象
            </summary>
        </member>
        <member name="P:GameBox.Event.Name">
            <summary>
            原始事件名
            </summary>
        </member>
        <member name="P:GameBox.Event.Group">
            <summary>
            事件根源对象
            </summary>
        </member>
        <member name="F:GameBox.Event.execution">
            <summary>
            依赖解决器
            </summary>
        </member>
        <member name="M:GameBox.Event.#ctor(System.String,System.Object,System.Func{System.String,System.Object[],System.Object})">
            <summary>
            创建一个事件对象
            </summary>
            <param name="eventName">事件名</param>
            <param name="group">事件分组</param>
            <param name="execution">事件执行器</param>
        </member>
        <member name="M:GameBox.Event.Call(System.String,System.Object[])">
            <summary>
            调用事件处理函数
            </summary>
            <param name="eventName">调用事件的完整名字</param>
            <param name="payloads">事件载荷</param>
            <returns>事件处理结果</returns>
        </member>
        <member name="T:GameBox.IDispatcher">
            <summary>
            事件调度器
            </summary>
        </member>
        <member name="M:GameBox.IDispatcher.HasListeners(System.String,System.Boolean)">
            <summary>
            判断给定事件是否存在事件监听器
            </summary>
            <param name="eventName">事件名</param>
            <param name="strict">
            严格模式
            <para>启用严格模式则不使用正则来进行匹配事件监听器</para>
            </param>
            <returns>是否存在事件监听器</returns>
        </member>
        <member name="M:GameBox.IDispatcher.Trigger(System.String,System.Object[])">
            <summary>
            触发一个事件,并获取事件监听器的返回结果
            </summary>
            <param name="eventName">事件名称</param>
            <param name="payloads">载荷</param>
            <returns>事件结果</returns>
        </member>
        <member name="M:GameBox.IDispatcher.TriggerHalt(System.String,System.Object[])">
            <summary>
            触发一个事件,遇到第一个事件存在处理结果后终止,并获取事件监听器的返回结果
            </summary>
            <param name="eventName">事件名</param>
            <param name="payloads">载荷</param>
            <returns>事件结果</returns>
        </member>
        <member name="M:GameBox.IDispatcher.On(System.String,System.Func{System.String,System.Object[],System.Object},System.Object)">
            <summary>
            注册一个事件监听器
            </summary>
            <param name="eventName">事件名称</param>
            <param name="execution">事件调用方法</param>
            <param name="group">事件分组，为<code>Null</code>则不进行分组</param>
            <returns>事件对象</returns>
        </member>
        <member name="M:GameBox.IDispatcher.Off(System.Object)">
            <summary>
            解除注册的事件监听器
            </summary>
            <param name="target">
            事件解除目标
            <para>如果传入的是字符串(<code>string</code>)将会解除对应事件名的所有事件</para>
            <para>如果传入的是事件对象(<code>IEvent</code>)那么解除对应事件</para>
            <para>如果传入的是分组(<code>object</code>)会解除该分组下的所有事件</para>
            </param>
        </member>
        <member name="T:GameBox.IEvent">
            <summary>
            事件对象
            </summary>
        </member>
        <member name="P:GameBox.IEvent.Name">
            <summary>
            原始事件名
            </summary>
        </member>
        <member name="P:GameBox.IEvent.Group">
            <summary>
            事件分组
            </summary>
        </member>
        <member name="M:GameBox.IEvent.Call(System.String,System.Object[])">
            <summary>
            调用事件
            </summary>
            <param name="eventName">完整的事件名</param>
            <param name="payloads">载荷</param>
            <returns>事件结果</returns>
        </member>
        <member name="T:GameBox.AssertException">
            <summary>
            断言异常
            </summary>
        </member>
        <member name="M:GameBox.AssertException.#ctor">
            <summary>
            断言异常
            </summary>
        </member>
        <member name="M:GameBox.AssertException.#ctor(System.String)">
            <summary>
            断言异常
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:GameBox.AssertException.#ctor(System.String,System.Exception)">
            <summary>
            断言异常
            </summary>
            <param name="message">异常消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:GameBox.CodeStandardException">
            <summary>
            代码规范异常，引发本异常一般由于不正确的使用框架
            </summary>
        </member>
        <member name="M:GameBox.CodeStandardException.#ctor">
            <summary>
            代码规范异常
            </summary>
        </member>
        <member name="M:GameBox.CodeStandardException.#ctor(System.String)">
            <summary>
            代码规范异常
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:GameBox.CodeStandardException.#ctor(System.String,System.Exception)">
            <summary>
            代码规范异常
            </summary>
            <param name="message">异常消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:GameBox.GameBoxException">
            <summary>
            GameBox运行时异常
            </summary>
        </member>
        <member name="M:GameBox.GameBoxException.#ctor">
            <summary>
            GameBox异常
            </summary>
        </member>
        <member name="M:GameBox.GameBoxException.#ctor(System.String)">
            <summary>
            GameBox异常
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:GameBox.GameBoxException.#ctor(System.String,System.Exception)">
            <summary>
            GameBox异常
            </summary>
            <param name="message">异常消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:GameBox.LogicException">
            <summary>
            代码逻辑异常
            </summary>
        </member>
        <member name="M:GameBox.LogicException.#ctor">
            <summary>
            代码逻辑异常
            </summary>
        </member>
        <member name="M:GameBox.LogicException.#ctor(System.String)">
            <summary>
            代码逻辑异常
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:GameBox.LogicException.#ctor(System.String,System.Exception)">
            <summary>
            代码逻辑异常
            </summary>
            <param name="message">异常消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:GameBox.RuntimeException">
            <summary>
            运行时异常
            </summary>
        </member>
        <member name="M:GameBox.RuntimeException.#ctor">
            <summary>
            运行时异常
            </summary>
        </member>
        <member name="M:GameBox.RuntimeException.#ctor(System.String)">
            <summary>
            运行时异常
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:GameBox.RuntimeException.#ctor(System.String,System.Exception)">
            <summary>
            运行时异常
            </summary>
            <param name="message">异常消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:GameBox.FilterChain`1">
            <summary>
            过滤器链
            </summary>
            <typeparam name="TIn">输入参数</typeparam>
        </member>
        <member name="F:GameBox.FilterChain`1.filterList">
            <summary>
            过滤器链
            </summary>
        </member>
        <member name="P:GameBox.FilterChain`1.FilterList">
            <summary>
            过滤器列表
            </summary>
        </member>
        <member name="F:GameBox.FilterChain`1.stack">
            <summary>
            堆栈 用于解决内部递归调用过滤器链所出现的问题
            </summary>
        </member>
        <member name="M:GameBox.FilterChain`1.#ctor">
            <summary>
            构建一个过滤器链
            </summary>
        </member>
        <member name="M:GameBox.FilterChain`1.Add(System.Action{`0,System.Action{`0}},System.Int32)">
            <summary>
            增加一个过滤器
            </summary>
            <param name="filter">过滤器</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>过滤器链</returns>
        </member>
        <member name="M:GameBox.FilterChain`1.Do(`0,System.Action{`0})">
            <summary>
            执行过滤器链
            </summary>
            <param name="inData">输入数据</param>
            <param name="then">当过滤器执行完成后执行的操作</param>
        </member>
        <member name="M:GameBox.FilterChain`1.Next(System.Action{`0})">
            <summary>
            下一层过滤器链
            </summary>
            <param name="then">当过滤器执行完成后执行的操作</param>
            <returns>执行过滤器</returns>
        </member>
        <member name="T:GameBox.FilterChain`2">
            <summary>
            过滤器链
            </summary>
            <typeparam name="TIn">输入参数</typeparam>
            <typeparam name="TOut">输出参数</typeparam>
        </member>
        <member name="F:GameBox.FilterChain`2.filterList">
            <summary>
            过滤器链
            </summary>
        </member>
        <member name="P:GameBox.FilterChain`2.FilterList">
            <summary>
            过滤器列表
            </summary>
        </member>
        <member name="F:GameBox.FilterChain`2.stack">
            <summary>
            堆栈 用于解决内部递归调用过滤器链所出现的问题
            </summary>
        </member>
        <member name="M:GameBox.FilterChain`2.#ctor">
            <summary>
            构建一个过滤器链
            </summary>
        </member>
        <member name="M:GameBox.FilterChain`2.Add(System.Action{`0,`1,System.Action{`0,`1}},System.Int32)">
            <summary>
            增加一个过滤器
            </summary>
            <param name="filter">过滤器</param>
            <param name="priority">优先级</param>
            <returns>过滤器链</returns>
        </member>
        <member name="M:GameBox.FilterChain`2.Do(`0,`1,System.Action{`0,`1})">
            <summary>
            执行过滤器链
            </summary>
            <param name="inData">输入参数</param>
            <param name="outData">输出参数</param>
            <param name="then">当过滤器执行完成后执行的操作</param>
        </member>
        <member name="M:GameBox.FilterChain`2.Next(System.Action{`0,`1})">
            <summary>
            下一层过滤器链
            </summary>
            <param name="then">当过滤器执行完成后执行的操作</param>
            <returns>执行过滤器</returns>
        </member>
        <member name="T:GameBox.FilterChain`3">
            <summary>
            过滤器链
            </summary>
            <typeparam name="TIn">输入参数</typeparam>
            <typeparam name="TOut">输出参数</typeparam>
            <typeparam name="TException">输入异常</typeparam>
        </member>
        <member name="F:GameBox.FilterChain`3.filterList">
            <summary>
            过滤器链
            </summary>
        </member>
        <member name="P:GameBox.FilterChain`3.FilterList">
            <summary>
            过滤器列表
            </summary>
        </member>
        <member name="F:GameBox.FilterChain`3.stack">
            <summary>
            堆栈 用于解决内部递归调用过滤器链所出现的问题
            </summary>
        </member>
        <member name="M:GameBox.FilterChain`3.#ctor">
            <summary>
            构建一个过滤器链
            </summary>
        </member>
        <member name="M:GameBox.FilterChain`3.Add(System.Action{`0,`1,`2,System.Action{`0,`1,`2}},System.Int32)">
            <summary>
            增加一个过滤器
            </summary>
            <param name="filter">过滤器</param>
            <param name="priority">优先级</param>
            <returns>过滤器链</returns>
        </member>
        <member name="M:GameBox.FilterChain`3.Do(`0,`1,`2,System.Action{`0,`1,`2})">
            <summary>
            执行过滤器链
            </summary>
            <param name="inData">输入参数</param>
            <param name="outData">输出参数</param>
            <param name="exception">输入异常</param>
            <param name="then">当过滤器执行完成后执行的操作</param>
        </member>
        <member name="M:GameBox.FilterChain`3.Next(System.Action{`0,`1,`2})">
            <summary>
            下一层过滤器链
            </summary>
            <param name="then">当过滤器执行完成后执行的操作</param>
            <returns>执行过滤器</returns>
        </member>
        <member name="T:GameBox.IFilterChain`1">
            <summary>
            过滤器链
            </summary>
            <typeparam name="TIn">输入参数</typeparam>
        </member>
        <member name="P:GameBox.IFilterChain`1.FilterList">
            <summary>
            过滤器列表
            </summary>
        </member>
        <member name="M:GameBox.IFilterChain`1.Add(System.Action{`0,System.Action{`0}},System.Int32)">
            <summary>
            增加过滤器
            </summary>
            <param name="filter">过滤器</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>过滤器链</returns>
        </member>
        <member name="M:GameBox.IFilterChain`1.Do(`0,System.Action{`0})">
            <summary>
            执行过滤器链
            </summary>
            <param name="inData">输入数据</param>
            <param name="then">当过滤器执行完成后执行的操作</param>
        </member>
        <member name="T:GameBox.IFilterChain`2">
            <summary>
            过滤器链
            </summary>
            <typeparam name="TIn">输入参数</typeparam>
            <typeparam name="TOut">输出参数</typeparam>
        </member>
        <member name="P:GameBox.IFilterChain`2.FilterList">
            <summary>
            过滤器列表
            </summary>
        </member>
        <member name="M:GameBox.IFilterChain`2.Add(System.Action{`0,`1,System.Action{`0,`1}},System.Int32)">
            <summary>
            增加一个过滤器
            </summary>
            <param name="filter">过滤器</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>过滤器链</returns>
        </member>
        <member name="M:GameBox.IFilterChain`2.Do(`0,`1,System.Action{`0,`1})">
            <summary>
            执行过滤器链
            </summary>
            <param name="inData">输入参数</param>
            <param name="outData">输出参数</param>
            <param name="then">当过滤器执行完成后执行的操作</param>
        </member>
        <member name="T:GameBox.IFilterChain`3">
            <summary>
            过滤器链
            </summary>
            <typeparam name="TIn">输入参数</typeparam>
            <typeparam name="TOut">输出参数</typeparam>
            <typeparam name="TException">输入异常</typeparam>
        </member>
        <member name="P:GameBox.IFilterChain`3.FilterList">
            <summary>
            过滤器列表
            </summary>
        </member>
        <member name="M:GameBox.IFilterChain`3.Add(System.Action{`0,`1,`2,System.Action{`0,`1,`2}},System.Int32)">
            <summary>
            增加一个过滤器
            </summary>
            <param name="filter">过滤器</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>过滤器链</returns>
        </member>
        <member name="M:GameBox.IFilterChain`3.Do(`0,`1,`2,System.Action{`0,`1,`2})">
            <summary>
            执行过滤器链
            </summary>
            <param name="inData">输入参数</param>
            <param name="outData">输出参数</param>
            <param name="exception">输入异常</param>
            <param name="then">当过滤器执行完成后执行的操作</param>
        </member>
        <member name="T:GameBox.Guard">
            <summary>
            守卫
            </summary>
        </member>
        <member name="M:GameBox.Guard.Requires``1(System.Boolean)">
            <summary>
            验证一个条件,并在该协定的条件失败时引发异常。
            </summary>
            <typeparam name="TException">异常</typeparam>
            <param name="condition">条件</param>
        </member>
        <member name="M:GameBox.Guard.NotEmptyOrNull(System.String,System.String)">
            <summary>
            不为空或者null
            </summary>
            <param name="argumentValue">参数值</param>
            <param name="argumentName">参数名</param>
        </member>
        <member name="M:GameBox.Guard.CountGreaterZero``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            长度大于0
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="argumentValue">参数值</param>
            <param name="argumentName">参数名</param>
        </member>
        <member name="M:GameBox.Guard.ElementNotEmptyOrNull(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            元素部位空或者null
            </summary>
            <param name="argumentValue">参数值</param>
            <param name="argumentName">参数名</param>
        </member>
        <member name="M:GameBox.Guard.NotNull(System.Object,System.String)">
            <summary>
            内容不为空
            </summary>
            <param name="argumentValue">参数值</param>
            <param name="argumentName">参数名</param>
        </member>
        <member name="T:GameBox.InternalList`1">
            <summary>
            内部列表
            </summary>
        </member>
        <member name="F:GameBox.InternalList`1.items">
            <summary>
            列表元素
            </summary>
        </member>
        <member name="P:GameBox.InternalList`1.Count">
            <summary>
            实际元素个数
            </summary>
        </member>
        <member name="P:GameBox.InternalList`1.IsDelete">
            <summary>
            是否被删除
            </summary>
        </member>
        <member name="M:GameBox.InternalList`1.#ctor(System.Int32)">
            <summary>
            新建一个内部列表
            </summary>
            <param name="capacity">容量</param>
        </member>
        <member name="P:GameBox.InternalList`1.Item(System.Int32)">
            <summary>
            获取或者设定一个元素
            </summary>
            <param name="offset">偏移量</param>
            <returns>元素</returns>
        </member>
        <member name="M:GameBox.InternalList`1.InsertAt(`0,System.Int32)">
            <summary>
            在指定位置插入元素
            </summary>
            <param name="element">元素</param>
            <param name="offset">偏移量</param>
        </member>
        <member name="M:GameBox.InternalList`1.RemoveAt(System.Int32)">
            <summary>
            移除元素
            </summary>
            <param name="offset">偏移量</param>
        </member>
        <member name="M:GameBox.InternalList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            移除范围内的元素
            </summary>
            <param name="start">起始范围(包含)</param>
            <param name="end">结束范围(包含)</param>
        </member>
        <member name="M:GameBox.InternalList`1.ReplaceAt(`0,System.Int32)">
            <summary>
            替换指定位置的元素
            </summary>
            <param name="element">元素</param>
            <param name="offset">偏移量</param>
        </member>
        <member name="M:GameBox.InternalList`1.Init(`0[])">
            <summary>
            合入元素
            </summary>
            <param name="elements">元素</param>
        </member>
        <member name="M:GameBox.InternalList`1.Merge(GameBox.InternalList{`0},System.Boolean)">
            <summary>
            合并内部列表
            </summary>
            <param name="join">需要被合并进来的内部列表</param>
            <param name="after">是否在当前列表元素的尾部合入</param>
        </member>
        <member name="M:GameBox.InternalList`1.Split(System.Int32,System.Boolean)">
            <summary>
            拆分列表
            </summary>
            <param name="offset">偏移量</param>
            <param name="after">是否是后拆</param>
        </member>
        <member name="M:GameBox.InternalList`1.Push(`0)">
            <summary>
            在尾部推入元素
            </summary>
            <param name="element">元素</param>
        </member>
        <member name="M:GameBox.InternalList`1.Pop">
            <summary>
            弹出尾部数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:GameBox.InternalList`1.UnShift(`0)">
            <summary>
            在列表头部加入元素
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:GameBox.InternalList`1.Shift">
            <summary>
            推出列表头部的元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="T:GameBox.IQuickList`1">
            <summary>
            快速列表
            </summary>
        </member>
        <member name="P:GameBox.IQuickList`1.Count">
            <summary>
            列表元素基数
            </summary>
        </member>
        <member name="P:GameBox.IQuickList`1.Length">
            <summary>
            快速列表中的结点数量
            </summary>
        </member>
        <member name="M:GameBox.IQuickList`1.Add(`0)">
            <summary>
            将元素插入到列表尾部
            </summary>
            <param name="element">元素</param>
        </member>
        <member name="M:GameBox.IQuickList`1.Push(`0)">
            <summary>
            将元素插入到列表尾部
            </summary>
            <param name="element">元素</param>
        </member>
        <member name="M:GameBox.IQuickList`1.UnShift(`0)">
            <summary>
            将元素插入到列表头部
            </summary>
            <param name="element">元素</param>
        </member>
        <member name="M:GameBox.IQuickList`1.Pop">
            <summary>
            移除并返回列表的尾部元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="M:GameBox.IQuickList`1.Shift">
            <summary>
            移除并返回列表头部的元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="M:GameBox.IQuickList`1.Trim(System.Int32,System.Int32)">
            <summary>
            对列表进行修剪，只保留下标范围内的元素
            </summary>
            <param name="start">起始下标</param>
            <param name="end">结束下标</param>
            <returns>移除的元素数量</returns>
        </member>
        <member name="M:GameBox.IQuickList`1.Remove(`0,System.Int32)">
            <summary>
            根据参数 <paramref name="count"/> 的值，移除列表中与参数 <paramref name="element"/> 相等的元素。
            <para><c>count &gt; 0</c> : 从表头开始向表尾搜索，移除与 <paramref name="element"/> 相等的元素，数量为 <paramref name="count"/>。</para>
            <para><c>count &lt; 0</c> : 从表尾开始向表头搜索，移除与 <paramref name="element"/> 相等的元素，数量为绝对值 <paramref name="count"/>。</para>
            <para><c>count = 0</c> : 移除表中所有与 <paramref name="element"/> 相等的元素。</para>
            </summary>
            <param name="element">要被移除的元素</param>
            <param name="count">移除的元素数量，使用正负来决定扫描起始位置，如果<paramref name="count"/>为0则全部匹配的元素，反之移除指定数量。</param>
            <returns>被移除元素的数量</returns>
        </member>
        <member name="M:GameBox.IQuickList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            获取区间内的所有元素,1个元素占1个位置，范围不允许使用负数表示
            </summary>
            <param name="start">起始位置(包含)</param>
            <param name="end">结束位置(包含)</param>
            <returns>区间内的元素列表</returns>
        </member>
        <member name="P:GameBox.IQuickList`1.Item(System.Int32)">
            <summary>
            通过下标访问元素,如果传入的是一个负数下标那么从末尾开始查找
            </summary>
            <param name="index">下标，允许为负数</param>
            <returns>元素</returns>
        </member>
        <member name="M:GameBox.IQuickList`1.InsertAfter(`0,`0)">
            <summary>
            在指定元素之后插入
            </summary>
            <param name="finder">查找的元素</param>
            <param name="insert">要插入的元素</param>
        </member>
        <member name="M:GameBox.IQuickList`1.InsertBefore(`0,`0)">
            <summary>
            在指定元素之前插入
            </summary>
            <param name="finder">查找的元素</param>
            <param name="insert">要插入的元素</param>
        </member>
        <member name="M:GameBox.IQuickList`1.ReverseIterator">
            <summary>
            反转遍历顺序(并不是反转整个列表)
            </summary>
        </member>
        <member name="M:GameBox.IQuickList`1.Clear">
            <summary>
            清空快速列表
            </summary>
        </member>
        <member name="M:GameBox.IQuickList`1.First">
            <summary>
            获取第一个元素
            </summary>
            <returns>第一个元素</returns>
        </member>
        <member name="M:GameBox.IQuickList`1.Last">
            <summary>
            获取最后一个元素
            </summary>
            <returns>最后一个元素</returns>
        </member>
        <member name="T:GameBox.QuickList`1">
            <summary>
            快速列表
            </summary>
            <typeparam name="TElement">元素</typeparam>
        </member>
        <member name="F:GameBox.QuickList`1.MergeCoefficient">
            <summary>
            合并系数
            </summary>
        </member>
        <member name="T:GameBox.QuickList`1.QuickListNode">
            <summary>
            快速列表结点
            </summary>
        </member>
        <member name="F:GameBox.QuickList`1.QuickListNode.Backward">
            <summary>
            后置结点
            </summary>
        </member>
        <member name="F:GameBox.QuickList`1.QuickListNode.Forward">
            <summary>
            前置结点
            </summary>
        </member>
        <member name="F:GameBox.QuickList`1.QuickListNode.List">
            <summary>
            列表
            </summary>
        </member>
        <member name="T:GameBox.QuickList`1.Enumerator">
            <summary>
            快速列表迭代器
            </summary>
        </member>
        <member name="F:GameBox.QuickList`1.Enumerator.quickList">
            <summary>
            快速列表
            </summary>
        </member>
        <member name="F:GameBox.QuickList`1.Enumerator.forward">
            <summary>
            是否是向前遍历
            </summary>
        </member>
        <member name="F:GameBox.QuickList`1.Enumerator.version">
            <summary>
            版本
            </summary>
        </member>
        <member name="F:GameBox.QuickList`1.Enumerator.current">
            <summary>
            当前元素
            </summary>
        </member>
        <member name="F:GameBox.QuickList`1.Enumerator.node">
            <summary>
            当前节点
            </summary>
        </member>
        <member name="F:GameBox.QuickList`1.Enumerator.index">
            <summary>
            访问下标
            </summary>
        </member>
        <member name="M:GameBox.QuickList`1.Enumerator.#ctor(GameBox.QuickList{`0},System.Boolean)">
            <summary>
            构造一个迭代器
            </summary>
            <param name="quickList"></param>
            <param name="forward"></param>
        </member>
        <member name="M:GameBox.QuickList`1.Enumerator.MoveNext">
            <summary>
            移动到下一个节点
            </summary>
            <returns>下一个节点是否存在</returns>
        </member>
        <member name="P:GameBox.QuickList`1.Enumerator.Current">
            <summary>
            获取当前元素
            </summary>
        </member>
        <member name="P:GameBox.QuickList`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            获取当前元素
            </summary>
        </member>
        <member name="M:GameBox.QuickList`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            重置迭代器
            </summary>
        </member>
        <member name="M:GameBox.QuickList`1.Enumerator.Dispose">
            <summary>
            释放时
            </summary>
        </member>
        <member name="F:GameBox.QuickList`1.fill">
            <summary>
            每个快速列表结点最多的元素数量
            </summary>
        </member>
        <member name="F:GameBox.QuickList`1.header">
            <summary>
            列表头
            </summary>
        </member>
        <member name="F:GameBox.QuickList`1.tail">
            <summary>
            列表尾
            </summary>
        </member>
        <member name="F:GameBox.QuickList`1.forward">
            <summary>
            是否是向前的迭代方向
            </summary>
        </member>
        <member name="F:GameBox.QuickList`1.version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:GameBox.QuickList`1.SyncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="P:GameBox.QuickList`1.Count">
            <summary>
            列表元素基数
            </summary>
        </member>
        <member name="P:GameBox.QuickList`1.Length">
            <summary>
            快速列表中的结点数量
            </summary>
        </member>
        <member name="M:GameBox.QuickList`1.#ctor(System.Int32)">
            <summary>
            快速列表
            </summary>
            <param name="fill">每个结点中元素的最大数量</param>
        </member>
        <member name="M:GameBox.QuickList`1.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:GameBox.QuickList`1.First">
            <summary>
            获取第一个元素
            </summary>
            <returns>第一个元素</returns>
        </member>
        <member name="M:GameBox.QuickList`1.Last">
            <summary>
            获取最后一个元素
            </summary>
            <returns>最后一个元素</returns>
        </member>
        <member name="M:GameBox.QuickList`1.Add(`0)">
            <summary>
            将元素插入到列表尾部
            </summary>
            <param name="element">元素</param>
        </member>
        <member name="M:GameBox.QuickList`1.Push(`0)">
            <summary>
            将元素插入到列表尾部
            </summary>
            <param name="element">元素</param>
        </member>
        <member name="M:GameBox.QuickList`1.UnShift(`0)">
            <summary>
            将元素插入到列表头部
            </summary>
            <param name="element">元素</param>
        </member>
        <member name="M:GameBox.QuickList`1.Pop">
            <summary>
            移除并返回列表的尾部元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="M:GameBox.QuickList`1.Shift">
            <summary>
            移除并返回列表头部的元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="M:GameBox.QuickList`1.Trim(System.Int32,System.Int32)">
            <summary>
            对列表进行修剪，只保留下标范围内的元素
            </summary>
            <param name="start">起始下标(包含)</param>
            <param name="end">结束下标(包含)</param>
            <returns>移除的元素数量</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/>大于<paramref name="end"/>或者<paramref name="start"/>小于0时引发</exception>
        </member>
        <member name="M:GameBox.QuickList`1.Remove(`0,System.Int32)">
            <summary>
            根据参数 <paramref name="count"/> 的值，移除列表中与参数 <paramref name="element"/> 相等的元素。
            <para><c>count &gt; 0</c> : 从表头开始向表尾搜索，移除与 <paramref name="element"/> 相等的元素，数量为 <paramref name="count"/>。</para>
            <para><c>count &lt; 0</c> : 从表尾开始向表头搜索，移除与 <paramref name="element"/> 相等的元素，数量为绝对值 <paramref name="count"/>。</para>
            <para><c>count = 0</c> : 移除表中所有与 <paramref name="element"/> 相等的元素。</para>
            </summary>
            <param name="element">要被移除的元素</param>
            <param name="count">移除的元素数量，使用正负来决定扫描起始位置，如果<paramref name="count"/>为0则全部匹配的元素，反之移除指定数量。</param>
            <returns>被移除元素的数量</returns>
        </member>
        <member name="M:GameBox.QuickList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            获取区间内的所有元素,1个元素占1个位置
            </summary>
            <param name="start">起始位置(包含)</param>
            <param name="end">结束位置(包含)</param>
            <returns>区间内的元素列表</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/>大于<paramref name="end"/>时引发</exception>
        </member>
        <member name="P:GameBox.QuickList`1.Item(System.Int32)">
            <summary>
            通过下标访问元素,如果传入的是一个负数下标那么从末尾开始查找
            </summary>
            <param name="index">下标，允许为负数</param>
            <returns>元素</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">下标越界时会引发</exception>
        </member>
        <member name="M:GameBox.QuickList`1.InsertAfter(`0,`0)">
            <summary>
            在指定元素之后插入
            </summary>
            <param name="finder">查找的元素</param>
            <param name="insert">要插入的元素</param>
        </member>
        <member name="M:GameBox.QuickList`1.InsertBefore(`0,`0)">
            <summary>
            在指定元素之前插入
            </summary>
            <param name="finder">查找的元素</param>
            <param name="insert">要插入的元素</param>
        </member>
        <member name="M:GameBox.QuickList`1.ReverseIterator">
            <summary>
            反转遍历顺序(并不是反转整个列表)
            </summary>
        </member>
        <member name="M:GameBox.QuickList`1.GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:GameBox.QuickList`1.System#Collections#Generic#IEnumerable{TElement}#GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:GameBox.QuickList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:GameBox.QuickList`1.FindByIndex(System.Int32,System.Int32@)">
            <summary>
            根据下标查找元素,如果传入的是一个负数下标那么从末尾开始查找
            </summary>
            <param name="index">下标</param>
            <param name="offset">偏移量</param>
            <returns>元素</returns>
        </member>
        <member name="M:GameBox.QuickList`1.Insert(`0,GameBox.QuickList{`0}.QuickListNode,System.Int32,System.Boolean)">
            <summary>
            插入元素
            </summary>
            <param name="insert">被插入的元素</param>
            <param name="after">是否在被查找的元素之后插入</param>
            <param name="node">需要插入的结点</param>
            <param name="offset">结点相对偏移量</param>
        </member>
        <member name="M:GameBox.QuickList`1.AttemptMergeNode(GameBox.QuickList{`0}.QuickListNode)">
            <summary>
            尝试合并结点
            </summary>
            <param name="node">发起合并的结点</param>
        </member>
        <member name="M:GameBox.QuickList`1.MergeNode(GameBox.QuickList{`0}.QuickListNode,GameBox.QuickList{`0}.QuickListNode,System.Boolean)">
            <summary>
            将从结点合并进主节点
            </summary>
            <param name="master">主结点</param>
            <param name="slave">从结点</param>
            <param name="after">从结点将怎么合并</param>
        </member>
        <member name="M:GameBox.QuickList`1.AllowMerge(GameBox.QuickList{`0}.QuickListNode,GameBox.QuickList{`0}.QuickListNode)">
            <summary>
            是否允许进行合并
            </summary>
            <param name="a">结点</param>
            <param name="b">结点</param>
            <returns>是否可以合并</returns>
        </member>
        <member name="M:GameBox.QuickList`1.SplitNode(GameBox.QuickList{`0}.QuickListNode,System.Int32,System.Boolean)">
            <summary>
            拆分结点
            </summary>
            <param name="node">要被拆分的结点</param>
            <param name="offset">拆分偏移量</param>
            <param name="after">前拆将会将offset之前的元素作为返回结点，后拆分则会将offset之后的元素作为返回结点</param>
            <returns>拆分出的结点</returns>
        </member>
        <member name="M:GameBox.QuickList`1.FindNode(`0,System.Int32@)">
            <summary>
            查找元素所在结点
            </summary>
            <param name="element">元素</param>
            <param name="offset">偏移量</param>
            <returns>所在结点，如果找不到结点则返回null</returns>
        </member>
        <member name="M:GameBox.QuickList`1.ListPop(GameBox.QuickList{`0}.QuickListNode,System.Boolean)">
            <summary>
            列表弹出数据
            </summary>
            <param name="node">结点</param>
            <param name="head">是否是头部</param>
        </member>
        <member name="M:GameBox.QuickList`1.DeleteNode(GameBox.QuickList{`0}.QuickListNode)">
            <summary>
            删除结点
            </summary>
            <param name="node">结点</param>
        </member>
        <member name="M:GameBox.QuickList`1.InsertNode(GameBox.QuickList{`0}.QuickListNode,GameBox.QuickList{`0}.QuickListNode,System.Boolean)">
            <summary>
            插入结点
            </summary>
            <param name="oldNode">旧的结点</param>
            <param name="newNode">新的结点</param>
            <param name="after">在旧的结点之前还是之后</param>
        </member>
        <member name="M:GameBox.QuickList`1.MakeNode">
            <summary>
            创建结点
            </summary>
            <returns></returns>
        </member>
        <member name="M:GameBox.QuickList`1.AllowInsert(GameBox.QuickList{`0}.QuickListNode)">
            <summary>
            快速列表结点是否允许插入
            </summary>
            <param name="node">结点</param>
            <returns>是否可以插入</returns>
        </member>
        <member name="T:GameBox.IRingBuffer">
            <summary>
            环型缓冲区
            </summary>
        </member>
        <member name="P:GameBox.IRingBuffer.Capacity">
            <summary>
            缓冲区容量
            </summary>
        </member>
        <member name="P:GameBox.IRingBuffer.SyncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="P:GameBox.IRingBuffer.WriteableCapacity">
            <summary>
            可写容量
            </summary>
        </member>
        <member name="P:GameBox.IRingBuffer.ReadableCapacity">
            <summary>
            可读容量
            </summary>
        </member>
        <member name="M:GameBox.IRingBuffer.CanRead(System.Int32)">
            <summary>
            是否可以进行读取
            </summary>
            <param name="count">指定的长度</param>
        </member>
        <member name="M:GameBox.IRingBuffer.CanWrite(System.Int32)">
            <summary>
            是否可以进行写入
            </summary>
            <param name="count">指定的长度</param>
        </member>
        <member name="M:GameBox.IRingBuffer.GetBuffer">
            <summary>
            获取环型缓冲区的原始数组
            </summary>
            <returns>原始数组</returns>
        </member>
        <member name="M:GameBox.IRingBuffer.Read">
            <summary>
            将可以读取的数据全部返回
            </summary>
            <returns>可以读取的数据</returns>
        </member>
        <member name="M:GameBox.IRingBuffer.Read(System.Byte[])">
            <summary>
            将数据读取到<paramref name="buffer"/>中
            </summary>
            <param name="buffer">输出的数据</param>
            <returns>实际输出的长度</returns>
        </member>
        <member name="M:GameBox.IRingBuffer.Read(System.Byte[],System.Int32)">
            <summary>
            将数据读取到<paramref name="buffer"/>中
            </summary>
            <param name="buffer">输出的数据</param>
            <param name="offset">输出数组偏移多少作为起始</param>
            <returns>实际输出的长度</returns>
        </member>
        <member name="M:GameBox.IRingBuffer.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将数据读取到<paramref name="buffer"/>中
            </summary>
            <param name="buffer">输出的数据</param>
            <param name="offset">输出数组偏移多少作为起始</param>
            <param name="count">输出的长度</param>
            <returns>实际输出的长度</returns>
        </member>
        <member name="M:GameBox.IRingBuffer.Peek">
            <summary>
            将环型缓冲区的数据全部返回，但是不前移读取位置
            </summary>
            <returns>实际输出的长度</returns>
        </member>
        <member name="M:GameBox.IRingBuffer.Peek(System.Byte[])">
            <summary>
            将环型缓冲区的数据读取到<paramref name="buffer"/>中，但是不前移读取位置
            </summary>
            <param name="buffer">输出的数据</param>
            <returns>实际输出的长度</returns>
        </member>
        <member name="M:GameBox.IRingBuffer.Peek(System.Byte[],System.Int32)">
            <summary>
            将环型缓冲区的数据读取到<paramref name="buffer"/>中，但是不前移读取位置
            </summary>
            <param name="buffer">输出的数据</param>
            <param name="offset">输出数组偏移多少作为起始</param>
            <returns>实际输出的长度</returns>
        </member>
        <member name="M:GameBox.IRingBuffer.Peek(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将环型缓冲区的数据读取到<paramref name="buffer"/>中，但是不前移读取位置
            </summary>
            <param name="buffer">输出的数据</param>
            <param name="offset">输出数组偏移多少作为起始</param>
            <param name="count">输出的长度</param>
            <returns>实际输出的长度</returns>
        </member>
        <member name="M:GameBox.IRingBuffer.Write(System.Byte[])">
            <summary>
            将数据写入到环型缓冲区
            </summary>
            <param name="buffer">写入的数据</param>
            <returns>实际被写入的长度</returns>
        </member>
        <member name="M:GameBox.IRingBuffer.Write(System.Byte[],System.Int32)">
            <summary>
            将数据写入到环型缓冲区
            </summary>
            <param name="buffer">写入的数据</param>
            <param name="offset">偏移多少数据开始写入</param>
            <returns>实际被写入的长度</returns>
        </member>
        <member name="M:GameBox.IRingBuffer.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将数据写入到环型缓冲区
            </summary>
            <param name="buffer">写入的数据</param>
            <param name="offset">偏移多少数据开始写入</param>
            <param name="count">写入的长度</param>
            <returns>实际被写入的长度</returns>
        </member>
        <member name="M:GameBox.IRingBuffer.Flush">
            <summary>
            清空缓冲区中的所有数据
            </summary>
        </member>
        <member name="T:GameBox.RingBuffer">
            <summary>
            环型缓冲区
            </summary>
        </member>
        <member name="F:GameBox.RingBuffer.capacity">
            <summary>
            容量
            </summary>
        </member>
        <member name="P:GameBox.RingBuffer.Capacity">
            <summary>
            缓冲区容量
            </summary>
        </member>
        <member name="F:GameBox.RingBuffer.buffer">
            <summary>
            缓冲区大小
            </summary>
        </member>
        <member name="F:GameBox.RingBuffer.exposable">
            <summary>
            原始数组是否可以返回给开发者
            </summary>
        </member>
        <member name="F:GameBox.RingBuffer.write">
            <summary>
            写入的游标
            </summary>
        </member>
        <member name="F:GameBox.RingBuffer.read">
            <summary>
            读取的游标
            </summary>
        </member>
        <member name="F:GameBox.RingBuffer.mask">
            <summary>
            遮罩层
            <para>为了快速计算出,环回中的写入点</para>
            </summary>
        </member>
        <member name="F:GameBox.RingBuffer.syncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="P:GameBox.RingBuffer.SyncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="P:GameBox.RingBuffer.WriteableCapacity">
            <summary>
            可写容量
            </summary>
        </member>
        <member name="P:GameBox.RingBuffer.ReadableCapacity">
            <summary>
            可读容量
            </summary>
        </member>
        <member name="M:GameBox.RingBuffer.#ctor(System.Int32,System.Boolean)">
            <summary>
            构建一个新的环型缓冲区实例
            </summary>
            <param name="capacity">容量,将为临近2的次方（向上取）</param>
            <param name="exposable">是否可以访问内部数组</param>
        </member>
        <member name="M:GameBox.RingBuffer.CanRead(System.Int32)">
            <summary>
            是否可以进行读取
            </summary>
            <param name="count">指定的长度</param>
        </member>
        <member name="M:GameBox.RingBuffer.CanWrite(System.Int32)">
            <summary>
            是否可以进行写入
            </summary>
            <param name="count">指定的长度</param>
        </member>
        <member name="M:GameBox.RingBuffer.GetBuffer">
            <summary>
            获取环型缓冲区的原始数组
            </summary>
            <returns>原始数组</returns>
        </member>
        <member name="M:GameBox.RingBuffer.Read">
            <summary>
            将可以读取的数据全部返回
            </summary>
            <returns>可以读取的数据</returns>
        </member>
        <member name="M:GameBox.RingBuffer.Read(System.Byte[])">
            <summary>
            将数据读取到<paramref name="buffer"/>中
            </summary>
            <param name="buffer">输出的数据</param>
            <returns>实际输出的长度</returns>
        </member>
        <member name="M:GameBox.RingBuffer.Read(System.Byte[],System.Int32)">
            <summary>
            将数据读取到<paramref name="buffer"/>中
            </summary>
            <param name="buffer">输出的数据</param>
            <param name="offset">输出数组偏移多少作为起始</param>
            <returns>实际输出的长度</returns>
        </member>
        <member name="M:GameBox.RingBuffer.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将数据读取到<paramref name="buffer"/>中
            </summary>
            <param name="buffer">输出的数据</param>
            <param name="offset">输出数组偏移多少作为起始</param>
            <param name="count">输出的长度</param>
            <returns>实际输出的长度</returns>
        </member>
        <member name="M:GameBox.RingBuffer.Peek">
            <summary>
            将环型缓冲区的数据全部返回，但是不前移读取位置
            </summary>
            <returns>实际输出的长度</returns>
        </member>
        <member name="M:GameBox.RingBuffer.Peek(System.Byte[])">
            <summary>
            将环型缓冲区的数据读取到<paramref name="buffer"/>中，但是不前移读取位置
            </summary>
            <param name="buffer">输出的数据</param>
            <returns>实际输出的长度</returns>
        </member>
        <member name="M:GameBox.RingBuffer.Peek(System.Byte[],System.Int32)">
            <summary>
            将环型缓冲区的数据读取到<paramref name="buffer"/>中，但是不前移读取位置
            </summary>
            <param name="buffer">输出的数据</param>
            <param name="offset">输出数组偏移多少作为起始</param>
            <returns>实际输出的长度</returns>
        </member>
        <member name="M:GameBox.RingBuffer.Peek(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将环型缓冲区的数据读取到<paramref name="buffer"/>中，但是不前移读取位置
            </summary>
            <param name="buffer">输出的数据</param>
            <param name="offset">输出数组偏移多少作为起始</param>
            <param name="count">输出的长度</param>
            <returns>实际输出的长度</returns>
        </member>
        <member name="M:GameBox.RingBuffer.Write(System.Byte[])">
            <summary>
            将数据写入到环型缓冲区
            </summary>
            <param name="buffer">写入的数据</param>
            <returns>实际被写入的长度</returns>
        </member>
        <member name="M:GameBox.RingBuffer.Write(System.Byte[],System.Int32)">
            <summary>
            将数据写入到环型缓冲区
            </summary>
            <param name="buffer">写入的数据</param>
            <param name="offset">偏移多少数据开始写入</param>
            <returns>实际被写入的长度</returns>
        </member>
        <member name="M:GameBox.RingBuffer.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将数据写入到环型缓冲区
            </summary>
            <param name="buffer">写入的数据</param>
            <param name="offset">偏移多少数据开始写入</param>
            <param name="count">写入的长度</param>
            <returns>实际被写入的长度</returns>
        </member>
        <member name="M:GameBox.RingBuffer.Flush">
            <summary>
            清空缓冲区中的所有数据
            </summary>
        </member>
        <member name="M:GameBox.RingBuffer.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:GameBox.RingBuffer.GetCanReadSize">
            <summary>
            获取可以被读取的字节流大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:GameBox.RingBuffer.GetCanWriteSize">
            <summary>
            得到可以被写入的字节流大小
            </summary>
        </member>
        <member name="M:GameBox.RingBuffer.MakeReadableBuffer">
            <summary>
            获取当前可读的buffer
            </summary>
            <returns>可以被读取的buffer</returns>
        </member>
        <member name="T:GameBox.ISortSet`2">
            <summary>
            有序集
            </summary>
            <typeparam name="TElement">元素</typeparam>
            <typeparam name="TScore">分数</typeparam>
        </member>
        <member name="P:GameBox.ISortSet`2.Count">
            <summary>
            有序集的基数
            </summary>
        </member>
        <member name="P:GameBox.ISortSet`2.SyncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="M:GameBox.ISortSet`2.Clear">
            <summary>
            清空SortSet
            </summary>
        </member>
        <member name="M:GameBox.ISortSet`2.Add(`0,`1)">
            <summary>
            插入记录
            </summary>
            <param name="element">元素</param>
            <param name="score">分数</param>
        </member>
        <member name="M:GameBox.ISortSet`2.Contains(`0)">
            <summary>
            是否包含某个元素
            </summary>
            <param name="element">元素</param>
        </member>
        <member name="M:GameBox.ISortSet`2.GetScore(`0)">
            <summary>
            返回有序集的分数
            </summary>
            <param name="element">元素</param>
            <returns>分数，如果元素不存在则引发异常</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="element"/>不存在时引发</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/>为<c>null</c>时引发</exception>
        </member>
        <member name="M:GameBox.ISortSet`2.GetRangeCount(`1,`1)">
            <summary>
            获取分数范围内的元素个数
            </summary>
            <param name="start">起始值(包含)</param>
            <param name="end">结束值(包含)</param>
            <returns>分数值在<paramref name="start"/>(包含)和<paramref name="end"/>(包含)之间的元素数量</returns>
        </member>
        <member name="M:GameBox.ISortSet`2.Remove(`0)">
            <summary>
            从有序集中删除元素，如果元素不存在返回false
            </summary>
            <param name="element">元素</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GameBox.ISortSet`2.RemoveRangeByRank(System.Int32,System.Int32)">
            <summary>
            根据排名区间移除区间内的元素
            </summary>
            <param name="startRank">开始的排名(包含),排名以0为底</param>
            <param name="stopRank">结束的排名(包含),排名以0为底</param>
            <returns>被删除的元素个数</returns>
        </member>
        <member name="M:GameBox.ISortSet`2.RemoveRangeByScore(`1,`1)">
            <summary>
            根据分数区间移除区间内的元素
            </summary>
            <param name="startScore">开始的分数（包含）</param>
            <param name="stopScore">结束的分数（包含）</param>
            <returns>被删除的元素个数</returns>
        </member>
        <member name="M:GameBox.ISortSet`2.GetRank(`0)">
            <summary>
            获取排名 , 有序集成员按照Score从小到大排序
            </summary>
            <param name="element">元素</param>
            <returns>排名排名以0为底，为-1则表示没有找到元素</returns>
        </member>
        <member name="M:GameBox.ISortSet`2.GetRevRank(`0)">
            <summary>
            获取排名，有序集成员按照Score从大到小排序
            </summary>
            <param name="element"></param>
            <returns>排名排名以0为底 , 为-1则表示没有找到元素</returns>
        </member>
        <member name="M:GameBox.ISortSet`2.GetElementRangeByRank(System.Int32,System.Int32)">
            <summary>
            根据排名区间获取区间内的所有元素
            </summary>
            <param name="startRank">开始的排名(包含),排名以0为底</param>
            <param name="stopRank">结束的排名(包含),排名以0为底</param>
            <returns>元素列表</returns>
        </member>
        <member name="M:GameBox.ISortSet`2.GetElementRangeByScore(`1,`1)">
            <summary>
            根据分数区间获取区间内的所有元素
            </summary>
            <param name="startScore">开始的分数（包含）</param>
            <param name="stopScore">结束的分数（包含）</param>
            <returns>元素列表</returns>
        </member>
        <member name="M:GameBox.ISortSet`2.GetElementByRank(System.Int32)">
            <summary>
            根据排名获取元素 (有序集成员按照Score从小到大排序)
            </summary>
            <param name="rank">排名,排名以0为底</param>
            <returns>元素</returns>
        </member>
        <member name="M:GameBox.ISortSet`2.GetElementByRevRank(System.Int32)">
            <summary>
            根据排名获取元素 (有序集成员按照Score从大到小排序)
            </summary>
            <param name="rank">排名,排名以0为底</param>
            <returns>元素</returns>
        </member>
        <member name="M:GameBox.ISortSet`2.ReverseIterator">
            <summary>
            反转遍历顺序(并不是反转整个有序集)
            </summary>
        </member>
        <member name="M:GameBox.ISortSet`2.ReverseIterator(System.Boolean)">
            <summary>
            反转遍历顺序(并不是反转整个有序集)
            </summary>
            <param name="forward">指定的反转顺序</param>
        </member>
        <member name="M:GameBox.ISortSet`2.First">
            <summary>
            获取第一个元素
            </summary>
            <returns>第一个元素</returns>
        </member>
        <member name="M:GameBox.ISortSet`2.Last">
            <summary>
            获取最后一个元素
            </summary>
            <returns>最后一个元素</returns>
        </member>
        <member name="M:GameBox.ISortSet`2.Shift">
            <summary>
            移除并返回有序集头部的元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="M:GameBox.ISortSet`2.Pop">
            <summary>
            移除并返回有序集尾部的元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="P:GameBox.ISortSet`2.Item(System.Int32)">
            <summary>
            获取指定排名的元素(有序集成员按照Score从小到大排序)
            </summary>
            <param name="rank">排名,排名以0为底</param>
            <returns>指定的元素</returns>
        </member>
        <member name="M:GameBox.ISortSet`2.ToArray">
            <summary>
            转为数组
            </summary>
            <returns>元素数组</returns>
        </member>
        <member name="T:GameBox.SortSet`2">
            <summary>
            有序集
            有序集使用分数进行排序(以小到大)
            </summary>
        </member>
        <member name="T:GameBox.SortSet`2.SkipNode">
            <summary>
            跳跃结点
            </summary>
        </member>
        <member name="F:GameBox.SortSet`2.SkipNode.SkipNodeLevel.Forward">
            <summary>
            下一个结点
            </summary>
        </member>
        <member name="F:GameBox.SortSet`2.SkipNode.SkipNodeLevel.Span">
            <summary>
            层跨越的结点数量
            </summary>
        </member>
        <member name="F:GameBox.SortSet`2.SkipNode.Element">
            <summary>
            元素
            </summary>
        </member>
        <member name="F:GameBox.SortSet`2.SkipNode.Score">
            <summary>
            分数
            </summary>
        </member>
        <member name="F:GameBox.SortSet`2.SkipNode.IsDeleted">
            <summary>
            是否被删除
            </summary>
        </member>
        <member name="F:GameBox.SortSet`2.SkipNode.Backward">
            <summary>
            向后的结点
            </summary>
        </member>
        <member name="F:GameBox.SortSet`2.SkipNode.Level">
            <summary>
            层级
            </summary>
        </member>
        <member name="T:GameBox.SortSet`2.Enumerator">
            <summary>
            有序集迭代器
            </summary>
        </member>
        <member name="F:GameBox.SortSet`2.Enumerator.sortSet">
            <summary>
            快速列表
            </summary>
        </member>
        <member name="F:GameBox.SortSet`2.Enumerator.forward">
            <summary>
            是否是向前遍历
            </summary>
        </member>
        <member name="F:GameBox.SortSet`2.Enumerator.current">
            <summary>
            当前节点
            </summary>
        </member>
        <member name="M:GameBox.SortSet`2.Enumerator.#ctor(GameBox.SortSet{`0,`1},System.Boolean)">
            <summary>
            构造一个迭代器
            </summary>
            <param name="sortSet">有序集</param>
            <param name="forward">是否向前遍历</param>
        </member>
        <member name="M:GameBox.SortSet`2.Enumerator.MoveNext">
            <summary>
            移动到下一个节点
            </summary>
            <returns>下一个节点是否存在</returns>
        </member>
        <member name="P:GameBox.SortSet`2.Enumerator.Current">
            <summary>
            获取当前元素
            </summary>
        </member>
        <member name="P:GameBox.SortSet`2.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            获取当前元素
            </summary>
        </member>
        <member name="M:GameBox.SortSet`2.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            重置迭代器
            </summary>
        </member>
        <member name="M:GameBox.SortSet`2.Enumerator.Dispose">
            <summary>
            释放时
            </summary>
        </member>
        <member name="F:GameBox.SortSet`2.forward">
            <summary>
            是否是向前的迭代方向
            </summary>
        </member>
        <member name="F:GameBox.SortSet`2.maxLevel">
            <summary>
            最大层数
            </summary>
        </member>
        <member name="F:GameBox.SortSet`2.dict">
            <summary>
            字典
            </summary>
        </member>
        <member name="F:GameBox.SortSet`2.level">
            <summary>
            当前拥有的层
            </summary>
        </member>
        <member name="F:GameBox.SortSet`2.header">
            <summary>
            跳跃表头结点
            </summary>
        </member>
        <member name="F:GameBox.SortSet`2.tail">
            <summary>
            尾部结点
            </summary>
        </member>
        <member name="F:GameBox.SortSet`2.probability">
            <summary>
            可能出现层数的概率
            </summary>
        </member>
        <member name="F:GameBox.SortSet`2.random">
            <summary>
            随机数发生器
            </summary>
        </member>
        <member name="F:GameBox.SortSet`2.comparer">
            <summary>
            比较器
            </summary>
        </member>
        <member name="P:GameBox.SortSet`2.Count">
            <summary>
            有序集的基数
            </summary>
        </member>
        <member name="P:GameBox.SortSet`2.SyncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="M:GameBox.SortSet`2.#ctor(System.Double,System.Int32)">
            <summary>
            创建一个有序集
            </summary>
            <param name="probable">可能出现层数的概率系数(0-1之间的数)</param>
            <param name="maxLevel">最大层数</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="probable"/>或<paramref name="maxLevel"/>不是有效值时引发</exception>
        </member>
        <member name="M:GameBox.SortSet`2.#ctor(System.Collections.Generic.IComparer{`1},System.Double,System.Int32)">
            <summary>
            创建一个有序集
            </summary>
            <param name="comparer">比较器</param>
            <param name="probable">可能出现层数的概率系数(0-1之间的数)</param>
            <param name="maxLevel">最大层数</param>
        </member>
        <member name="M:GameBox.SortSet`2.Clear">
            <summary>
            清空SortSet
            </summary>
        </member>
        <member name="M:GameBox.SortSet`2.ReverseIterator">
            <summary>
            反转遍历顺序(并不是反转整个有序集)
            </summary>
        </member>
        <member name="M:GameBox.SortSet`2.ReverseIterator(System.Boolean)">
            <summary>
            反转遍历顺序(并不是反转整个有序集)
            </summary>
            <param name="forward">反转顺序</param>
        </member>
        <member name="M:GameBox.SortSet`2.GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:GameBox.SortSet`2.System#Collections#Generic#IEnumerable{TElement}#GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:GameBox.SortSet`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:GameBox.SortSet`2.ToArray">
            <summary>
            转为数组
            </summary>
            <returns>数组</returns>
        </member>
        <member name="M:GameBox.SortSet`2.First">
            <summary>
            获取第一个元素
            </summary>
            <returns>最后一个元素</returns>
        </member>
        <member name="M:GameBox.SortSet`2.Last">
            <summary>
            获取最后一个元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="M:GameBox.SortSet`2.Shift">
            <summary>
            移除并返回有序集头部的元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="M:GameBox.SortSet`2.Pop">
            <summary>
            移除并返回有序集尾部的元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="P:GameBox.SortSet`2.Item(System.Int32)">
            <summary>
            获取指定排名的元素(有序集成员按照Score从小到大排序)
            </summary>
            <param name="rank">排名,排名以0为底</param>
            <returns>指定的元素</returns>
        </member>
        <member name="M:GameBox.SortSet`2.Add(`0,`1)">
            <summary>
            插入记录
            </summary>
            <param name="element">元素</param>
            <param name="score">分数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/>或<paramref name="score"/>为<c>null</c>时引发</exception>
        </member>
        <member name="M:GameBox.SortSet`2.Contains(`0)">
            <summary>
            是否包含某个元素
            </summary>
            <param name="element">元素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/>为<c>null</c>时引发</exception>
        </member>
        <member name="M:GameBox.SortSet`2.GetScore(`0)">
            <summary>
            返回有序集的分数
            </summary>
            <param name="element">元素</param>
            <returns>分数，如果元素不存在则引发异常</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="element"/>不存在时引发</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/>为<c>null</c>时引发</exception>
        </member>
        <member name="M:GameBox.SortSet`2.GetRangeCount(`1,`1)">
            <summary>
            获取分数范围内的元素个数
            </summary>
            <param name="start">起始值(包含)</param>
            <param name="end">结束值(包含)</param>
            <returns>分数值在<paramref name="start"/>(包含)和<paramref name="end"/>(包含)之间的元素数量</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/>和<paramref name="end"/>区间无效时引发</exception>
        </member>
        <member name="M:GameBox.SortSet`2.Remove(`0)">
            <summary>
            从有序集中删除元素，如果元素不存在返回false
            </summary>
            <param name="element">元素</param>
            <returns>是否成功</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/>为<c>null</c>时引发</exception>
        </member>
        <member name="M:GameBox.SortSet`2.RemoveRangeByRank(System.Int32,System.Int32)">
            <summary>
            根据排名区间移除区间内的元素
            </summary>
            <param name="startRank">开始的排名(包含),排名以0为底</param>
            <param name="stopRank">结束的排名(包含),排名以0为底</param>
            <returns>被删除的元素个数</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startRank"/>和<paramref name="stopRank"/>区间无效时引发</exception>
        </member>
        <member name="M:GameBox.SortSet`2.RemoveRangeByScore(`1,`1)">
            <summary>
            根据分数区间移除区间内的元素
            </summary>
            <param name="startScore">开始的分数（包含）</param>
            <param name="stopScore">结束的分数（包含）</param>
            <returns>被删除的元素个数</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startScore"/>和<paramref name="stopScore"/>区间无效时引发</exception>
        </member>
        <member name="M:GameBox.SortSet`2.GetRank(`0)">
            <summary>
            获取排名 , 有序集成员按照Score从小到大排序
            </summary>
            <param name="element">元素</param>
            <returns>排名排名以0为底，为-1则表示没有找到元素</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/>为<c>null</c>时引发</exception>
        </member>
        <member name="M:GameBox.SortSet`2.GetRevRank(`0)">
            <summary>
            获取排名，有序集成员按照Score从大到小排序
            </summary>
            <param name="element"></param>
            <returns>排名排名以0为底 , 为-1则表示没有找到元素</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/>为<c>null</c>时引发</exception>
        </member>
        <member name="M:GameBox.SortSet`2.GetElementRangeByRank(System.Int32,System.Int32)">
            <summary>
            根据排名区间获取区间内的所有元素
            </summary>
            <param name="startRank">开始的排名(包含),排名以0为底</param>
            <param name="stopRank">结束的排名(包含),排名以0为底</param>
            <returns>元素列表</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startRank"/>和<paramref name="stopRank"/>区间无效时引发</exception>
        </member>
        <member name="M:GameBox.SortSet`2.GetElementRangeByScore(`1,`1)">
            <summary>
            根据分数区间获取区间内的所有元素
            </summary>
            <param name="startScore">开始的分数（包含）</param>
            <param name="stopScore">结束的分数（包含）</param>
            <returns>元素列表</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startScore"/>和<paramref name="stopScore"/>区间无效时引发</exception>
        </member>
        <member name="M:GameBox.SortSet`2.GetElementByRank(System.Int32)">
            <summary>
            根据排名获取元素 (有序集成员按照Score从小到大排序)
            </summary>
            <param name="rank">排名,排名以0为底</param>
            <returns>元素</returns>
        </member>
        <member name="M:GameBox.SortSet`2.GetElementByRevRank(System.Int32)">
            <summary>
            根据排名获取元素 (有序集成员按照Score从大到小排序)
            </summary>
            <param name="rank">排名,排名以0为底</param>
            <returns>元素</returns>
        </member>
        <member name="M:GameBox.SortSet`2.AddElement(`0,`1)">
            <summary>
            插入记录
            </summary>
            <param name="element">元素</param>
            <param name="score">分数</param>
        </member>
        <member name="M:GameBox.SortSet`2.Remove(GameBox.SortSet{`0,`1}.SkipNode,`0@)">
            <summary>
            移除元素
            </summary>
            <param name="node">节点</param>
            <param name="element">元素</param>
            <returns>移除的元素</returns>
        </member>
        <member name="M:GameBox.SortSet`2.Remove(`0,`1)">
            <summary>
            如果元素存在那么从有序集中删除元素
            </summary>
            <param name="element">元素</param>
            <param name="score">分数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GameBox.SortSet`2.GetRank(`0,`1)">
            <summary>
            获取元素排名
            </summary>
            <param name="element">元素</param>
            <param name="score">分数</param>
            <returns>排名，排名以0为底</returns>
        </member>
        <member name="M:GameBox.SortSet`2.IsFindNext(GameBox.SortSet{`0,`1}.SkipNode,`0,`1,System.Int32)">
            <summary>
            是否查询下一个元素
            </summary>
            <param name="node">跳跃结点</param>
            <param name="element">元素</param>
            <param name="score">分数</param>
            <param name="level">层级</param>
            <returns>是否查找下一个</returns>
        </member>
        <member name="M:GameBox.SortSet`2.DeleteNode(GameBox.SortSet{`0,`1}.SkipNode,GameBox.SortSet{`0,`1}.SkipNode[])">
            <summary>
            删除结点关系
            </summary>
            <param name="cursor">结点</param>
            <param name="update">更新结点列表</param>
        </member>
        <member name="M:GameBox.SortSet`2.GetRandomLevel">
            <summary>
            获取随机层
            </summary>
            <returns>随机的层数</returns>
        </member>
        <member name="M:GameBox.SortSet`2.Compare(`1,`1)">
            <summary>
            比较左值和右值
            <para>如果左值小于右值返回值需要小于0</para>
            <para>如果左值等于右值返回值需要等于0</para>
            <para>如果左值大于右值返回值需要大于0</para>
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:GameBox.IStorage">
            <summary>
            基础存储
            </summary>
        </member>
        <member name="P:GameBox.IStorage.Length">
            <summary>
            存储数据的长度
            </summary>
        </member>
        <member name="P:GameBox.IStorage.Locker">
            <summary>
            读写锁
            </summary>
        </member>
        <member name="P:GameBox.IStorage.Disabled">
            <summary>
            是否应被释放
            </summary>
        </member>
        <member name="M:GameBox.IStorage.Write(System.Byte[],System.Int32,System.Int32,System.Int64)">
            <summary>
            将指定缓冲区的数据写入到内存存储
            </summary>
            <param name="buffer">指定缓冲区</param>
            <param name="offset">缓冲区的起始位置</param>
            <param name="count">缓冲区的长度</param>
            <param name="index">存储的起始位置</param>
        </member>
        <member name="M:GameBox.IStorage.Append(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将指定缓冲区的数据追加到内存存储
            </summary>
            <param name="buffer">指定缓冲区</param>
            <param name="offset">缓冲区的起始位置</param>
            <param name="count">写入的长度</param>
        </member>
        <member name="M:GameBox.IStorage.Read(System.Byte[],System.Int32,System.Int32,System.Int64)">
            <summary>
            读取数据到指定缓冲区
            </summary>
            <param name="buffer">指定缓冲区</param>
            <param name="offset">缓冲区的起始位置</param>
            <param name="count">读取的长度</param>
            <param name="index">存储的起始位置</param>
            <returns>实际读取的长度</returns>
        </member>
        <member name="T:GameBox.MemoryStorage">
            <summary>
            内存存储
            </summary>
        </member>
        <member name="T:GameBox.MemoryStorage.BlockMeta">
            <summary>
            区块元数据
            </summary>
        </member>
        <member name="F:GameBox.MemoryStorage.BlockMeta.BlockIndex">
            <summary>
            区块下标
            </summary>
        </member>
        <member name="F:GameBox.MemoryStorage.BlockMeta.StartOffset">
            <summary>
            起始偏移量
            </summary>
        </member>
        <member name="F:GameBox.MemoryStorage.BlockMeta.EndOffset">
            <summary>
            终止偏移量
            </summary>
        </member>
        <member name="F:GameBox.MemoryStorage.BlockMeta.Storage">
            <summary>
            存储数据
            </summary>
        </member>
        <member name="M:GameBox.MemoryStorage.BlockMeta.GetRelativeOffset(System.Int64)">
            <summary>
            获取相对偏移量
            </summary>
            <param name="position">全局偏移量</param>
            <returns>相对偏移量</returns>
        </member>
        <member name="M:GameBox.MemoryStorage.BlockMeta.GetFreeSize(System.Int64)">
            <summary>
            获取当前区块剩余量
            </summary>
            <param name="position">全局偏移量</param>
            <returns>剩余量</returns>
        </member>
        <member name="P:GameBox.MemoryStorage.MaxMemoryUsable">
            <summary>
            当前存储最大内存使用量
            </summary>
        </member>
        <member name="P:GameBox.MemoryStorage.BlockSize">
            <summary>
            单个内存块的大小
            </summary>
        </member>
        <member name="P:GameBox.MemoryStorage.Length">
            <summary>
            数据长度
            </summary>
        </member>
        <member name="F:GameBox.MemoryStorage.storage">
            <summary>
            存储的数据
            </summary>
        </member>
        <member name="F:GameBox.MemoryStorage.length">
            <summary>
            实际存储的长度
            </summary>
        </member>
        <member name="F:GameBox.MemoryStorage.locker">
            <summary>
            读写锁
            </summary>
        </member>
        <member name="P:GameBox.MemoryStorage.Locker">
            <summary>
            读写锁
            </summary>
        </member>
        <member name="P:GameBox.MemoryStorage.Disabled">
            <summary>
            是否已经被释放的
            </summary>
        </member>
        <member name="M:GameBox.MemoryStorage.#ctor(System.Int32,System.Int32)">
            <summary>
            构建一个新的内存存储
            </summary>
            <param name="blockBuffer">块缓冲区大小</param>
            <param name="capacity">起始块数量</param>
        </member>
        <member name="M:GameBox.MemoryStorage.#ctor(System.Int64,System.Int32,System.Int32)">
            <summary>
            构建一个新的内存存储
            </summary>
            <param name="maxMemoryUsable">最大内存使用量</param>
            <param name="blockBuffer">块缓冲区大小</param>
            <param name="capacity">起始块数量</param>
        </member>
        <member name="M:GameBox.MemoryStorage.Write(System.Byte[],System.Int32,System.Int32,System.Int64)">
            <summary>
            将指定缓冲区的数据写入到内存存储
            </summary>
            <param name="buffer">指定缓冲区</param>
            <param name="offset">缓冲区的起始位置</param>
            <param name="count">缓冲区的长度</param>
            <param name="index">内存存储的起始位置</param>
        </member>
        <member name="M:GameBox.MemoryStorage.Append(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将指定缓冲区的数据追加到内存存储
            </summary>
            <param name="buffer">指定缓冲区</param>
            <param name="offset">缓冲区的起始位置</param>
            <param name="count">缓冲区的长度</param>
        </member>
        <member name="M:GameBox.MemoryStorage.Read(System.Byte[],System.Int32,System.Int32,System.Int64)">
            <summary>
            读取数据到指定缓冲区
            </summary>
            <param name="buffer">指定缓冲区</param>
            <param name="offset">缓冲区的起始位置</param>
            <param name="count">读取的长度</param>
            <param name="index">存储的起始位置</param>
            <returns>实际读取的长度</returns>
        </member>
        <member name="M:GameBox.MemoryStorage.GetBlockByPosition(System.Int64,System.Boolean)">
            <summary>
            获取指定位置的区块下标
            </summary>
            <param name="position">指定位置</param>
            <param name="allowNull">是否允许为空</param>
            <returns>区块数据</returns>
        </member>
        <member name="M:GameBox.MemoryStorage.GetBlockByIndex(System.Int32,System.Boolean)">
            <summary>
            获取指定区块下标的区块数据
            </summary>
            <param name="index">区块下标</param>
            <param name="allowNull">是否允许为空</param>
            <returns>区块数据</returns>
        </member>
        <member name="M:GameBox.MemoryStorage.Finalize">
            <summary>
            GC回收时
            </summary>
        </member>
        <member name="M:GameBox.MemoryStorage.Dispose">
            <summary>
            释放内存存储
            </summary>
        </member>
        <member name="M:GameBox.MemoryStorage.CreateBlock(System.Int32,System.Int32)">
            <summary>
            创建缓冲区
            </summary>
            <returns>缓冲区</returns>
        </member>
        <member name="M:GameBox.MemoryStorage.CreateBuffer(System.Int32)">
            <summary>
            创建缓冲区
            </summary>
            <returns>缓冲区</returns>
        </member>
        <member name="M:GameBox.MemoryStorage.ReleaseBlock(GameBox.MemoryStorage.BlockMeta)">
            <summary>
            释放缓冲区
            </summary>
            <param name="blockMeta">区块元数据</param>
        </member>
        <member name="M:GameBox.MemoryStorage.ReleaseBuffer(System.ArraySegment{System.Byte})">
            <summary>
            释放缓冲区
            </summary>
            <param name="buffer">缓冲大小</param>
        </member>
        <member name="M:GameBox.MemoryStorage.EnsureStorageBlock(System.Int64)">
            <summary>
            保障存储块满足存储条件
            </summary>
            <param name="value">总共需要占用的空间</param>
        </member>
        <member name="M:GameBox.MemoryStorage.Dispose(System.Boolean)">
            <summary>
            释放内存存储
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:GameBox.MemoryStorage.AssertDisabled">
            <summary>
            断言是否已经被释放
            </summary>
        </member>
        <member name="M:GameBox.MemoryStorage.AssertMemoryUseable(System.Int64)">
            <summary>
            断言内存使用
            </summary>
            <param name="value">内存占用</param>
        </member>
        <member name="T:GameBox.CombineStream">
            <summary>
            组合流，允许将多个不同的流组合成一个流
            </summary>
        </member>
        <member name="F:GameBox.CombineStream.globalPosition">
            <summary>
            全局游标位置
            </summary>
        </member>
        <member name="F:GameBox.CombineStream.index">
            <summary>
            当前所处的流
            </summary>
        </member>
        <member name="F:GameBox.CombineStream.streams">
            <summary>
            组合流
            </summary>
        </member>
        <member name="F:GameBox.CombineStream.length">
            <summary>
            组合流的长度
            </summary>
        </member>
        <member name="P:GameBox.CombineStream.Length">
            <summary>
            组合流的长度
            </summary>
        </member>
        <member name="P:GameBox.CombineStream.CanSeek">
            <summary>
            是否能够偏移
            </summary>
        </member>
        <member name="P:GameBox.CombineStream.Position">
            <summary>
            获取当前偏移量
            </summary>
        </member>
        <member name="P:GameBox.CombineStream.CanRead">
            <summary>
            是否是可读的
            </summary>
        </member>
        <member name="P:GameBox.CombineStream.CanWrite">
            <summary>
            是否是可写的
            </summary>
        </member>
        <member name="F:GameBox.CombineStream.autoClosed">
            <summary>
            组合流关闭时是否自动关闭流
            </summary>
        </member>
        <member name="M:GameBox.CombineStream.#ctor(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
            构建一个组合流实例，允许将两个不同的流组合成一个流
            </summary>
            <param name="left">流</param>
            <param name="right">流</param>
            <param name="closed">当组合流释放时是否自动关闭其中的流</param>
        </member>
        <member name="M:GameBox.CombineStream.#ctor(System.IO.Stream[],System.Boolean)">
            <summary>
            构建一个组合流实例，允许将多个流组合成一个流
            </summary>
            <param name="source">流</param>
            <param name="closed">当组合流释放时是否自动关闭其中的流</param>
        </member>
        <member name="M:GameBox.CombineStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            设定位置偏移
            </summary>
            <param name="offset">偏移量</param>
            <param name="origin">偏移方向</param>
            <returns>当前偏移量</returns>
        </member>
        <member name="M:GameBox.CombineStream.CalculatedIndex(System.Int64,System.Int64@)">
            <summary>
            计算偏移下标
            </summary>
            <param name="globalPosition">全局位置</param>
            <param name="localPosition">本地偏移量</param>
        </member>
        <member name="M:GameBox.CombineStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            读取组合流的数据到缓冲区
            </summary>
            <param name="buffer">缓冲区</param>
            <param name="offset">缓冲区偏移量</param>
            <param name="count">希望读取的长度</param>
            <returns>实际读取的长度</returns>
        </member>
        <member name="M:GameBox.CombineStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入数据到组合流
            </summary>
            <param name="buffer">缓冲区</param>
            <param name="offset">偏移量</param>
            <param name="count"></param>
        </member>
        <member name="M:GameBox.CombineStream.SetLength(System.Int64)">
            <summary>
            设定流的长度
            </summary>
            <param name="value">长度</param>
        </member>
        <member name="M:GameBox.CombineStream.Flush">
            <summary>
            Flush Stream
            </summary>
        </member>
        <member name="M:GameBox.CombineStream.Dispose(System.Boolean)">
            <summary>
            当组合流释放时
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:GameBox.PipelineStream">
            <summary>
            管道通讯流
            <para>一读一写线程安全</para>
            </summary>
        </member>
        <member name="F:GameBox.PipelineStream.count">
            <summary>
            可以被读取的长度
            </summary>
        </member>
        <member name="F:GameBox.PipelineStream.capacity">
            <summary>
            容量
            </summary>
        </member>
        <member name="F:GameBox.PipelineStream.sleep">
            <summary>
            休眠时间
            </summary>
        </member>
        <member name="F:GameBox.PipelineStream.ringBuffer">
            <summary>
            环形缓冲区
            </summary>
        </member>
        <member name="E:GameBox.PipelineStream.OnRead">
            <summary>
            当完成读取后触发
            </summary>
        </member>
        <member name="F:GameBox.PipelineStream.disabled">
            <summary>
            是否已经被释放了
            </summary>
        </member>
        <member name="F:GameBox.PipelineStream.closed">
            <summary>
            是否已经关闭流了
            </summary>
        </member>
        <member name="P:GameBox.PipelineStream.CanRead">
            <summary>
            是否可以被读取
            </summary>
        </member>
        <member name="P:GameBox.PipelineStream.CanWrite">
            <summary>
            是否可以被写入
            </summary>
        </member>
        <member name="F:GameBox.PipelineStream.position">
            <summary>
            当前流的位置
            </summary>
        </member>
        <member name="P:GameBox.PipelineStream.Position">
            <summary>
            流位置
            </summary>
        </member>
        <member name="F:GameBox.PipelineStream.length">
            <summary>
            流的长度
            </summary>
        </member>
        <member name="P:GameBox.PipelineStream.Length">
            <summary>
            流的长度
            </summary>
        </member>
        <member name="P:GameBox.PipelineStream.CanSeek">
            <summary>
            是否能够设定偏移量
            </summary>
        </member>
        <member name="P:GameBox.PipelineStream.Closed">
            <summary>
            是否已经关闭了流
            </summary>
        </member>
        <member name="M:GameBox.PipelineStream.#ctor(System.Int32,System.Int32)">
            <summary>
            管道通讯流
            </summary>
            <param name="capacity">缓冲区容量</param>
            <param name="sleep">线程休眠时间</param>
        </member>
        <member name="M:GameBox.PipelineStream.Finalize">
            <summary>
            GC回收时
            </summary>
        </member>
        <member name="M:GameBox.PipelineStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            设定流位置（不支持）
            </summary>
            <param name="offset">偏移量</param>
            <param name="origin">偏移方向</param>
            <returns></returns>
        </member>
        <member name="M:GameBox.PipelineStream.SetLength(System.Int64)">
            <summary>
            设定流的长度
            </summary>
            <param name="value">长度</param>
        </member>
        <member name="M:GameBox.PipelineStream.Flush">
            <summary>
            刷新缓冲区
            </summary>
        </member>
        <member name="M:GameBox.PipelineStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将流中的数据读取到指定缓冲区
            </summary>
            <param name="buffer">指定缓冲区</param>
            <param name="offset">缓冲区起始偏移量</param>
            <param name="count">读取的长度</param>
            <returns>实际读取的长度</returns>
        </member>
        <member name="M:GameBox.PipelineStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将指定缓冲区数据写入流中
            </summary>
            <param name="buffer">指定缓冲区</param>
            <param name="offset">缓冲区起始偏移量</param>
            <param name="count">写入的长度</param>
        </member>
        <member name="M:GameBox.PipelineStream.Close">
            <summary>
            关闭流
            </summary>
        </member>
        <member name="M:GameBox.PipelineStream.AssertClosed">
            <summary>
            断言关闭
            </summary>
        </member>
        <member name="M:GameBox.PipelineStream.AssertDisabled">
            <summary>
            断言释放
            </summary>
        </member>
        <member name="M:GameBox.PipelineStream.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">是否进行释放</param>
        </member>
        <member name="T:GameBox.SegmentStream">
            <summary>
            分片流可以用于包装指定分片的流。
            使指定分片的流访问起来就像传统流那样从开头到结尾。
            </summary>
        </member>
        <member name="F:GameBox.SegmentStream.initialPosition">
            <summary>
            基础流的初始的位置
            </summary>
        </member>
        <member name="F:GameBox.SegmentStream.partSize">
            <summary>
            分片的大小
            </summary>
        </member>
        <member name="M:GameBox.SegmentStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            构造一个分片流
            </summary>
            <param name="stream">基础流</param>
            <param name="partSize">分片大小</param>
        </member>
        <member name="P:GameBox.SegmentStream.RemainingSize">
            <summary>
            剩余长度
            </summary>
        </member>
        <member name="P:GameBox.SegmentStream.Length">
            <summary>
            流的长度
            </summary>
        </member>
        <member name="P:GameBox.SegmentStream.Position">
            <summary>
            当前流的位置
            </summary>
        </member>
        <member name="M:GameBox.SegmentStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            设定流的位置
            </summary>
            <param name="offset">偏移量</param>
            <param name="origin">偏移方向</param>
            <returns>流的位置</returns>
        </member>
        <member name="M:GameBox.SegmentStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            读取流的数据到指定缓冲区
            </summary>
            <param name="buffer">指定缓冲区</param>
            <param name="offset">缓冲区偏移量</param>
            <param name="count">希望读取的长度</param>
            <returns>实际读取的长度</returns>
        </member>
        <member name="M:GameBox.SegmentStream.SetLength(System.Int64)">
            <summary>
            设定流的长度
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:GameBox.SegmentStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将指定缓冲区的数据写入流中
            </summary>
            <param name="buffer">指定缓冲区</param>
            <param name="offset">缓冲区偏移量</param>
            <param name="count">写入数据的长度</param>
        </member>
        <member name="T:GameBox.StorageStream">
            <summary>
            存储数据流
            </summary>
        </member>
        <member name="F:GameBox.StorageStream.position">
            <summary>
            当前游标所处的位置
            </summary>
        </member>
        <member name="F:GameBox.StorageStream.disabled">
            <summary>
            是否已经被释放了
            </summary>
        </member>
        <member name="F:GameBox.StorageStream.writable">
            <summary>
            是否是可写的
            </summary>
        </member>
        <member name="F:GameBox.StorageStream.storage">
            <summary>
            存储数据
            </summary>
        </member>
        <member name="P:GameBox.StorageStream.Position">
            <summary>
            偏移量
            </summary>
        </member>
        <member name="P:GameBox.StorageStream.Length">
            <summary>
            数据的长度
            </summary>
        </member>
        <member name="P:GameBox.StorageStream.CanWrite">
            <summary>
            是否是可以写入数据的
            </summary>
        </member>
        <member name="P:GameBox.StorageStream.CanSeek">
            <summary>
            是否可以进行游标偏移
            </summary>
        </member>
        <member name="P:GameBox.StorageStream.CanRead">
            <summary>
            是否可以读取数据
            </summary>
        </member>
        <member name="P:GameBox.StorageStream.Disposed">
            <summary>
            是否已经被释放
            </summary>
        </member>
        <member name="M:GameBox.StorageStream.#ctor(GameBox.IStorage,System.Boolean,System.Int32)">
            <summary>
            存储数据流
            </summary>
            <param name="storage">单个内存块的分块</param>
            <param name="writable">是否是可写的</param>
            <param name="timeout">锁超时时间</param>
        </member>
        <member name="M:GameBox.StorageStream.Finalize">
            <summary>
            GC回收时
            </summary>
        </member>
        <member name="M:GameBox.StorageStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            偏移游标到指定位置
            </summary>
            <param name="offset">偏移量</param>
            <param name="origin">偏移方向</param>
            <returns>新的位置</returns>
        </member>
        <member name="M:GameBox.StorageStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入数据
            </summary>
            <param name="buffer">需要写入的字节流</param>
            <param name="offset">字节流的起始位置</param>
            <param name="count">需要写入的长度</param>
        </member>
        <member name="M:GameBox.StorageStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            读取数据到指定缓冲区
            </summary>
            <param name="buffer">指定缓冲区</param>
            <param name="offset">缓冲区的起始位置</param>
            <param name="count">需要读取的长度</param>
            <returns>实际读取的长度</returns>
        </member>
        <member name="M:GameBox.StorageStream.SetLength(System.Int64)">
            <summary>
            设定长度
            </summary>
            <param name="value">新的长度值</param>
        </member>
        <member name="M:GameBox.StorageStream.Flush">
            <summary>
            清除当前流的缓冲区
            </summary>
        </member>
        <member name="M:GameBox.StorageStream.GetOccupyException">
            <summary>
            获取线程占用异常
            </summary>
            <returns>异常</returns>
        </member>
        <member name="M:GameBox.StorageStream.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">是否进行释放</param>
        </member>
        <member name="M:GameBox.StorageStream.AssertDisabled">
            <summary>
            断言是否已经被释放
            </summary>
        </member>
        <member name="M:GameBox.StorageStream.AssertWritable">
            <summary>
            断言是否能够写入
            </summary>
        </member>
        <member name="T:GameBox.WrapperStream">
            <summary>
            包装流
            </summary>
        </member>
        <member name="P:GameBox.WrapperStream.BaseStream">
            <summary>
            基础流
            </summary>
        </member>
        <member name="P:GameBox.WrapperStream.CanRead">
            <summary>
            流是否可读
            </summary>
        </member>
        <member name="P:GameBox.WrapperStream.CanSeek">
            <summary>
            流是否可以偏移
            </summary>
        </member>
        <member name="P:GameBox.WrapperStream.CanWrite">
            <summary>
            流是否可写
            </summary>
        </member>
        <member name="P:GameBox.WrapperStream.Position">
            <summary>
            流的偏移位置
            </summary>
        </member>
        <member name="P:GameBox.WrapperStream.Length">
            <summary>
            流的长度
            </summary>
        </member>
        <member name="M:GameBox.WrapperStream.#ctor">
            <summary>
            构建一个包装流
            </summary>
        </member>
        <member name="M:GameBox.WrapperStream.#ctor(System.IO.Stream)">
            <summary>
            构建一个包装流
            </summary>
            <param name="stream">基础流</param>
        </member>
        <member name="M:GameBox.WrapperStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            偏移流到指定位置
            </summary>
            <param name="offset">指定位置</param>
            <param name="origin">偏移方向</param>
            <returns>新的位置</returns>
        </member>
        <member name="M:GameBox.WrapperStream.Flush">
            <summary>
            刷新流的缓冲区
            </summary>
        </member>
        <member name="M:GameBox.WrapperStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            在流中写入指定缓冲区的数据
            </summary>
            <param name="buffer">指定缓冲区</param>
            <param name="offset">指定缓冲区偏移量</param>
            <param name="count">写入的长度</param>
        </member>
        <member name="M:GameBox.WrapperStream.SetLength(System.Int64)">
            <summary>
            设定流的长度
            </summary>
            <param name="value">长度</param>
        </member>
        <member name="M:GameBox.WrapperStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            读取流的数据到指定缓冲区
            </summary>
            <param name="buffer">指定缓冲区</param>
            <param name="offset">指定缓冲区偏移量</param>
            <param name="count">读取的长度</param>
            <returns>实际读取的长度</returns>
        </member>
        <member name="T:GameBox.IManaged`1">
            <summary>
            管理器模版 - 扩展内容不对外可见
            </summary>
            <typeparam name="TInterface">拓展接口</typeparam>
        </member>
        <member name="E:GameBox.IManaged`1.OnResolving">
            <summary>
            当扩展被构建时
            </summary>
        </member>
        <member name="E:GameBox.IManaged`1.OnAfterResolving">
            <summary>
            当扩展被构建时之后
            </summary>
        </member>
        <member name="M:GameBox.IManaged`1.Extend(System.Func{`0},System.String)">
            <summary>
            自定义一个扩展构建器
            </summary>
            <param name="builder">扩展构建器</param>
            <param name="name">扩展名</param>
        </member>
        <member name="M:GameBox.IManaged`1.ReleaseExtend(System.String)">
            <summary>
            释放指定扩展的构建器
            </summary>
            <param name="name">扩展名</param>
        </member>
        <member name="M:GameBox.IManaged`1.RemoveExtend(System.String)">
            <summary>
            释放指定扩展的构建器
            </summary>
            <param name="name">扩展名</param>
        </member>
        <member name="M:GameBox.IManaged`1.ContainsExtend(System.String)">
            <summary>
            是否包含指定扩展构建器
            </summary>
            <param name="name">扩展名</param>
        </member>
        <member name="T:GameBox.IManager`1">
            <summary>
            管理器
            </summary>
        </member>
        <member name="M:GameBox.IManager`1.Get(System.String)">
            <summary>
            获取扩展实现
            </summary>
            <param name="name">扩展名</param>
            <returns>扩展实现</returns>
        </member>
        <member name="P:GameBox.IManager`1.Item(System.String)">
            <summary>
            获取扩展实现
            </summary>
            <param name="name">扩展名</param>
            <returns>扩展实现</returns>
        </member>
        <member name="T:GameBox.ISingleManaged`1">
            <summary>
            管理器模版（拓展解决方案为单例）- 扩展内容不对外可见
            </summary>
        </member>
        <member name="E:GameBox.ISingleManaged`1.OnRelease">
            <summary>
            当扩展被释放时
            </summary>
        </member>
        <member name="M:GameBox.ISingleManaged`1.Release(System.String)">
            <summary>
            释放指定的扩展实现
            </summary>
            <param name="name">扩展名</param>
        </member>
        <member name="M:GameBox.ISingleManaged`1.Contains(System.String)">
            <summary>
            是否包含指定的扩展实现
            </summary>
            <param name="name">扩展名</param>
            <returns>是否包含扩展实现</returns>
        </member>
        <member name="T:GameBox.ISingleManager`1">
            <summary>
            管理器（拓展解决方案为单例）
            </summary>
        </member>
        <member name="M:GameBox.ISingleManager`1.Get(System.String)">
            <summary>
            获取指定的扩展实现
            </summary>
            <param name="name">扩展名</param>
            <returns>扩展实现</returns>
        </member>
        <member name="P:GameBox.ISingleManager`1.Item(System.String)">
            <summary>
            获取指定的扩展实现
            </summary>
            <param name="name">扩展名</param>
            <returns>扩展实现</returns>
        </member>
        <member name="P:GameBox.ISingleManager`1.Default">
            <summary>
            默认的扩展实现
            </summary>
        </member>
        <member name="T:GameBox.Managed`1">
            <summary>
            管理器模版 - 不可被外部访问到的拓展
            </summary>
            <typeparam name="TInterface">拓展接口</typeparam>
        </member>
        <member name="F:GameBox.Managed`1.extendBuilder">
            <summary>
            扩展解决器
            </summary>
        </member>
        <member name="E:GameBox.Managed`1.OnResolving">
            <summary>
            当扩展被构建时
            </summary>
        </member>
        <member name="E:GameBox.Managed`1.OnAfterResolving">
            <summary>
            当扩展被构建时之后
            </summary>
        </member>
        <member name="M:GameBox.Managed`1.#ctor">
            <summary>
            构建一个新的管理器模板
            </summary>
        </member>
        <member name="M:GameBox.Managed`1.Extend(System.Func{`0},System.String)">
            <summary>
            自定义一个扩展构建器
            </summary>
            <param name="builder">扩展构建器</param>
            <param name="name">扩展名</param>
        </member>
        <member name="M:GameBox.Managed`1.ReleaseExtend(System.String)">
            <summary>
            释放指定扩展的构建器
            </summary>
            <param name="name">扩展名</param>
        </member>
        <member name="M:GameBox.Managed`1.RemoveExtend(System.String)">
            <summary>
            释放指定扩展的构建器
            </summary>
            <param name="name">扩展名</param>
        </member>
        <member name="M:GameBox.Managed`1.ContainsExtend(System.String)">
            <summary>
            是否包含指定扩展构建器
            </summary>
            <param name="name">扩展名</param>
        </member>
        <member name="M:GameBox.Managed`1.MakeExtend(System.String)">
            <summary>
            使用指定的扩展构建器生成扩展实现
            </summary>
            <param name="name">扩展名</param>
            <returns>扩展实现</returns>
        </member>
        <member name="M:GameBox.Managed`1.GetDefaultName">
            <summary>
            获取默认的扩展名
            </summary>
            <returns>默认的扩展名</returns>
        </member>
        <member name="M:GameBox.Managed`1.StandardName(System.String@)">
            <summary>
            标准化扩展名
            </summary>
            <param name="name">扩展名</param>
        </member>
        <member name="M:GameBox.Managed`1.GetExtend(System.String)">
            <summary>
            获取扩展的构建闭包
            </summary>
            <param name="name">名字</param>
            <returns>拓展</returns>
        </member>
        <member name="T:GameBox.Manager`1">
            <summary>
            管理器模版
            </summary>
        </member>
        <member name="M:GameBox.Manager`1.Get(System.String)">
            <summary>
            获取扩展实现
            </summary>
            <param name="name">扩展名</param>
            <returns>扩展实现</returns>
        </member>
        <member name="P:GameBox.Manager`1.Item(System.String)">
            <summary>
            获取扩展实现
            </summary>
            <param name="name">扩展名</param>
            <returns>扩展实现</returns>
        </member>
        <member name="T:GameBox.SingleManaged`1">
            <summary>
            管理器模版（拓展解决方案为单例）- 扩展内容不对外可见
            </summary>
        </member>
        <member name="F:GameBox.SingleManaged`1.instances">
            <summary>
            扩展实现
            </summary>
        </member>
        <member name="E:GameBox.SingleManaged`1.OnRelease">
            <summary>
            当释放时
            </summary>
        </member>
        <member name="M:GameBox.SingleManaged`1.#ctor">
            <summary>
            构建一个新的管理器模版
            </summary>
        </member>
        <member name="M:GameBox.SingleManaged`1.Release(System.String)">
            <summary>
            释放指定的扩展实现
            </summary>
            <param name="name">扩展名</param>
        </member>
        <member name="M:GameBox.SingleManaged`1.Contains(System.String)">
            <summary>
            是否包含指定的扩展实现
            </summary>
            <param name="name">扩展名</param>
            <returns>是否包含扩展实现</returns>
        </member>
        <member name="M:GameBox.SingleManaged`1.Dispose">
            <summary>
            释放管理器时
            </summary>
        </member>
        <member name="M:GameBox.SingleManaged`1.InternalRelease(`0)">
            <summary>
            释放扩展
            </summary>
            <param name="extend">扩展实现</param>
        </member>
        <member name="M:GameBox.SingleManaged`1.MakeExtend(System.String)">
            <summary>
            生成扩展实现
            </summary>
            <param name="name">扩展名</param>
            <returns>扩展实现</returns>
        </member>
        <member name="T:GameBox.SingleManager`1">
            <summary>
            管理器模版（拓展解决方案为单例）
            </summary>
        </member>
        <member name="M:GameBox.SingleManager`1.Get(System.String)">
            <summary>
            获取指定的扩展实现
            </summary>
            <param name="name">扩展名</param>
            <returns>扩展实现</returns>
        </member>
        <member name="P:GameBox.SingleManager`1.Default">
            <summary>
            默认的扩展实现
            </summary>
        </member>
        <member name="P:GameBox.SingleManager`1.Item(System.String)">
            <summary>
            获取指定的扩展实现
            </summary>
            <param name="name">扩展名</param>
            <returns>扩展实现</returns>
        </member>
        <member name="T:GameBox.Arr">
            <summary>
            数组
            </summary>
        </member>
        <member name="M:GameBox.Arr.Merge``1(``0[][])">
            <summary>
            将多个规定数组合并成一个数组
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="sources">规定数组</param>
            <returns>合并后的数组</returns>
        </member>
        <member name="M:GameBox.Arr.Rand``1(``0[],System.Int32)">
            <summary>
            从规定数组中获取一个或者指定数量的随机值
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">规定数组</param>
            <param name="number">随机的数量</param>
            <returns>随机后的元素</returns>
        </member>
        <member name="M:GameBox.Arr.Shuffle``1(``0[],System.Nullable{System.Int32})">
            <summary>
            将规定数组中的元素打乱
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">规定数组</param>
            <param name="seed">种子</param>
            <returns>打乱后的数组</returns>
        </member>
        <member name="M:GameBox.Arr.Splice``1(``0[]@,System.Int32,System.Nullable{System.Int32},``0[])">
            <summary>
            从数组中移除指定长度的元素，如果给定了<paramref name="replSource"/>参数，那么新元素从<paramref name="start"/>位置开始插入
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">规定数组</param>
            <param name="start">
            删除元素的开始位置。
            <para>如果该值设置为正数，则从前往后开始删除</para>
            <para>如果该值设置为负数，则从后向前取 <paramref name="start"/> 绝对值。-2 意味着从数组的倒数第二个元素开始</para></param>
            <param name="length">
            删除元素的个数，也是被返回数组的长度
            <para>如果该值设置为整数，则返回该数量的元素。</para>
            <para>如果该值设置为负数，则则从后向前取 <paramref name="length"/> 绝对值位置终止删除。-1 意味着从数组的倒数第一个元素前删除</para>
            <para>如果该值未设置，则返回从 <paramref name="start"/> 参数设置的位置开始直到数组末端的所有元素。</para>
            </param>
            <param name="replSource">在start位置插入的数组</param>
            <returns>被删除的数组</returns>
        </member>
        <member name="M:GameBox.Arr.Cut``1(``0[]@,System.Int32)">
            <summary>
            修剪数组
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">源数组</param>
            <param name="count">裁剪范围，负数为从后向前修剪</param>
        </member>
        <member name="M:GameBox.Arr.Chunk``1(``0[],System.Int32)">
            <summary>
            将数组分为新的数组块
            <para>其中每个数组的单元数目由 <paramref name="size"/> 参数决定。最后一个数组的单元数目可能会少几个。</para>
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">规定数组</param>
            <param name="size">每个分块的大小</param>
            <returns></returns>
        </member>
        <member name="M:GameBox.Arr.Fill``1(System.Int32,System.Int32,``0,``0[])">
            <summary>
            对数组进行填充，如果传入了规定数组，那么会在规定数组的基础上进行填充
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="start">起始下标</param>
            <param name="length">填充长度</param>
            <param name="value">填充的值</param>
            <param name="source">规定数组</param>
            <returns>填充后的数组</returns>
        </member>
        <member name="M:GameBox.Arr.Remove``1(``0[]@,System.Predicate{``0})">
            <summary>
            将数组每个值传给回调函数，如果回调函数返回 true，则移除数组中对应的元素，并返回被移除的元素
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">规定数组</param>
            <param name="predicate">回调函数</param>
            <returns>被移除的数组</returns>
        </member>
        <member name="M:GameBox.Arr.Filter``1(``0[],System.Predicate{``0})">
            <summary>
            输入数组中的每个值传给回调函数,如果回调函数返回 true，则把输入数组中的当前值加入结果数组中
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">规定数组</param>
            <param name="predicate">回调函数</param>
            <returns>需求数组</returns>
        </member>
        <member name="M:GameBox.Arr.Filter``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            将规定迭代器中的每个值传给回调函数,如果回调函数返回 true，则把规定迭代器中的当前值加入结果数组中
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">规定迭代器</param>
            <param name="predicate">回调函数</param>
            <returns>需求数组</returns>
        </member>
        <member name="M:GameBox.Arr.Map``2(``0[],System.Func{``0,``1})">
            <summary>
            将数组值传入用户自定义函数，自定义函数返回的值作为新的数组值
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <typeparam name="TReturn">返回值类型</typeparam>
            <param name="source">规定数组</param>
            <param name="callback">自定义函数</param>
            <returns>处理后的数组</returns>
        </member>
        <member name="M:GameBox.Arr.Map``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            将迭代器的值传入用户自定义函数，自定义函数返回的值作为新的数组值
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <typeparam name="TReturn">返回值类型</typeparam>
            <param name="source">规定迭代器</param>
            <param name="callback">自定义函数</param>
            <returns>处理后的数组</returns>
        </member>
        <member name="M:GameBox.Arr.Pop``1(``0[]@)">
            <summary>
            删除数组中的最后一个元素，并将删除的元素作为返回值返回
            </summary>
            <typeparam name="T">删除数组中的最后一个元素</typeparam>
            <param name="source">规定数组</param>
            <returns>被删除的元素</returns>
        </member>
        <member name="M:GameBox.Arr.Push``1(``0[]@,``0[])">
            <summary>
            将一个或多个元素加入数组尾端
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">规定数组</param>
            <param name="elements">要加入的元素</param>
            <returns>数组的元素个数</returns>
        </member>
        <member name="M:GameBox.Arr.Reduce``1(``0[],System.Func{System.Object,``0,System.String},System.Object)">
            <summary>
            向用户自定义函数发送数组中的值，并返回一个字符串
            <para>如果数组是空的且未传递<paramref name="initial"/>参数，该函数返回 null</para>
            <para>如果指定了<paramref name="initial"/>参数，则该参数将被当成是数组中的第一个值来处理，如果数组为空的话就作为最终返回值(string)</para>
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">规定数组</param>
            <param name="callback">自定义函数</param>
            <param name="initial">初始值</param>
            <returns></returns>
        </member>
        <member name="M:GameBox.Arr.Slice``1(``0[],System.Int32,System.Nullable{System.Int32})">
            <summary>
            在数组中根据条件取出一段值，并返回。
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">规定数组</param>
            <param name="start">
            取出元素的开始位置。
            <para>如果该值设置为正数，则从前往后开始取</para>
            <para>如果该值设置为负数，则从后向前取 <paramref name="start"/> 绝对值。-2 意味着从数组的倒数第二个元素开始</para>
            </param>
            <param name="length">
            被返回数组的长度
            <para>如果该值设置为整数，则返回该数量的元素。</para>
            <para>如果该值设置为负数，则则从后向前取 <paramref name="length"/> 绝对值位置终止取出。-1 意味着从数组的倒数第一个元素前终止</para>
            <para>如果该值未设置，则返回从 <paramref name="start"/> 参数设置的位置开始直到数组末端的所有元素。</para>
            </param>
            <returns>取出的数组</returns>
        </member>
        <member name="M:GameBox.Arr.Shift``1(``0[]@)">
            <summary>
            删除数组中第一个元素，并返回被删除元素的值
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">规定数组</param>
            <returns>被删除元素的值</returns>
        </member>
        <member name="M:GameBox.Arr.Unshift``1(``0[]@,``0[])">
            <summary>
            向数组插入新元素。新数组的值将被插入到数组的开头。
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">规定数组</param>
            <param name="elements">插入的元素</param>
            <returns>数组元素个数</returns>
        </member>
        <member name="M:GameBox.Arr.Reverse``1(``0[],System.Int32,System.Nullable{System.Int32})">
            <summary>
            以相反的顺序返回数组
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">规定数组</param>
            <param name="start">
            起始元素的开始位置。
            <para>如果该值设置为正数，则从前往后开始取</para>
            <para>如果该值设置为负数，则从后向前取 <paramref name="start"/> 绝对值。-2 意味着从数组的倒数第二个元素开始</para></param>
            <param name="length">
            被返回数组的长度
            <para>如果该值设置为整数，则返回该数量的元素。</para>
            <para>如果该值设置为负数，则则从后向前取 <paramref name="length"/> 绝对值位置终止取出。-1 意味着从数组的倒数第一个元素前终止</para>
            <para>如果该值未设置，则返回从 <paramref name="start"/> 参数设置的位置开始直到数组末端的所有元素。</para>
            </param>
            <returns>反转的数组</returns>
        </member>
        <member name="M:GameBox.Arr.IndexOf``1(``0[],``0[])">
            <summary>
            从数组中检索符合全部匹配值的初始元素下标，如果返回-1则代表没有出现
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">规定数组</param>
            <param name="match">要匹配的值，如果有多个，只有全部的匹配才算匹配</param>
            <returns>如果要检索的值没有出现，则该方法返回 -1</returns>
        </member>
        <member name="M:GameBox.Arr.IndexOfAny``1(``0[],``0[])">
            <summary>
            从数组中检索指定的任意匹配值所在的下标，如果返回-1则代表没有出现
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">规定数组</param>
            <param name="match">要匹配的值</param>
            <returns>如果要检索的值没有出现，则该方法返回 -1</returns>
        </member>
        <member name="M:GameBox.Arr.Difference``1(``0[],``0[])">
            <summary>
            排除掉数组中的指定值
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">需要过滤的数组</param>
            <param name="match">数组需要排除掉的值</param>
            <returns>过滤后的数组</returns>
        </member>
        <member name="M:GameBox.Arr.RemoveAt``1(``0[]@,System.Int32)">
            <summary>
            移除并返回指定下标的数组元素
            <para>如果下标传入的是负数那么将会从末尾移除</para>
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">规定数组</param>
            <param name="index">数组下标</param>
            <returns>被移除的元素</returns>
        </member>
        <member name="M:GameBox.Arr.Flash``1(``0[],System.Action{``0},System.Action{``0},System.Action)">
            <summary>
            临时性的回调元素，如果遇到异常或者完成回调后会进行回滚元素回调
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">规定数组</param>
            <param name="process">顺序回调</param>
            <param name="completed">所有回调完成后</param>
            <param name="rollback">回滚回调</param>
        </member>
        <member name="T:GameBox.Dict">
            <summary>
            字典
            </summary>
        </member>
        <member name="M:GameBox.Dict.Filter``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            将输入字典中的每个值传给回调函数,如果回调函数返回 true，则把输入字典中的当前键值对加入结果字典中
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="source">规定字典</param>
            <param name="predicate">回调函数</param>
            <returns>需求字典</returns>
        </member>
        <member name="M:GameBox.Dict.Remove``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            将输入字典中的每个值传给回调函数，如果回调函数返回 true，则移除字典中对应的元素，并返回被移除的元素
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="source">规定字典</param>
            <param name="predicate">回调函数</param>
            <return>被移除的元素</return>
        </member>
        <member name="M:GameBox.Dict.Modify``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``0,``1,``1})">
            <summary>
            将输入字典中的每个值传给回调函数，回调函数的返回值用于修改元素的值
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="source">规定字典</param>
            <param name="callback">回调函数</param>
        </member>
        <member name="M:GameBox.Dict.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Boolean)">
            <summary>
            将元素批量添加到字典
            </summary>
            <typeparam name="TKey">字典键</typeparam>
            <typeparam name="TValue">字典值</typeparam>
            <param name="source">目标字典</param>
            <param name="added">增加的内容</param>
            <param name="replaced">遇到重复是否替换，如果不进行替换遇到重复将会抛出一个异常</param>
        </member>
        <member name="M:GameBox.Dict.Map``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``0,``1,``1})">
            <summary>
            将字典值传入用户自定义函数，自定义函数返回的值作为新的字典值
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="source">规定字典</param>
            <param name="callback">自定义函数</param>
            <returns>处理后的字典</returns>
        </member>
        <member name="M:GameBox.Dict.Keys``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            获取字典的键数组
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="source">规定字典</param>
            <returns>字典的键数组</returns>
        </member>
        <member name="M:GameBox.Dict.Values``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            获取字典的值数组
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="source">规定字典</param>
            <returns>字典的值数组</returns>
        </member>
        <member name="M:GameBox.Dict.Get(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object)">
            <summary>
            使用点（.）来访问深度字典
            </summary>
            <param name="dict">规定字典</param>
            <param name="key">键，支持使用点（.）来进行深度访问</param>
            <param name="def">默认值</param>
            <returns>字典值</returns>
        </member>
        <member name="M:GameBox.Dict.Set(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object)">
            <summary>
            使用点（.）来访问深度字典，并为其指定位置设定一个值
            </summary>
            <param name="dict">规定字典</param>
            <param name="key">键，支持使用点（.）来进行深度访问</param>
            <param name="val">设定的值</param>
        </member>
        <member name="M:GameBox.Dict.Remove(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            使用点（.）来访问深度字典，并移除其中指定的值
            </summary>
            <param name="dict">规定字典</param>
            <param name="key">键，支持使用点（.）来进行深度访问</param>
        </member>
        <member name="M:GameBox.Dict.GetValueByDepthArray(System.Collections.Generic.IDictionary{System.String,System.Object},System.String[]@)">
            <summary>
            通过深度数组来访问字典
            </summary>
            <param name="dict">规定字典</param>
            <param name="keys">深度数组（深度数组以倒序传入）</param>
            <returns>字典值</returns>
        </member>
        <member name="M:GameBox.Dict.SetValueByDepthArray(System.Collections.Generic.IDictionary{System.String,System.Object},System.String[]@,System.Object)">
            <summary>
            通过深度数组来访问字典，并为其指定位置设定一个值
            </summary>
            <param name="dict">规定字典</param>
            <param name="keys">深度数组（深度数组以倒序传入）</param>
            <param name="value">设定值</param>
        </member>
        <member name="M:GameBox.Dict.RemoveValueByDepthArray(System.Collections.Generic.IDictionary{System.String,System.Object},System.String[]@)">
            <summary>
            通过深度数组来移除数组中的一个值
            </summary>
            <param name="dict">规定字典</param>
            <param name="keys">深度数组（深度数组以倒序传入）</param>
        </member>
        <member name="T:GameBox.Enum">
            <summary>
            自定义枚举
            </summary>
        </member>
        <member name="F:GameBox.Enum.name">
            <summary>
            名字
            </summary>
        </member>
        <member name="M:GameBox.Enum.#ctor(System.String)">
            <summary>
            构造一个枚举
            </summary>
        </member>
        <member name="M:GameBox.Enum.ToString">
            <summary>
            转为字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:GameBox.Enum.Equals(System.Object)">
            <summary>
            是否相等
            </summary>
            <param name="obj">对象</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:GameBox.Enum.GetHashCode">
            <summary>
            获取哈希码
            </summary>
            <returns>哈希吗</returns>
        </member>
        <member name="M:GameBox.Enum.op_Implicit(GameBox.Enum)~System.String">
            <summary>
            自定义枚举转字符串
            </summary>
            <param name="e">自定义枚举转字符串</param>
        </member>
        <member name="M:GameBox.Enum.op_Equality(GameBox.Enum,GameBox.Enum)">
            <summary>
            是否相等
            </summary>
            <param name="left">左值</param>
            <param name="right">右值</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:GameBox.Enum.op_Inequality(GameBox.Enum,GameBox.Enum)">
            <summary>
            是否不等
            </summary>
            <param name="left">左值</param>
            <param name="right">右值</param>
            <returns>是否不等</returns>
        </member>
        <member name="T:GameBox.IntExtension">
            <summary>
            Int 扩展函数
            </summary>
        </member>
        <member name="M:GameBox.IntExtension.ToPrime(System.Int32)">
            <summary>
            计算规定值最近的二的次幂
            </summary>
            <param name="min">规定的值</param>
            <returns>容量</returns>
        </member>
        <member name="T:GameBox.StringExtension">
            <summary>
            字符串扩展
            </summary>
        </member>
        <member name="M:GameBox.StringExtension.ToStream(System.String,System.Text.Encoding)">
            <summary>
            将指定字符串转为Stream流
            </summary>
            <param name="str">指定字符串</param>
            <param name="encoding">使用的编码</param>
            <returns></returns>
        </member>
        <member name="T:GameBox.IAwait`1">
            <summary>
            等待接口
            </summary>
            <typeparam name="TInterface">等待目标接口</typeparam>
        </member>
        <member name="P:GameBox.IAwait`1.Result">
            <summary>
            结果
            </summary>
        </member>
        <member name="T:GameBox.IAwait">
            <summary>
            等待接口
            </summary>
        </member>
        <member name="P:GameBox.IAwait.IsDone">
            <summary>
            是否准备完成
            </summary>
        </member>
        <member name="P:GameBox.IAwait.Result">
            <summary>
            实现
            </summary>
        </member>
        <member name="T:GameBox.Str">
            <summary>
            字符串
            </summary>
        </member>
        <member name="T:GameBox.Str.PadTypes">
            <summary>
            填充类型
            </summary>
        </member>
        <member name="F:GameBox.Str.PadTypes.Both">
            <summary>
            填充字符串的两侧。如果不是偶数，则右侧获得额外的填充。
            </summary>
        </member>
        <member name="F:GameBox.Str.PadTypes.Left">
            <summary>
            填充字符串的左侧。
            </summary>
        </member>
        <member name="F:GameBox.Str.PadTypes.Right">
            <summary>
            填充字符串的右侧。默认。
            </summary>
        </member>
        <member name="M:GameBox.Str.Method(System.String)">
            <summary>
            获取字符串所表达的函数名
            </summary>
            <param name="pattern">输入字符串</param>
            <returns>函数名</returns>
        </member>
        <member name="M:GameBox.Str.Is(System.String,System.String)">
            <summary>
            将规定字符串翻译为星号匹配表达式
            <para>即删减正则表达式中除了星号外的所有功能</para>
            </summary>
            <param name="pattern">匹配表达式</param>
            <param name="value">规定字符串</param>
            <returns>是否匹配</returns>
        </member>
        <member name="M:GameBox.Str.AsteriskWildcard(System.String)">
            <summary>
            将规定字符串翻译为星号匹配表达式
            <para>即删减正则表达式中除了星号外的所有功能</para>
            </summary>
            <param name="pattern">规定字符串</param>
            <returns>处理后的字符串</returns>
        </member>
        <member name="M:GameBox.Str.Split(System.String,System.Int32)">
            <summary>
            根据长度将字符串分割到数组中
            </summary>
            <param name="str">要分割的字符串</param>
            <param name="length">规定每个数组元素的长度。默认是 1。</param>
            <returns>分割的字符串</returns>
        </member>
        <member name="M:GameBox.Str.Repeat(System.String,System.Int32)">
            <summary>
            将字符串重复指定的次数
            </summary>
            <param name="str">需要被重复的字符串</param>
            <param name="num">重复的次数</param>
            <returns>重复后的字符串</returns>
        </member>
        <member name="M:GameBox.Str.Shuffle(System.String,System.Nullable{System.Int32})">
            <summary>
            随机打乱字符串中的所有字符
            </summary>
            <param name="str">需要被打乱的字符串</param>
            <param name="seed">种子</param>
            <returns>被打乱的字符串</returns>
        </member>
        <member name="M:GameBox.Str.SubstringCount(System.String,System.String,System.Int32,System.Nullable{System.Int32},System.StringComparison)">
            <summary>
            计算子串在字符串中出现的次数
            <para>该函数不计数重叠的子串</para>
            </summary>
            <param name="str">规定字符串</param>
            <param name="subStr">子字符串</param>
            <param name="start">起始位置</param>
            <param name="length">需要扫描的长度</param>
            <param name="comparison">扫描规则</param>
            <returns>子字符串出现的次数</returns>
        </member>
        <member name="M:GameBox.Str.Reverse(System.String)">
            <summary>
            反转规定字符串
            </summary>
            <param name="str">规定字符串</param>
            <returns>反转后的字符串</returns>
        </member>
        <member name="M:GameBox.Str.Pad(System.String,System.Int32,System.String,GameBox.Str.PadTypes)">
            <summary>
            把字符串填充为新的长度。
            </summary>
            <param name="str">规定要填充的字符串</param>
            <param name="length">规定新的字符串长度。如果该值小于字符串的原始长度，则不进行任何操作。</param>
            <param name="padStr">
            规定供填充使用的字符串。默认是空白。
            <para>如果传入的字符串长度小于等于0那么会使用空白代替。</para>
            <para>注释：空白不是空字符串</para>
            </param>
            <param name="type">
            规定填充字符串的哪边。
            <para><see cref="F:GameBox.Str.PadTypes.Both"/>填充字符串的两侧。如果不是偶数，则右侧获得额外的填充。</para>
            <para><see cref="F:GameBox.Str.PadTypes.Left"/>填充字符串的左侧。</para>
            <para><see cref="F:GameBox.Str.PadTypes.Right"/>填充字符串的右侧。默认。</para>
            </param>
            <returns>被填充的字符串</returns>
        </member>
        <member name="M:GameBox.Str.After(System.String,System.String)">
            <summary>
            在规定字符串中查找在规定搜索值，并在规定搜索值之后返回规定字符串的剩余部分。
            <para>如果没有找到则返回规定字符串本身</para>
            </summary>
            <param name="str">规定字符串</param>
            <param name="search">规定搜索值</param>
            <returns>剩余部分</returns>
        </member>
        <member name="M:GameBox.Str.Contains(System.String,System.String[])">
            <summary>
            判断规定字符串是否包含规定子字符串
            <para>子字符串是识别大小写的</para>
            <para></para>
            </summary>
            <param name="str">规定字符串</param>
            <param name="needles">规定子字符串</param>
            <returns>是否包含</returns>
        </member>
        <member name="M:GameBox.Str.Replace(System.String[],System.String,System.String)">
            <summary>
            在规定字符串中替换匹配项
            </summary>
            <param name="matches">匹配项</param>
            <param name="replace">替换的值</param>
            <param name="str">规定字符串</param>
            <returns></returns>
        </member>
        <member name="M:GameBox.Str.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            替换规定字符串中第一次遇到的匹配项
            <para>该函数对大小写敏感</para>
            </summary>
            <param name="match">匹配项</param>
            <param name="replace">替换的内容</param>
            <param name="str">规定字符串</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:GameBox.Str.ReplaceLast(System.String,System.String,System.String)">
            <summary>
            替换规定字符串中从后往前第一次遇到的匹配项
            <para>该函数对大小写敏感</para>
            </summary>
            <param name="match">匹配项</param>
            <param name="replace">替换的内容</param>
            <param name="str">规定字符串</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:GameBox.Str.Random(System.Int32,System.Nullable{System.Int32})">
            <summary>
            生成一个随机字母（含大小写），数字的字符串。
            </summary>
            <param name="length">字符串长度</param>
            <param name="seed">种子</param>
            <returns>随机的字符串</returns>
        </member>
        <member name="M:GameBox.Str.Truncate(System.String,System.Int32,System.Object,System.String)">
            <summary>
            如果长度超过给定的最大字符串长度，则截断字符串。 截断的字符串的最后一个字符将替换为缺省字符串
            <para>eg: Str.Truncate("hello world , the sun is shine",15," ") => hello world...</para>
            </summary>
            <param name="str">要截断的字符串</param>
            <param name="length">截断长度(含缺省字符长度)</param>
            <param name="separator">临近的分隔符，如果设定则截断长度为截断长度最近的分隔符位置,如果传入的是一个正则表达式那么使用正则匹配。</param>
            <param name="mission">缺省字符</param>
            <returns>截断后的字符串</returns>
        </member>
        <member name="T:GameBox.StreamExtension">
            <summary>
            Stream扩展函数
            </summary>
        </member>
        <member name="M:GameBox.StreamExtension.AppendTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            将当前流追加到目标流中
            </summary>
            <param name="source">源数据流</param>
            <param name="destination">目标数据流</param>
            <returns>总共传输了多少数据</returns>
        </member>
        <member name="M:GameBox.StreamExtension.AppendTo(System.IO.Stream,System.IO.Stream,System.Byte[])">
            <summary>
            将当前流追加到目标流中
            </summary>
            <param name="source">源数据流</param>
            <param name="destination">目标数据流</param>
            <param name="buffer">所使用的缓冲区</param>
            <returns>总共传输了多少数据</returns>
        </member>
        <member name="M:GameBox.StreamExtension.ToText(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            将流转为字符串
            </summary>
            <param name="source">源数据流</param>
            <param name="encoding">编码</param>
            <param name="closed">是否自动关闭流</param>
            <returns>字符串</returns>
        </member>
        <member name="T:GameBox.SystemTime">
            <summary>
            时间
            </summary>
        </member>
        <member name="M:GameBox.SystemTime.ToDateTime(System.Int32)">
            <summary>
            将linux时间戳转为DateTime
            </summary>
            <param name="time">时间戳</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:GameBox.SystemTime.Timestamp(System.DateTime)">
            <summary>
            转为Linux时间戳
            </summary>
            <param name="time">DateTime(本地时间)</param>
            <returns>linux时间戳</returns>
        </member>
        <member name="F:GameBox.SystemTime.UtcTime">
            <summary>
            Utc时间
            </summary>
        </member>
        <member name="T:GameBox.ThreadStatic">
            <summary>
            线程静态暂存对象
            </summary>
        </member>
        <member name="F:GameBox.ThreadStatic.buffer">
            <summary>
            默认的缓冲区
            </summary>
        </member>
        <member name="P:GameBox.ThreadStatic.Buffer">
            <summary>
            默认缓冲区
            </summary>
        </member>
        <member name="T:GameBox.Util">
            <summary>
            通用支持
            </summary>
        </member>
        <member name="P:GameBox.Util.Encoding">
            <summary>
            编码
            </summary>
        </member>
        <member name="M:GameBox.Util.#cctor">
            <summary>
            通用支持初始化时
            </summary>
        </member>
        <member name="M:GameBox.Util.GetPriority(System.Type,System.String)">
            <summary>
            获取优先级
            </summary>
            <param name="type">识别的类型</param>
            <param name="method">识别的方法</param>
            <returns>优先级</returns>
        </member>
        <member name="M:GameBox.Util.MakeRandom(System.Nullable{System.Int32})">
            <summary>
            构建一个随机生成器
            </summary>
            <param name="seed">种子</param>
            <returns>随机生成器</returns>
        </member>
        <member name="M:GameBox.Util.MakeSeed">
            <summary>
            生成种子
            </summary>
            <returns>种子</returns>
        </member>
        <member name="M:GameBox.Util.NormalizationPosition(System.Int32,System.Int32@,System.Nullable{System.Int32}@)">
            <summary>
            标准化位置
            </summary>
            <param name="sourceLength">源长度</param>
            <param name="start">起始位置</param>
            <param name="length">作用长度</param>
        </member>
        <member name="T:GameBox.Version">
            <summary>
            版本（遵循semver）
            </summary>
        </member>
        <member name="F:GameBox.Version.versionMatcher">
            <summary>
            版本匹配正则式
            </summary>
        </member>
        <member name="P:GameBox.Version.VersionMatcher">
            <summary>
            版本匹配正则式
            </summary>
        </member>
        <member name="F:GameBox.Version.version">
            <summary>
            原始版本信息
            </summary>
        </member>
        <member name="F:GameBox.Version.current">
            <summary>
            版本信息
            </summary>
        </member>
        <member name="T:GameBox.Version.VersionData">
            <summary>
            版本信息
            </summary>
        </member>
        <member name="F:GameBox.Version.VersionData.Major">
            <summary>
            主版本号
            </summary>
        </member>
        <member name="F:GameBox.Version.VersionData.Minor">
            <summary>
            次版本号
            </summary>
        </member>
        <member name="F:GameBox.Version.VersionData.Revised">
            <summary>
            修订版本号
            </summary>
        </member>
        <member name="F:GameBox.Version.VersionData.PreRelease">
            <summary>
            先行版本号
            </summary>
        </member>
        <member name="F:GameBox.Version.VersionData.BuildMetadata">
            <summary>
            版本编译信息
            </summary>
        </member>
        <member name="M:GameBox.Version.VersionData.#ctor(System.String)">
            <summary>
            版本信息
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:GameBox.Version.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            构造一个版本
            </summary>
            <param name="major">主版本号</param>
            <param name="minor">次版本号</param>
            <param name="revised">修订版本号</param>
        </member>
        <member name="M:GameBox.Version.#ctor(System.String)">
            <summary>
            构造一个版本
            </summary>
            <param name="version">版本号</param>
        </member>
        <member name="M:GameBox.Version.Compare(System.String)">
            <summary>
            将当前版本和输入版本进行比较
            <para>输入版本大于当前版本则返回<code>-1</code></para>
            <para>输入版本等于当前版本则返回<code>0</code></para>
            <para>输入版本小于当前版本则返回<code>1</code></para>
            </summary>
            <param name="version">输入版本</param>
            <returns>比较结果</returns>
        </member>
        <member name="M:GameBox.Version.CompareBlock(System.String,System.String)">
            <summary>
            比较左值和右值
            <para>如果左值大于右值那么返回1</para>
            <para>如果左值等于右值那么返回0</para>
            <para>如果左值小于右值那么返回-1</para>
            </summary>
            <param name="left">左值</param>
            <param name="right">右值</param>
        </member>
        <member name="M:GameBox.Version.GuardVersion(System.String)">
            <summary>
            验证输入版本
            </summary>
            <param name="version">输入版本</param>
        </member>
        <member name="M:GameBox.Version.ToString">
            <summary>
            转为字符串
            </summary>
            <returns>版本信息</returns>
        </member>
    </members>
</doc>
